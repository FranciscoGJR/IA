[
    {
        "model_name": "60n_threshold_early_stop",
        "timestamp": 1714262374.147765,
        "epoch_errors": [
            0.9842392752627012,
            0.863895872571575,
            0.6138552023168932,
            0.42060972943325625,
            0.29666413219259574,
            0.22698496046832736,
            0.1778149591879951,
            0.1399329735479042,
            0.1219085270998031,
            0.10745794090579985,
            0.09779129469903418,
            0.089907297779513,
            0.08280108003973581,
            0.07701011635757397,
            0.07316045151938591
        ],
        "validation_errors": [
            {
                "epoch": 0,
                "error": 0.9627758757370555
            },
            {
                "epoch": 1,
                "error": 0.80344394958275
            },
            {
                "epoch": 2,
                "error": 0.5585786134822998
            },
            {
                "epoch": 3,
                "error": 0.41578063388392505
            },
            {
                "epoch": 4,
                "error": 0.373990194404274
            },
            {
                "epoch": 5,
                "error": 0.36626479227875397
            },
            {
                "epoch": 6,
                "error": 0.3052437997537689
            },
            {
                "epoch": 7,
                "error": 0.28634642307249353
            },
            {
                "epoch": 8,
                "error": 0.2667456763547381
            },
            {
                "epoch": 9,
                "error": 0.2552127987951931
            },
            {
                "epoch": 10,
                "error": 0.25733123227907384
            },
            {
                "epoch": 11,
                "error": 0.2541239508335267
            },
            {
                "epoch": 12,
                "error": 0.24973259913475165
            },
            {
                "epoch": 13,
                "error": 0.2456933244489905
            },
            {
                "epoch": 14,
                "error": 0.24420795192592779
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_early_stop_error_plot.png",
        "weights_path": "./modelos/60n_threshold_early_stop_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_early_stop_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 71.53846153846153,
            "test_avg_error": 0.38538133860013707,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 1,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.3,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_cross_validation_0",
        "timestamp": 1714262764.614172,
        "epoch_errors": [
            0.9807442004929382,
            0.8141852763321702,
            0.536097207235771,
            0.3750909874414189,
            0.279875865722716,
            0.21957189634506666,
            0.16943174502960417,
            0.13123601673140944,
            0.11724213699801873,
            0.10398916580412998,
            0.09219591519040325,
            0.07925819349372366,
            0.07514823410052944,
            0.07045948791077795,
            0.06534785967141099,
            0.06071251710279676,
            0.05895676626784428,
            0.05485690639027762,
            0.054452367030145984,
            0.05243947999432979,
            0.05118458207320993,
            0.05053431870092254,
            0.05012028036802057,
            0.04698736587401062,
            0.04518616641195629,
            0.04393256114319562,
            0.0431848443754389,
            0.04296371266811425,
            0.04216913813368482,
            0.03990956913222355,
            0.03819880052387591,
            0.036927119637958174,
            0.03655052747202434,
            0.035827756470247565,
            0.0351020061593759,
            0.03440326672892581,
            0.0336290722824341,
            0.03322090656230689,
            0.03256181697574475,
            0.03210907683719202,
            0.031697829109838024,
            0.0313164538085847,
            0.0309589974391468,
            0.030621812364869067,
            0.03030234027709851,
            0.029998634172891416,
            0.02970913509181745,
            0.02943255242871901,
            0.02916779273315985,
            0.028913913866552038,
            0.028670093633641782,
            0.028435607276957958,
            0.028209810716855577,
            0.02799212769457081,
            0.027782039670864143,
            0.027579077733384205,
            0.02738281600789993,
            0.027192866220938475,
            0.027008873160829297,
            0.026830510851159808,
            0.026657479297054063,
            0.02648950169761528,
            0.026326322041748475,
            0.026167703022223845,
            0.02601342421609593,
            0.025863280489707367,
            0.025717080594321325,
            0.025574645924539487,
            0.02543580941649865,
            0.025300414566695715,
            0.025168314555401184,
            0.025039371461144037,
            0.02491345555481415,
            0.024790444663629698,
            0.024670223596623225,
            0.02455268362447451,
            0.024437722007501616,
            0.02432524156644849,
            0.02421515029140865,
            0.024107360984818995,
            0.02400179093496599,
            0.023898361616880342,
            0.02379699841787131,
            0.023697630385273484,
            0.02360018999425845,
            0.023504612933804743,
            0.023410837909133467,
            0.023318806459096814,
            0.02322846278717295,
            0.023139753604858215,
            0.023052627986374332,
            0.02296703723371854,
            0.0228829347511799,
            0.022800275928533058,
            0.022719018032196208,
            0.022639120103708162,
            0.02256054286493984,
            0.022483248629510514,
            0.022407201219925905,
            0.022332365890000795,
            0.022258709252165144,
            0.022186199209290568,
            0.022114804890702944,
            0.02204449659207707,
            0.021975245718934135,
            0.021907024733486626,
            0.021839807104594617,
            0.021773567260619717,
            0.02170828054497633,
            0.021643923174198373,
            0.021580472198353143,
            0.021517905463646417,
            0.02145620157707568,
            0.021395339872998693,
            0.021335300381494816,
            0.021276063798404896,
            0.021217611456945333,
            0.021159925300797796,
            0.021102987858584363,
            0.02104678221964355,
            0.02099129201102915,
            0.020936501375658754,
            0.020882394951544266,
            0.020828957852041127,
            0.020776175647056822,
            0.02072403434516459,
            0.020672520376569765,
            0.020621620576881813,
            0.02057132217164601,
            0.020521612761594227,
            0.02047248030857366,
            0.020423913122118127,
            0.02037589984662691,
            0.020328429449118265,
            0.02028149120752801,
            0.020235074699523903,
            0.020189169791809465,
            0.020143766629891723,
            0.020098855628289277,
            0.02005442746115859,
            0.020010473053316696,
            0.019966983571641922,
            0.019923950416831905,
            0.019881365215503953,
            0.019839219812618315,
            0.01979750626421106,
            0.0197562168304202,
            0.01971534396879194,
            0.0196748803278535,
            0.019634818740939832
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.23908933394421739
            },
            {
                "epoch": 19,
                "error": 0.21327341965976743
            },
            {
                "epoch": 29,
                "error": 0.20890392108721417
            },
            {
                "epoch": 39,
                "error": 0.19971398928053447
            },
            {
                "epoch": 49,
                "error": 0.19725687891375346
            },
            {
                "epoch": 59,
                "error": 0.19544042823386903
            },
            {
                "epoch": 69,
                "error": 0.19403667300047733
            },
            {
                "epoch": 79,
                "error": 0.19290168554743561
            },
            {
                "epoch": 89,
                "error": 0.19195428860230948
            },
            {
                "epoch": 99,
                "error": 0.1911446722498663
            },
            {
                "epoch": 109,
                "error": 0.19044012859508616
            },
            {
                "epoch": 119,
                "error": 0.18981806417520192
            },
            {
                "epoch": 129,
                "error": 0.18926225705729785
            },
            {
                "epoch": 139,
                "error": 0.18876069899133704
            },
            {
                "epoch": 149,
                "error": 0.18830427691620594
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_cross_validation_0_error_plot.png",
        "weights_path": "./modelos/60n_threshold_cross_validation_0_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_cross_validation_0_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 68.46153846153847,
            "test_avg_error": 0.35831157285267023,
            "crossvalidation": true,
            "crossvalidation_fold": 1,
            "crossvalidation_size": 10,
            "crossvalidation_group": "60n_threshold_cross_validation"
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_cross_validation_1",
        "timestamp": 1714263154.968897,
        "epoch_errors": [
            0.981228757562733,
            0.8038116490826809,
            0.5115961333108717,
            0.3500626633464347,
            0.27426287366271757,
            0.20642634212590436,
            0.1601700520821602,
            0.12912671335392079,
            0.11514332472863897,
            0.10175350450671071,
            0.08869293819198433,
            0.08011783257967205,
            0.07370775520809585,
            0.0683024780234223,
            0.0658218193747357,
            0.06256394599845282,
            0.05963349292135778,
            0.055876598887924366,
            0.05687112851953578,
            0.052944660247883614,
            0.04904004277385411,
            0.04654776435476997,
            0.04323046571635737,
            0.042087089589651815,
            0.04103560076720051,
            0.040289142291685086,
            0.03986543703713274,
            0.0388373681534887,
            0.03792840048701445,
            0.03743569721131324,
            0.03618073172097066,
            0.03567754154496227,
            0.03492818627761697,
            0.03406665761166653,
            0.03331349536136802,
            0.03294659765828996,
            0.03236884784619596,
            0.03156169139717461,
            0.030985614841270267,
            0.030542049584090805,
            0.030148382090310268,
            0.029793133516004346,
            0.029460264284958685,
            0.029145865641550354,
            0.02884768929989583,
            0.02856396998862928,
            0.02829327914418185,
            0.02803443493894724,
            0.027786440848471306,
            0.027548443188460458,
            0.02731970117833202,
            0.027099565339762884,
            0.026887461541832747,
            0.026682878968045422,
            0.026485360888672888,
            0.026294497507936387,
            0.02610992040669735,
            0.025931298272373803,
            0.025758333733698992,
            0.025590761222958294,
            0.025428345892637785,
            0.025270883738988253,
            0.025118203263121513,
            0.024970169284091088,
            0.024826690008329162,
            0.024687729358715448,
            0.02455332830957104,
            0.024423642552095493,
            0.024299011643401095,
            0.024180093235820564,
            0.024068143438757624,
            0.023965660241478007,
            0.023878050427847162,
            0.023818677703486536,
            0.023827363393721535,
            0.02404717059853421,
            0.02475825741391031,
            0.0248715203344791,
            0.024717200024497125,
            0.024421518269081736,
            0.02391062080210526,
            0.023150873825626573,
            0.022634725852108784,
            0.022440407532521967,
            0.022281575604322864,
            0.022138715081116752,
            0.022006060650407548,
            0.021880918532571837,
            0.021761772363131742,
            0.02164765245286612,
            0.021537879051064725,
            0.021431943878530146,
            0.02132944934489431,
            0.021230074304751115,
            0.021133553155159086,
            0.021039662206427143,
            0.020948210315578027,
            0.020859032178890295,
            0.0207719833719754,
            0.020686936588315046,
            0.020603778728475266,
            0.02052240861011731,
            0.020442735141358737,
            0.02036467584641945,
            0.020288155663273123,
            0.020213105954086853,
            0.020139463684017235,
            0.020067170734542856,
            0.01999617332526212,
            0.01992642152384718,
            0.019857868828172098,
            0.019790471807937172,
            0.019724189795648665,
            0.019658984618786006,
            0.019594820366534007,
            0.01953166318567704,
            0.019469481101221847,
            0.019408243858089994,
            0.019347922780847043,
            0.01928849064893869,
            0.019229921585316452,
            0.019172190956672143,
            0.019115275283774828,
            0.019059152160634606,
            0.019003800181404483,
            0.01894919887409107,
            0.01889532864027562,
            0.018842170700157323,
            0.018789707042325035,
            0.018737920377742006,
            0.018686794097494273,
            0.018636312233911864,
            0.01858645942472025,
            0.018537220879920033,
            0.018488582351130496,
            0.0184405301031632,
            0.018393050887617574,
            0.018346131918315148,
            0.018299760848408262,
            0.018253925749017765,
            0.018208615089268288,
            0.018163817717605203,
            0.018119522844286643,
            0.018075720024957338,
            0.018032399145218134,
            0.017989550406114375,
            0.017947164310473104,
            0.017905231650025923,
            0.01786374349325975,
            0.017822691173943396
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.30182412260672203
            },
            {
                "epoch": 19,
                "error": 0.24841408350095284
            },
            {
                "epoch": 29,
                "error": 0.23887700799297615
            },
            {
                "epoch": 39,
                "error": 0.23540478562100686
            },
            {
                "epoch": 49,
                "error": 0.23243004437880216
            },
            {
                "epoch": 59,
                "error": 0.23032068381704285
            },
            {
                "epoch": 69,
                "error": 0.22881419993609078
            },
            {
                "epoch": 79,
                "error": 0.23013658964919975
            },
            {
                "epoch": 89,
                "error": 0.22718009815100315
            },
            {
                "epoch": 99,
                "error": 0.22612067561564853
            },
            {
                "epoch": 109,
                "error": 0.22521217561717505
            },
            {
                "epoch": 119,
                "error": 0.22440707180545916
            },
            {
                "epoch": 129,
                "error": 0.22368227789610273
            },
            {
                "epoch": 139,
                "error": 0.22302329618775116
            },
            {
                "epoch": 149,
                "error": 0.22241965121586718
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_cross_validation_1_error_plot.png",
        "weights_path": "./modelos/60n_threshold_cross_validation_1_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_cross_validation_1_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 68.46153846153847,
            "test_avg_error": 0.35107345244627564,
            "crossvalidation": true,
            "crossvalidation_fold": 2,
            "crossvalidation_size": 10,
            "crossvalidation_group": "60n_threshold_cross_validation"
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_cross_validation_2",
        "timestamp": 1714263547.9401,
        "epoch_errors": [
            0.9808150452691248,
            0.8211492233145762,
            0.5341830633904118,
            0.3591164198243126,
            0.2676383030847178,
            0.20411251797529914,
            0.16318673837674974,
            0.13452677536765315,
            0.11479087970766613,
            0.10235302911054114,
            0.0912489612034737,
            0.08276775637435811,
            0.07969201914625743,
            0.0747465001092101,
            0.06923323493429646,
            0.06655316006630983,
            0.06436572507191929,
            0.060556896481484095,
            0.05942709938586941,
            0.056444977124493485,
            0.05388941230778602,
            0.051998077033477454,
            0.04913403334619467,
            0.04694249418303818,
            0.04592014019534465,
            0.04387347214447034,
            0.042551836911888304,
            0.041413631358176314,
            0.04094656666740095,
            0.040044254621480584,
            0.040697928718271395,
            0.03826748208356198,
            0.03732154784409328,
            0.03700673822002871,
            0.03647075490533834,
            0.036904646353184876,
            0.0372870897094292,
            0.0368855084615808,
            0.03445803381248126,
            0.033464126607285496,
            0.03258722557396227,
            0.032030234958090244,
            0.0315713963698146,
            0.031162446636765442,
            0.030789018964406348,
            0.030443092198797563,
            0.030119580261423147,
            0.029814983445326133,
            0.02952674644108237,
            0.029252917065432402,
            0.0289919501528065,
            0.028742587888677312,
            0.028503783126226943,
            0.028274648171178234,
            0.028054419328476212,
            0.027842431575900117,
            0.027638099962310942,
            0.0274409056049999,
            0.02725038491739301,
            0.027066121161240034,
            0.026887737708580738,
            0.02671489258665363,
            0.02654727400300808,
            0.026384596631842464,
            0.026226598500287038,
            0.02607303835383866,
            0.025923693409083515,
            0.025778357422847117,
            0.025636839022401645,
            0.025498960252949215,
            0.025364555307384518,
            0.025233469410083444,
            0.025105557831699855,
            0.024980685016062692,
            0.024858723803520125,
            0.024739554737683873,
            0.0246230654446257,
            0.02450915007528768,
            0.024397708803264733,
            0.024288647371271108,
            0.02418187668055934,
            0.02407731241835712,
            0.02397487471905752,
            0.02387448785546164,
            0.023776079956852086,
            0.023679582751080317,
            0.023584931328200602,
            0.0234920639234802,
            0.023400921717872208,
            0.023311448654258948,
            0.023223591267967587,
            0.023137298530223525,
            0.023052521703356654,
            0.0229692142067,
            0.022887331492233178,
            0.02280683092912146,
            0.022727671696387383,
            0.022649814683028867,
            0.022573222394964232,
            0.022497858868245756,
            0.022423689588036685,
            0.022350681412893415,
            0.02227880250393763,
            0.022208022258540554,
            0.02213831124817608,
            0.022069641160130018,
            0.022001984742778938,
            0.021935315754178196,
            0.021869608913720338,
            0.02180483985664475,
            0.02174098509119857,
            0.021678021958263783,
            0.021615928593282225,
            0.021554683890321905,
            0.021494267468141363,
            0.02143465963812037,
            0.02137584137393325,
            0.021317794282854425,
            0.02126050057858879,
            0.021203943055533466,
            0.021148105064378905,
            0.021092970488967504,
            0.021038523724332917,
            0.020984749655847748,
            0.020931633639413732,
            0.020879161482632035,
            0.02082731942689665,
            0.0207760941303565,
            0.02072547265169667,
            0.02067544243469208,
            0.02062599129348941,
            0.020577107398577203,
            0.02052877926340557,
            0.02048099573161978,
            0.020433745964874874,
            0.020387019431199298,
            0.020340805893878697,
            0.02029509540083196,
            0.02024987827445403,
            0.020205145101901207,
            0.020160886725795777,
            0.020117094235328516,
            0.020073758957739676,
            0.020030872450158492,
            0.01998842649178371,
            0.019946413076388295,
            0.01990482440513277,
            0.019863652879671234,
            0.01982289109553692,
            0.01978253183579338
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.23498143308032746
            },
            {
                "epoch": 19,
                "error": 0.21657735388346272
            },
            {
                "epoch": 29,
                "error": 0.19587341353325896
            },
            {
                "epoch": 39,
                "error": 0.19135949614929806
            },
            {
                "epoch": 49,
                "error": 0.19096069855109107
            },
            {
                "epoch": 59,
                "error": 0.18994035922676905
            },
            {
                "epoch": 69,
                "error": 0.18903440787850606
            },
            {
                "epoch": 79,
                "error": 0.1882536701439173
            },
            {
                "epoch": 89,
                "error": 0.1875752485767796
            },
            {
                "epoch": 99,
                "error": 0.1869785029001102
            },
            {
                "epoch": 109,
                "error": 0.18644749520655393
            },
            {
                "epoch": 119,
                "error": 0.18597012908530408
            },
            {
                "epoch": 129,
                "error": 0.18553715462795167
            },
            {
                "epoch": 139,
                "error": 0.18514140531063078
            },
            {
                "epoch": 149,
                "error": 0.18477725089965719
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_cross_validation_2_error_plot.png",
        "weights_path": "./modelos/60n_threshold_cross_validation_2_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_cross_validation_2_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 67.6923076923077,
            "test_avg_error": 0.3919615920342859,
            "crossvalidation": true,
            "crossvalidation_fold": 3,
            "crossvalidation_size": 10,
            "crossvalidation_group": "60n_threshold_cross_validation"
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_cross_validation_3",
        "timestamp": 1714263940.862214,
        "epoch_errors": [
            0.982316676658614,
            0.8248531615098782,
            0.5360375685861062,
            0.3737735031754098,
            0.2752956496941475,
            0.21383134087912772,
            0.16973944037672037,
            0.1356625084600127,
            0.1210019287710435,
            0.10393499407099181,
            0.08981134835472847,
            0.08231643780339966,
            0.07419452034586713,
            0.0684655201957389,
            0.06507566383968587,
            0.06248480466704963,
            0.05892407710230828,
            0.05697439428880643,
            0.05513589745572,
            0.05378511726548099,
            0.05217945432424981,
            0.05110425192781634,
            0.04864023418022558,
            0.04689022944459726,
            0.045325706491738144,
            0.0441462409597951,
            0.04315074485373998,
            0.04239361677408011,
            0.041671411919662636,
            0.04099661559702536,
            0.0403320074756079,
            0.0399312434408826,
            0.03940958865865652,
            0.03901101159900038,
            0.03869768910706222,
            0.037261612464793537,
            0.036689188888317355,
            0.03550534677416977,
            0.03651725263289175,
            0.03446526858820655,
            0.03411660964289277,
            0.033638826128383245,
            0.03326869239832882,
            0.032931948667634214,
            0.03261723382330646,
            0.03232026010076819,
            0.032038468970850296,
            0.03177006268123875,
            0.03151366653201775,
            0.0312681741484142,
            0.03103266459901807,
            0.030806353057584626,
            0.030588559092260253,
            0.030378685057910363,
            0.030176200676783144,
            0.02998063161572619,
            0.02979155075978317,
            0.02960857137360013,
            0.029431341627312098,
            0.029259540136235194,
            0.029092872272060092,
            0.02893106707346743,
            0.028773874630923218,
            0.028621063852469937,
            0.028472420539812127,
            0.02832774572010061,
            0.028186854190602587,
            0.02804957324221236,
            0.027915741534401108,
            0.027785208099308418,
            0.027657831456654226,
            0.02753347882428939,
            0.027412025411703646,
            0.027293353785828256,
            0.027177353300106365,
            0.027063919579150057,
            0.026952954052411965,
            0.02684436353121901,
            0.026738059824290533,
            0.026633959387510148,
            0.02653198300426831,
            0.02643205549316148,
            0.02633410544022926,
            0.026238064953252514,
            0.026143869435930476,
            0.026051457380004816,
            0.02596077017362219,
            0.025871751924413978,
            0.025784349295940593,
            0.025698511356292354,
            0.025614189437765767,
            0.025531337006648128,
            0.02544990954223906,
            0.025369864424328686,
            0.025291160828425138,
            0.025213759628096164,
            0.025137623303848524,
            0.025062715858023395,
            0.02498900273523521,
            0.024916450747923116,
            0.024845028006625167,
            0.024774703854617722,
            0.024705448806595476,
            0.02463723449109482,
            0.02457003359638948,
            0.024503819819609102,
            0.02443856781885238,
            0.02437425316808641,
            0.024310852314638875,
            0.024248342539106477,
            0.02418670191751669,
            0.024125909285592564,
            0.024065944204981718,
            0.02400678693132175,
            0.02394841838402336,
            0.02389082011766245,
            0.0238339742948782,
            0.023777863660685006,
            0.02372247151810937,
            0.023667781705071823,
            0.023613778572437846,
            0.023560446963168308,
            0.02350777219250426,
            0.023455740029124438,
            0.023404336677220604,
            0.02335354875943623,
            0.023303363300620127,
            0.023253767712349507,
            0.02320474977817777,
            0.023156297639568984,
            0.02310839978247932,
            0.023061045024551502,
            0.023014222502889346,
            0.022967921662379827,
            0.02292213224453559,
            0.02287684427682937,
            0.02283204806249497,
            0.022787734170770704,
            0.022743893427562927,
            0.02270051690650759,
            0.02265759592041098,
            0.02261512201304901,
            0.02257308695130947,
            0.022531482717657873,
            0.022490301502913566,
            0.022449535699319123,
            0.022409177893890193,
            0.022369220862031962,
            0.022329657561409682,
            0.022290481126061232
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.18441837966297311
            },
            {
                "epoch": 19,
                "error": 0.15904478931738814
            },
            {
                "epoch": 29,
                "error": 0.14722204603440953
            },
            {
                "epoch": 39,
                "error": 0.1406149665133061
            },
            {
                "epoch": 49,
                "error": 0.13654921866683056
            },
            {
                "epoch": 59,
                "error": 0.133929632098962
            },
            {
                "epoch": 69,
                "error": 0.13194168023932834
            },
            {
                "epoch": 79,
                "error": 0.13035648604461142
            },
            {
                "epoch": 89,
                "error": 0.1290439824466985
            },
            {
                "epoch": 99,
                "error": 0.1279273561008213
            },
            {
                "epoch": 109,
                "error": 0.12695789662994011
            },
            {
                "epoch": 119,
                "error": 0.12610284306954467
            },
            {
                "epoch": 129,
                "error": 0.12533912801966846
            },
            {
                "epoch": 139,
                "error": 0.12464991455406835
            },
            {
                "epoch": 149,
                "error": 0.12402255400251133
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_cross_validation_3_error_plot.png",
        "weights_path": "./modelos/60n_threshold_cross_validation_3_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_cross_validation_3_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 69.23076923076923,
            "test_avg_error": 0.358636608748971,
            "crossvalidation": true,
            "crossvalidation_fold": 4,
            "crossvalidation_size": 10,
            "crossvalidation_group": "60n_threshold_cross_validation"
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_cross_validation_4",
        "timestamp": 1714264332.12948,
        "epoch_errors": [
            0.9822983027934037,
            0.8172541086616227,
            0.531228800324984,
            0.36159224441383975,
            0.2744963743263244,
            0.21815840827755567,
            0.17630472098070227,
            0.15335513736532874,
            0.12760481908744076,
            0.11412651848538038,
            0.10234455761980614,
            0.0959498337038445,
            0.08373851892645173,
            0.08265510903843092,
            0.07586673086848145,
            0.06999539311394343,
            0.06609135210684634,
            0.061653417724991895,
            0.05901812283899503,
            0.057028938838466,
            0.05602676228461633,
            0.05309194030923553,
            0.05243389966147866,
            0.05110570870650857,
            0.050443411201975756,
            0.04960664551506364,
            0.04973085466919456,
            0.04761941293558288,
            0.0475972391604667,
            0.04764769673941575,
            0.046161711781065005,
            0.04427264331462541,
            0.044271944394246615,
            0.04218665220165449,
            0.041394467267233205,
            0.04009941177754077,
            0.03953278560431225,
            0.038529537250250157,
            0.03793596942312091,
            0.03703765232642186,
            0.03656689040250434,
            0.036554494379735625,
            0.03575813738529787,
            0.03536057014289193,
            0.03485154427603594,
            0.034619154522032625,
            0.03507993366398081,
            0.034810340027499664,
            0.03338631475556515,
            0.0330139958385964,
            0.03290334551445359,
            0.032475794741562425,
            0.0320796480581293,
            0.03175732016539812,
            0.031493939624076005,
            0.03118966172760862,
            0.03090834199169859,
            0.030517027010659906,
            0.030077144636657917,
            0.029743013229846686,
            0.02945816250491405,
            0.029202438384859076,
            0.028967077394527658,
            0.028747298912417965,
            0.028540140447060932,
            0.028343599612207712,
            0.028156234977711022,
            0.02797695804511779,
            0.027804915545777013,
            0.027639418496490077,
            0.027479897188375655,
            0.02732587137134447,
            0.027176929759558835,
            0.027032715484233086,
            0.02689291547484413,
            0.026757252516109126,
            0.026625479178074403,
            0.026497373089831633,
            0.02637273319826694,
            0.026251376763121868,
            0.026133136912084444,
            0.026017860628504964,
            0.025905407078008088,
            0.025795646203941498,
            0.02568845753852079,
            0.025583729188835235,
            0.025481356965954986,
            0.025381243632164284,
            0.025283298246487035,
            0.02518743559260751,
            0.025093575676330433,
            0.02500164328211213,
            0.024911567580066678,
            0.02482328177634676,
            0.024736722800994395,
            0.02465183102832489,
            0.024568550025690247,
            0.024486826327115886,
            0.024406609228828514,
            0.024327850604138408,
            0.024250504735501072,
            0.02417452816189135,
            0.024099879539884534,
            0.024026519517054756,
            0.02395441061649361,
            0.023883517131408787,
            0.02381380502890641,
            0.02374524186218048,
            0.023677796690441847,
            0.02361144000601438,
            0.023546143668113247,
            0.02348188084289896,
            0.02341862594947596,
            0.023356354611572087,
            0.02329504361470686,
            0.02323467086872091,
            0.02317521537561046,
            0.023116657202680146,
            0.02305897746110842,
            0.02300215829010021,
            0.02294618284690088,
            0.022891035303050995,
            0.02283670084739142,
            0.022783165696474435,
            0.02273041711322004,
            0.022678443434870084,
            0.02262723411156037,
            0.022576779757159264,
            0.022527072214427006,
            0.022478104637064282,
            0.02242987159186332,
            0.022382369184999713,
            0.022335595217557826,
            0.02228954937674853,
            0.02224423347105362,
            0.02219965171986309,
            0.022155811111253407,
            0.022112721845670865,
            0.022070397888813553,
            0.022028857664525413,
            0.021988124928812143,
            0.021948229880356808,
            0.02190921058286253,
            0.021871114802764362,
            0.0218340024061927,
            0.02179794851739155,
            0.02176304772608804,
            0.0217294197574097,
            0.021697217206293598,
            0.0216666362220472
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.2557835891828378
            },
            {
                "epoch": 19,
                "error": 0.23830074594138553
            },
            {
                "epoch": 29,
                "error": 0.21087538801468084
            },
            {
                "epoch": 39,
                "error": 0.20241362815078395
            },
            {
                "epoch": 49,
                "error": 0.19258603683874334
            },
            {
                "epoch": 59,
                "error": 0.19110760386471945
            },
            {
                "epoch": 69,
                "error": 0.19009687755978438
            },
            {
                "epoch": 79,
                "error": 0.1890216523397378
            },
            {
                "epoch": 89,
                "error": 0.1880466889209005
            },
            {
                "epoch": 99,
                "error": 0.187179965837226
            },
            {
                "epoch": 109,
                "error": 0.18641203496364106
            },
            {
                "epoch": 119,
                "error": 0.18573176409424721
            },
            {
                "epoch": 129,
                "error": 0.18513068721923692
            },
            {
                "epoch": 139,
                "error": 0.18460614623414
            },
            {
                "epoch": 149,
                "error": 0.18417200902211672
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_cross_validation_4_error_plot.png",
        "weights_path": "./modelos/60n_threshold_cross_validation_4_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_cross_validation_4_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 65.38461538461539,
            "test_avg_error": 0.3974220215645503,
            "crossvalidation": true,
            "crossvalidation_fold": 5,
            "crossvalidation_size": 10,
            "crossvalidation_group": "60n_threshold_cross_validation"
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_cross_validation_5",
        "timestamp": 1714264725.542015,
        "epoch_errors": [
            0.9812774368384841,
            0.8254087928165951,
            0.5459317660924758,
            0.37525326222021954,
            0.278379291327491,
            0.21580458504991126,
            0.1706488381964081,
            0.14561680078019554,
            0.12084281850009088,
            0.10064077886578845,
            0.08943685623764869,
            0.08454358074820344,
            0.07887581073053533,
            0.07286730302964153,
            0.06677571260923923,
            0.0628000546988645,
            0.05969277847787024,
            0.057206438550211736,
            0.056039453130698885,
            0.05439387734507188,
            0.051840309932556665,
            0.049292122883878145,
            0.046915753267629735,
            0.0451242283135338,
            0.043860876680462686,
            0.0429221572619407,
            0.04209999166497827,
            0.04140618857674756,
            0.040822446121868416,
            0.04024079762085748,
            0.039691475683062215,
            0.03913236918446319,
            0.03866229785627319,
            0.0382469114478697,
            0.03790112383201521,
            0.037675575292665534,
            0.03752814124311171,
            0.03711645159486415,
            0.036664485571972404,
            0.03628802835480433,
            0.035761152587690234,
            0.034859778348208,
            0.03422853823094275,
            0.03375384535880172,
            0.03335180344626217,
            0.03300608107019843,
            0.0327191960228385,
            0.032533483578581525,
            0.03264285272162441,
            0.03332803160551697,
            0.03152262088844895,
            0.031075629092491563,
            0.03073450279762446,
            0.030429124151278346,
            0.030150154909505254,
            0.029891228338951966,
            0.02964842345441288,
            0.02941906954347616,
            0.02920124194500713,
            0.028993492355769482,
            0.028794692732531817,
            0.028603939426338328,
            0.02842049151444991,
            0.028243729586966512,
            0.028073127294305077,
            0.027908231142575696,
            0.027748645785293374,
            0.027594023077399058,
            0.027444053766819743,
            0.027298461075098694,
            0.027156995657495315,
            0.02701943158833196,
            0.02688556312068421,
            0.026755202039609863,
            0.02662817547653651,
            0.02650432408646224,
            0.02638350051390597,
            0.0262655680911271,
            0.026150399725036282,
            0.02603787693880259,
            0.02592788904137012,
            0.025820332403569624,
            0.02571510982371845,
            0.025612129968860472,
            0.025511306880347525,
            0.02541255953447766,
            0.025315811450506456,
            0.025220990339629205,
            0.0251280277895715,
            0.025036858980265874,
            0.024947422426781694,
            0.024859659746245214,
            0.02477351544595451,
            0.02468893673028695,
            0.02460587332432435,
            0.024524277312395808,
            0.024444102989973147,
            0.02436530672754917,
            0.024287846845300498,
            0.024211683497478965,
            0.0241367785656013,
            0.02406309555961272,
            0.02399059952629402,
            0.023919256964261542,
            0.02384903574497988,
            0.023779905039268825,
            0.02371183524883986,
            0.02364479794244395,
            0.023578765796256493,
            0.02351371253815916,
            0.023449612895613585,
            0.023386442546849934,
            0.023324178075119353,
            0.02326279692578241,
            0.02320227736602696,
            0.02314259844702691,
            0.023083739968369425,
            0.023025682444596483,
            0.022968407073714097,
            0.02291189570754258,
            0.022856130823786052,
            0.022801095499713233,
            0.022746773387349623,
            0.02269314869009005,
            0.022640206140648475,
            0.02258793098026929,
            0.022536308939130997,
            0.02248532621787972,
            0.022434969470235246,
            0.02238522578662022,
            0.022336082678763882,
            0.022287528065243152,
            0.022239550257922697,
            0.0221921379492652,
            0.022145280200485097,
            0.022098966430525783,
            0.0220531864058432,
            0.02200793023098648,
            0.02196318833996947,
            0.02191895148843384,
            0.021875210746610106,
            0.021831957493090044,
            0.021789183409431007,
            0.02174688047562058,
            0.021705040966440072,
            0.021663657448775006,
            0.021622722779933153,
            0.02158223010704422,
            0.021542172867632145,
            0.02150254479146907
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.201248557966994
            },
            {
                "epoch": 19,
                "error": 0.17582607370510084
            },
            {
                "epoch": 29,
                "error": 0.16441617250829
            },
            {
                "epoch": 39,
                "error": 0.16063120808402157
            },
            {
                "epoch": 49,
                "error": 0.15710817700378532
            },
            {
                "epoch": 59,
                "error": 0.15353808106609362
            },
            {
                "epoch": 69,
                "error": 0.15147506696414792
            },
            {
                "epoch": 79,
                "error": 0.14993375686629382
            },
            {
                "epoch": 89,
                "error": 0.14870994823617434
            },
            {
                "epoch": 99,
                "error": 0.14770185753390616
            },
            {
                "epoch": 109,
                "error": 0.1468502291975349
            },
            {
                "epoch": 119,
                "error": 0.1461178004595143
            },
            {
                "epoch": 129,
                "error": 0.14548014643245535
            },
            {
                "epoch": 139,
                "error": 0.14492124075014393
            },
            {
                "epoch": 149,
                "error": 0.1444315445984557
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_cross_validation_5_error_plot.png",
        "weights_path": "./modelos/60n_threshold_cross_validation_5_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_cross_validation_5_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 70.76923076923077,
            "test_avg_error": 0.36304826752242625,
            "crossvalidation": true,
            "crossvalidation_fold": 6,
            "crossvalidation_size": 10,
            "crossvalidation_group": "60n_threshold_cross_validation"
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_cross_validation_6",
        "timestamp": 1714265118.58819,
        "epoch_errors": [
            0.9812967361106415,
            0.8136560577494345,
            0.5347142565341283,
            0.37989734926884233,
            0.29686658395451776,
            0.2258878514256816,
            0.1804310340686424,
            0.14291652225107032,
            0.12274532254796608,
            0.10851243294235047,
            0.09427458828929729,
            0.08718116609113769,
            0.08489128311555444,
            0.08013964265854616,
            0.07661592884611175,
            0.07344250840108989,
            0.06564790116657211,
            0.06385433026377414,
            0.06080745242954571,
            0.05695479054562529,
            0.053288695980604706,
            0.05024794716743498,
            0.04895606620500694,
            0.04783685063274984,
            0.04725492062909692,
            0.043638834929560846,
            0.04189496152853654,
            0.040696027149599204,
            0.03968939066645731,
            0.03884324785220815,
            0.03812112574616938,
            0.03747610195913293,
            0.03688749461112309,
            0.03634460965140926,
            0.03584024223909176,
            0.03536907231090649,
            0.03492697206941045,
            0.03451063022661018,
            0.03411732576934575,
            0.03374478165644192,
            0.0333910651108995,
            0.0330545169038904,
            0.03273369963629968,
            0.032427359026959576,
            0.0321343944751472,
            0.031853836525718306,
            0.03158482975247739,
            0.03132662022841204,
            0.031078547338283084,
            0.03084004038174776,
            0.03061062147982643,
            0.03038991827357644,
            0.03017769405597793,
            0.02997391258291366,
            0.02977887921541969,
            0.029593569018478223,
            0.029420474180080515,
            0.02926614074809339,
            0.02915043413985143,
            0.029149617354327098,
            0.02958968969762556,
            0.029919378019363153,
            0.028345233423928178,
            0.02799853787718101,
            0.02774605471841948,
            0.027526665636207797,
            0.02732782150707374,
            0.02714364848044661,
            0.026970736716728505,
            0.026806893677697757,
            0.02665061290482612,
            0.02650080788115823,
            0.026356664725258747,
            0.02621755466894678,
            0.026082979186689104,
            0.025952534113894615,
            0.025825885370472212,
            0.02570275206711359,
            0.025582894465367885,
            0.025466105217927373,
            0.02535220287820062,
            0.02524102701192012,
            0.025132434460042576,
            0.02502629644226903,
            0.024922496283235465,
            0.02482092760604456,
            0.024721492880855036,
            0.024624102246306866,
            0.024528672542850998,
            0.024435126512331058,
            0.02434339212925428,
            0.024253402037331298,
            0.024165093070901023,
            0.02407840584537611,
            0.02399328440425867,
            0.023909675912876575,
            0.023827530390989157,
            0.023746800477955056,
            0.023667441225364797,
            0.023589409912982834,
            0.023512665884596384,
            0.023437170400962618,
            0.023362886507522964,
            0.023289778914939666,
            0.02321781389082015,
            0.02314695916125044,
            0.023077183820966313,
            0.023008458251165174,
            0.022940754044101036,
            0.022874043933726967,
            0.022808301731746815,
            0.022743502268522973,
            0.022679621338356278,
            0.022616635648715543,
            0.022554522773044556,
            0.02249326110681889,
            0.02243282982656109,
            0.022373208851557472,
            0.02231437880804535,
            0.02225632099566673,
            0.022199017356003038,
            0.02214245044302675,
            0.0220866033953194,
            0.022031459909923255,
            0.021977004217702538,
            0.02192322106010599,
            0.021870095667228473,
            0.021817613737080875,
            0.02176576141598451,
            0.021714525280013237,
            0.02166389231741372,
            0.02161384991193943,
            0.0215643858270385,
            0.02151548819084235,
            0.02146714548190349,
            0.02141934651563709,
            0.02137208043142303,
            0.021325336680328925,
            0.02127910501341713,
            0.021233375470601803,
            0.021188138370023965,
            0.021143384297915797,
            0.021099104098925126,
            0.02105528886687656,
            0.02101192993594355,
            0.02096901887221024,
            0.020926547465600978,
            0.02088450772215971,
            0.020842891856659287,
            0.020801692285524195
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.22364279633509745
            },
            {
                "epoch": 19,
                "error": 0.1930289526807521
            },
            {
                "epoch": 29,
                "error": 0.170804055369338
            },
            {
                "epoch": 39,
                "error": 0.16753276628240288
            },
            {
                "epoch": 49,
                "error": 0.16527991764288177
            },
            {
                "epoch": 59,
                "error": 0.16382426875106915
            },
            {
                "epoch": 69,
                "error": 0.16331460510160803
            },
            {
                "epoch": 79,
                "error": 0.16196632352812032
            },
            {
                "epoch": 89,
                "error": 0.16096944100886026
            },
            {
                "epoch": 99,
                "error": 0.16016187568963583
            },
            {
                "epoch": 109,
                "error": 0.15947882813631895
            },
            {
                "epoch": 119,
                "error": 0.1588862699891852
            },
            {
                "epoch": 129,
                "error": 0.15836319295318477
            },
            {
                "epoch": 139,
                "error": 0.1578953511127436
            },
            {
                "epoch": 149,
                "error": 0.15747251247434635
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_cross_validation_6_error_plot.png",
        "weights_path": "./modelos/60n_threshold_cross_validation_6_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_cross_validation_6_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 65.38461538461539,
            "test_avg_error": 0.37902076007508345,
            "crossvalidation": true,
            "crossvalidation_fold": 7,
            "crossvalidation_size": 10,
            "crossvalidation_group": "60n_threshold_cross_validation"
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_cross_validation_7",
        "timestamp": 1714265510.359444,
        "epoch_errors": [
            0.9823005920491445,
            0.8235614953113848,
            0.533628650186591,
            0.3728682410944602,
            0.2809879944412062,
            0.21197703891585934,
            0.16979577605868532,
            0.13994264415975607,
            0.12417515965456495,
            0.10660555846929337,
            0.09112193834353471,
            0.08426893973689714,
            0.07586838352878608,
            0.0740579264201185,
            0.06790492200121322,
            0.063927516694442,
            0.06331055291580694,
            0.05855108207302822,
            0.0549106537291872,
            0.05467006929567826,
            0.05352215052247488,
            0.05209604353261761,
            0.050535939378744156,
            0.050048136600738945,
            0.0484029274049432,
            0.047747032718792215,
            0.045823003262710105,
            0.04383615459755615,
            0.04300368127392661,
            0.0417812914683358,
            0.041572137218644896,
            0.0404408910353564,
            0.040234917265449706,
            0.03929339499762034,
            0.03852661917079691,
            0.039004991721036476,
            0.0379049633667353,
            0.03659798350373398,
            0.036664718834107025,
            0.03606539373130661,
            0.036220464483962315,
            0.036015603270971655,
            0.035881277138978526,
            0.03555020749468511,
            0.03482342645964142,
            0.03419295397631621,
            0.03442344685918596,
            0.033523659749605424,
            0.03393295356011564,
            0.03332411615247469,
            0.031960001169975355,
            0.0313985624245497,
            0.03075946858423705,
            0.0303523103958133,
            0.030091738102224524,
            0.029938155456063785,
            0.029957473516097784,
            0.030078406492144043,
            0.029610230782218448,
            0.029082166419757888,
            0.028650097550398445,
            0.02832661290916338,
            0.02805744444532715,
            0.02781887883964204,
            0.02760082624093074,
            0.027397993812166645,
            0.027207210086877195,
            0.027026390000117587,
            0.026854066530172322,
            0.026689153220311932,
            0.026530812884747876,
            0.026378379871819093,
            0.0262313114027138,
            0.02608915567667254,
            0.025951530144695714,
            0.025818106219399728,
            0.025688598210366908,
            0.025562755122595506,
            0.025440354448879876,
            0.025321197384531008,
            0.0252051050783541,
            0.02509191565284641,
            0.024981481804979385,
            0.024873668851783614,
            0.024768353121328954,
            0.024665420615208673,
            0.024564765886836527,
            0.024466291093056397,
            0.024369905186250207,
            0.024275523221345005,
            0.02418306575754701,
            0.02409245833876727,
            0.024003631039880412,
            0.02391651806842547,
            0.02383105741328931,
            0.023747190533435995,
            0.023664862080960122,
            0.023584019653709473,
            0.023504613573508963,
            0.023426596686650203,
            0.023349924183832086,
            0.023274553437162913,
            0.02320044385218628,
            0.02312755673318577,
            0.023055855160267803,
            0.022985303876924056,
            0.022915869186949576,
            0.022847518859738382,
            0.02278022204309808,
            0.02271394918283619,
            0.022648671948457672,
            0.022584363164390785,
            0.022520996746227488,
            0.022458547641520374,
            0.022396991774729914,
            0.02233630599595891,
            0.022276468033149564,
            0.022217456447452606,
            0.022159250591505617,
            0.022101830570387445,
            0.02204517720503336,
            0.02198927199792097,
            0.021934097100851955,
            0.02187963528467091,
            0.021825869910778697,
            0.021772784904308735,
            0.02172036472884669,
            0.02166859436258477,
            0.021617459275810328,
            0.021566945409637432,
            0.021517039155897276,
            0.021467727338109928,
            0.021418997193467116,
            0.02137083635575889,
            0.021323232839185646,
            0.0212761750229984,
            0.02122965163691584,
            0.02118365174727051,
            0.021138164743840237,
            0.02109318032732258,
            0.021048688497415216,
            0.02100467954146614,
            0.02096114402366077,
            0.0209180727747154,
            0.020875456882047994,
            0.0208332876804001,
            0.020791556742884035,
            0.020750255872432916,
            0.02070937709363114,
            0.020668912644905328
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.18858404098549383
            },
            {
                "epoch": 19,
                "error": 0.1555476351218155
            },
            {
                "epoch": 29,
                "error": 0.13461051439219024
            },
            {
                "epoch": 39,
                "error": 0.12949710676570933
            },
            {
                "epoch": 49,
                "error": 0.1226747768752898
            },
            {
                "epoch": 59,
                "error": 0.1194884679831408
            },
            {
                "epoch": 69,
                "error": 0.1176279514604151
            },
            {
                "epoch": 79,
                "error": 0.11614889450997934
            },
            {
                "epoch": 89,
                "error": 0.11485960919005532
            },
            {
                "epoch": 99,
                "error": 0.11374080889595257
            },
            {
                "epoch": 109,
                "error": 0.11276179297818056
            },
            {
                "epoch": 119,
                "error": 0.11189577930451958
            },
            {
                "epoch": 129,
                "error": 0.11112175131416335
            },
            {
                "epoch": 139,
                "error": 0.11042352577044423
            },
            {
                "epoch": 149,
                "error": 0.10978858789966117
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_cross_validation_7_error_plot.png",
        "weights_path": "./modelos/60n_threshold_cross_validation_7_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_cross_validation_7_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 68.46153846153847,
            "test_avg_error": 0.3664827521424869,
            "crossvalidation": true,
            "crossvalidation_fold": 8,
            "crossvalidation_size": 10,
            "crossvalidation_group": "60n_threshold_cross_validation"
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_cross_validation_8",
        "timestamp": 1714265905.421515,
        "epoch_errors": [
            0.981407133244014,
            0.8152649433096038,
            0.5211565481248717,
            0.3588681899358073,
            0.27306629119867853,
            0.20452947675568087,
            0.1716828908756378,
            0.1423735820717206,
            0.11732286743928866,
            0.10153818035725605,
            0.09597192153248321,
            0.08461992856479006,
            0.07767553016242719,
            0.07131408717296006,
            0.06758716025444823,
            0.06117286208261899,
            0.05759092457346679,
            0.05676180931121544,
            0.05556492267287956,
            0.05231378266603987,
            0.050631966513686684,
            0.04875072250722938,
            0.04776175692396492,
            0.046114130837239475,
            0.044908025562123303,
            0.043769601987548534,
            0.042448191695641534,
            0.041708401246336776,
            0.04091916843860626,
            0.04043577488586739,
            0.03978512856516149,
            0.03909434262419328,
            0.0387246642609058,
            0.03822251811091061,
            0.03754867298409115,
            0.03710381165293665,
            0.036432559146871414,
            0.0358954299803289,
            0.035465798931905504,
            0.0350827702942911,
            0.034730678768388826,
            0.03440361014491134,
            0.03409893621774255,
            0.0338162238293493,
            0.03355770815989402,
            0.03333085959067911,
            0.03315689157774885,
            0.03309955667258716,
            0.033321884191526506,
            0.03362642921884336,
            0.033181727904545905,
            0.03266680192392387,
            0.03219145318060607,
            0.0317791054412896,
            0.03141619820239759,
            0.03107792443051262,
            0.03076063673944754,
            0.030469212191396682,
            0.030204949401555072,
            0.029964021142113054,
            0.029741424073708854,
            0.029533291003570463,
            0.029336951558501988,
            0.029150527480526933,
            0.028972642186566713,
            0.028802248419827023,
            0.02863852460745645,
            0.02848080978241436,
            0.028328560929180183,
            0.028181323968021383,
            0.028038713390567533,
            0.027900397586568947,
            0.02776608803183438,
            0.027635531165175517,
            0.02750850218040007,
            0.027384800208897123,
            0.027264244529397418,
            0.027146671548141058,
            0.02703193236489592,
            0.026919890790133356,
            0.026810421713688946,
            0.02670340975021685,
            0.026598748104814246,
            0.02649633761542531,
            0.026396085938439416,
            0.026297906851244536,
            0.02620171965105009,
            0.02610744863354247,
            0.026015022638199322,
            0.025924374649635366,
            0.025835441446335823,
            0.0257481632897085,
            0.02566248364762695,
            0.02557834894763975,
            0.02549570835582126,
            0.025414513577890787,
            0.02533471867975891,
            0.025256279925092925,
            0.025179155627852407,
            0.025103306018043812,
            0.025028693119188785,
            0.024955280636209,
            0.024883033852603903,
            0.02481191953594333,
            0.024741905850824742,
            0.024672962278546852,
            0.024605059542844747,
            0.02453816954110884,
            0.024472265280575823,
            0.02440732081903958,
            0.02434331120967822,
            0.024280212449638475,
            0.02421800143205648,
            0.024156655901226166,
            0.02409615441065826,
            0.024036476283795107,
            0.023977601577174122,
            0.0239195110458461,
            0.02386218611088053,
            0.023805608828798477,
            0.023749761862792523,
            0.023694628455604303,
            0.023640192403941326,
            0.02358643803432475,
            0.02353335018027044,
            0.02348091416071148,
            0.02342911575957981,
            0.02337794120646994,
            0.023327377158315003,
            0.02327741068200945,
            0.023228029237918942,
            0.023179220664221963,
            0.02313097316203223,
            0.023083275281253122,
            0.02303611590712215,
            0.022989484247403248,
            0.022943369820188825,
            0.022897762442276672,
            0.02285265221808953,
            0.02280802952910501,
            0.022763885023768773,
            0.02272020960786337,
            0.02267699443530879,
            0.022634230899369754,
            0.02259191062424983,
            0.022550025457050635,
            0.022508567460077337,
            0.022467528903472794,
            0.022426902258162636,
            0.022386680189096866
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.2196729599343659
            },
            {
                "epoch": 19,
                "error": 0.19053437474617313
            },
            {
                "epoch": 29,
                "error": 0.18107967002344996
            },
            {
                "epoch": 39,
                "error": 0.17639669714540254
            },
            {
                "epoch": 49,
                "error": 0.1725174884727258
            },
            {
                "epoch": 59,
                "error": 0.1721460775000427
            },
            {
                "epoch": 69,
                "error": 0.17035134848434566
            },
            {
                "epoch": 79,
                "error": 0.1689840760304659
            },
            {
                "epoch": 89,
                "error": 0.16786101482451873
            },
            {
                "epoch": 99,
                "error": 0.1669043090029204
            },
            {
                "epoch": 109,
                "error": 0.16607056370407972
            },
            {
                "epoch": 119,
                "error": 0.16533197608275996
            },
            {
                "epoch": 129,
                "error": 0.1646693619434196
            },
            {
                "epoch": 139,
                "error": 0.16406883987552193
            },
            {
                "epoch": 149,
                "error": 0.16352001929304177
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_cross_validation_8_error_plot.png",
        "weights_path": "./modelos/60n_threshold_cross_validation_8_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_cross_validation_8_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 70.0,
            "test_avg_error": 0.3353543570622494,
            "crossvalidation": true,
            "crossvalidation_fold": 9,
            "crossvalidation_size": 10,
            "crossvalidation_group": "60n_threshold_cross_validation"
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_cross_validation_9",
        "timestamp": 1714266299.331456,
        "epoch_errors": [
            0.9813098416066265,
            0.8291226856934654,
            0.51800828892276,
            0.35319556023370663,
            0.25845103835180866,
            0.19888302119903584,
            0.1597516838720038,
            0.13323041167058847,
            0.11687919461118318,
            0.09949906681316459,
            0.0886806946191733,
            0.07828061600670959,
            0.07006456185614318,
            0.06492576428666257,
            0.0631427767985915,
            0.05979823672719124,
            0.05752649976785142,
            0.055806749433823626,
            0.05396760988193139,
            0.05188867631227038,
            0.051221846199244324,
            0.04924218614626912,
            0.0480172329703871,
            0.04715384055428941,
            0.04590423479513074,
            0.0443260635680012,
            0.0441643816216311,
            0.043138195255354186,
            0.042906784911384756,
            0.04196345899705691,
            0.0417109837993691,
            0.04112606183025095,
            0.03944683774499982,
            0.038430856864986276,
            0.03843642080890175,
            0.03706685817498779,
            0.03805789303925156,
            0.03628993144952942,
            0.036193910805389154,
            0.0356418786102586,
            0.03519524952844935,
            0.034721690335913075,
            0.03434837597006175,
            0.03401921460651016,
            0.033727467590420744,
            0.03349485628160903,
            0.03335960525583243,
            0.03324759391760755,
            0.03298135381315868,
            0.03266005716169368,
            0.032325886340161744,
            0.031980585775629525,
            0.03163028526443595,
            0.03127643648114247,
            0.03092531431415078,
            0.030586234717948264,
            0.030260316495970087,
            0.029940398260003064,
            0.02962535901256073,
            0.029328492650181094,
            0.029065584952552907,
            0.028833742930134514,
            0.028623139638705435,
            0.02842841303941601,
            0.028247426319286808,
            0.028079970859515177,
            0.02792809536693878,
            0.02779842383360767,
            0.027710107317990132,
            0.02772075600985757,
            0.027941620380927443,
            0.027987074377801655,
            0.02737472016412162,
            0.026998787501422435,
            0.026727232862687217,
            0.02649619910421827,
            0.026290383059537445,
            0.026102838741413097,
            0.0259293840725978,
            0.025767213034330962,
            0.025614334608210203,
            0.025469282567139234,
            0.0253309458378627,
            0.025198462285094283,
            0.025071149131996866,
            0.024948455830996592,
            0.02482993127705605,
            0.024715200481321257,
            0.024603947649266253,
            0.024495903691061773,
            0.024390836858633982,
            0.024288545626341456,
            0.024188853206551623,
            0.02409160327338366,
            0.02399665659086667,
            0.02390388832627456,
            0.023813185888352285,
            0.023724447171849544,
            0.023637579119650632,
            0.023552496535445163,
            0.023469121095758327,
            0.02338738052191374,
            0.023307207881295405,
            0.023228540993908038,
            0.023151321925288855,
            0.023075496550701204,
            0.023001014178537966,
            0.02292782722320578,
            0.022855890919589866,
            0.02278516307265533,
            0.022715603836889992,
            0.02264717552121941,
            0.022579842415765317,
            0.02251357063742186,
            0.02244832799171267,
            0.022384083848791186,
            0.022320809031777227,
            0.022258475715893983,
            0.022197057337094272,
            0.022136528509054013,
            0.022076864947568445,
            0.022018043401517137,
            0.021960041589676887,
            0.02190283814275643,
            0.021846412550104694,
            0.021790745110616617,
            0.021735816887415643,
            0.021681609665944214,
            0.021628105915137565,
            0.021575288751390916,
            0.02152314190506668,
            0.021471649689311752,
            0.021420796970985027,
            0.021370569143510983,
            0.0213209521014999,
            0.02127193221698641,
            0.021223496317156875,
            0.021175631663447502,
            0.02112832593190443,
            0.021081567194711753,
            0.021035343902798136,
            0.020989644869441923,
            0.020944459254804426,
            0.020899776551322642,
            0.020855586569903252,
            0.020811879426861073,
            0.02076864553155213,
            0.020725875574655373,
            0.020683560517059444,
            0.020641691579315422
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.2357309419816202
            },
            {
                "epoch": 19,
                "error": 0.22122601883850385
            },
            {
                "epoch": 29,
                "error": 0.21198171675295377
            },
            {
                "epoch": 39,
                "error": 0.2066612366507215
            },
            {
                "epoch": 49,
                "error": 0.2000348455942945
            },
            {
                "epoch": 59,
                "error": 0.19995320421238666
            },
            {
                "epoch": 69,
                "error": 0.20158939778142473
            },
            {
                "epoch": 79,
                "error": 0.20186234690894114
            },
            {
                "epoch": 89,
                "error": 0.20086126429347342
            },
            {
                "epoch": 99,
                "error": 0.20009469605018743
            },
            {
                "epoch": 109,
                "error": 0.1994678791331201
            },
            {
                "epoch": 119,
                "error": 0.19893325037878062
            },
            {
                "epoch": 129,
                "error": 0.1984649729265463
            },
            {
                "epoch": 139,
                "error": 0.19804738839941083
            },
            {
                "epoch": 149,
                "error": 0.1976701372096428
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_cross_validation_9_error_plot.png",
        "weights_path": "./modelos/60n_threshold_cross_validation_9_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_cross_validation_9_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 68.46153846153847,
            "test_avg_error": 0.39118235545263197,
            "crossvalidation": true,
            "crossvalidation_fold": 10,
            "crossvalidation_size": 10,
            "crossvalidation_group": "60n_threshold_cross_validation"
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "10n_max",
        "timestamp": 1714266423.393354,
        "epoch_errors": [
            0.9892447069198141,
            0.98330551969848,
            0.9823325913800383,
            0.9719143464840173,
            0.9094973730209186,
            0.8284645340328187,
            0.7513035707205266,
            0.692627696584451,
            0.6395743298765891,
            0.5812007774793461,
            0.5361068336338338,
            0.49726852392267595,
            0.45216131207231824,
            0.42898684327286196,
            0.4010263642215923,
            0.3916888328396791,
            0.36355530547829334,
            0.33818329896678184,
            0.31287396295023284,
            0.2993422798577612,
            0.2681043776884769,
            0.269296110034755,
            0.2564018572386472,
            0.2409400533127426,
            0.22151106287471226,
            0.21337012980111655,
            0.20591552942523056,
            0.20225507228573228,
            0.19708833777811577,
            0.1973720956281924,
            0.19137942598697782,
            0.1911886770634621,
            0.1867291943278824,
            0.18597943188158003,
            0.1795657224211234,
            0.17802891234063578,
            0.1767306586473716,
            0.17948593612116112,
            0.171860986070949,
            0.16629165331785245,
            0.16598544971432214,
            0.16595060350580737,
            0.15625165074689032,
            0.1559440541974279,
            0.15825819960698906,
            0.14998194522558936,
            0.14904315802614365,
            0.14589428370221788,
            0.14362388040542728,
            0.14205455209415999,
            0.14084914712270546,
            0.1396600476139679,
            0.13693111228840152,
            0.13602696542603393,
            0.13440767001152204,
            0.1348401365614083,
            0.1337885234855741,
            0.1313868459516483,
            0.13060470437819977,
            0.12983142563490488,
            0.12868499365408803,
            0.1277435403642195,
            0.12664437664431205,
            0.12556042682487284,
            0.12462576186957482,
            0.12380604364248249,
            0.12296622587776433,
            0.12216967584453277,
            0.12137969194779596,
            0.12060534395768228,
            0.11991063757139528,
            0.11920045664461777,
            0.11856507994112998,
            0.11794423101993905,
            0.11741351651280153,
            0.11698271842189832,
            0.11648282990268215,
            0.11518617813529507,
            0.11444595379687013,
            0.1138572274041736,
            0.11329985345697526,
            0.1127963821298993,
            0.11231174898964116,
            0.11186017862036152,
            0.11142131696276072,
            0.11099914518301479,
            0.11058664375110397,
            0.11018538792285074,
            0.10979561908242677,
            0.1094181534423352,
            0.10905217448464559,
            0.10869370145454818,
            0.10833876721424718,
            0.10798403243772016,
            0.10762828424088935,
            0.10727106078758858,
            0.10691246066142086,
            0.10655263399348947,
            0.10619197800275819,
            0.10583109981485864,
            0.10547090062342196,
            0.10511250237024432,
            0.1047571825974734,
            0.10440625676745,
            0.10406098542650133,
            0.10372250220920834,
            0.10339178979477634,
            0.10306969645270088,
            0.10275698576816096,
            0.10245439878356877,
            0.10216271059340704,
            0.10188276968082328,
            0.10161551883675468,
            0.10136199895095471,
            0.10112332122483672,
            0.10090054163765935,
            0.10069425845497687,
            0.10050361781526959,
            0.10032467756151474,
            0.1001494313700583,
            0.0999664818062734,
            0.09976025185419891,
            0.0995142003168185,
            0.09922293738241869,
            0.09889718574918938,
            0.09855409584981413,
            0.0982084115310078,
            0.0978679028913556,
            0.09753444738180453,
            0.09720761448544499,
            0.09688656264674692,
            0.09657055112342786,
            0.09625897357666181,
            0.09595129234257561,
            0.0956469618875314,
            0.09534534618569122,
            0.09504561833518825,
            0.09474662841493657,
            0.09444673540016017,
            0.09414364972657585,
            0.093834483008681,
            0.09351645859618449,
            0.09318871741484235,
            0.09285439663033972,
            0.09252028769820649,
            0.09219334193944759,
            0.09187786474628136,
            0.09157549477302052,
            0.09128624058053512,
            0.09100931976122495
        ],
        "validation_errors": [
            {
                "epoch": 0,
                "error": 0.9838524896123286
            },
            {
                "epoch": 1,
                "error": 0.9837154209049181
            },
            {
                "epoch": 2,
                "error": 0.9821567993068331
            },
            {
                "epoch": 3,
                "error": 0.9620922356944984
            },
            {
                "epoch": 4,
                "error": 0.9032807523582432
            },
            {
                "epoch": 5,
                "error": 0.8409347444842724
            },
            {
                "epoch": 6,
                "error": 0.7933623960983607
            },
            {
                "epoch": 7,
                "error": 0.7329142010679038
            },
            {
                "epoch": 8,
                "error": 0.702169471994709
            },
            {
                "epoch": 9,
                "error": 0.6637532358224183
            },
            {
                "epoch": 10,
                "error": 0.6525499301274437
            },
            {
                "epoch": 11,
                "error": 0.5735075233638511
            },
            {
                "epoch": 12,
                "error": 0.5563708349679859
            },
            {
                "epoch": 13,
                "error": 0.5695805827214852
            },
            {
                "epoch": 14,
                "error": 0.5398541698193227
            },
            {
                "epoch": 15,
                "error": 0.5827706224817563
            },
            {
                "epoch": 16,
                "error": 0.4946341149992287
            },
            {
                "epoch": 17,
                "error": 0.4853586663225511
            },
            {
                "epoch": 18,
                "error": 0.4973056664388919
            },
            {
                "epoch": 19,
                "error": 0.4758254043305466
            },
            {
                "epoch": 20,
                "error": 0.5253834069792099
            },
            {
                "epoch": 21,
                "error": 0.4878434334872366
            },
            {
                "epoch": 22,
                "error": 0.45654526097526726
            },
            {
                "epoch": 23,
                "error": 0.44771445706694374
            },
            {
                "epoch": 24,
                "error": 0.4430035912977744
            },
            {
                "epoch": 25,
                "error": 0.43963995606353895
            },
            {
                "epoch": 26,
                "error": 0.4352864317595204
            },
            {
                "epoch": 27,
                "error": 0.4312495440824941
            },
            {
                "epoch": 28,
                "error": 0.4312982139218
            },
            {
                "epoch": 29,
                "error": 0.4313727248133223
            },
            {
                "epoch": 30,
                "error": 0.4257228709353012
            },
            {
                "epoch": 31,
                "error": 0.43128639080698533
            },
            {
                "epoch": 32,
                "error": 0.43019624386082983
            },
            {
                "epoch": 33,
                "error": 0.42384087771581286
            },
            {
                "epoch": 34,
                "error": 0.42523991962786784
            },
            {
                "epoch": 35,
                "error": 0.44613177594328457
            },
            {
                "epoch": 36,
                "error": 0.44238939805799044
            },
            {
                "epoch": 37,
                "error": 0.41960882369503416
            },
            {
                "epoch": 38,
                "error": 0.41408970301946607
            },
            {
                "epoch": 39,
                "error": 0.4148759073673845
            },
            {
                "epoch": 40,
                "error": 0.4252768213516252
            },
            {
                "epoch": 41,
                "error": 0.4122912412828025
            },
            {
                "epoch": 42,
                "error": 0.4101621489865334
            },
            {
                "epoch": 43,
                "error": 0.4067718972755648
            },
            {
                "epoch": 44,
                "error": 0.4103861003880751
            },
            {
                "epoch": 45,
                "error": 0.41054707632759513
            },
            {
                "epoch": 46,
                "error": 0.40865245849592907
            },
            {
                "epoch": 47,
                "error": 0.4072188708996319
            },
            {
                "epoch": 48,
                "error": 0.40564516632140907
            },
            {
                "epoch": 49,
                "error": 0.4071375122612625
            },
            {
                "epoch": 50,
                "error": 0.40481608919710665
            },
            {
                "epoch": 51,
                "error": 0.40450152025086483
            },
            {
                "epoch": 52,
                "error": 0.40158209071088424
            },
            {
                "epoch": 53,
                "error": 0.40306774163312986
            },
            {
                "epoch": 54,
                "error": 0.40148119383432823
            },
            {
                "epoch": 55,
                "error": 0.39994448262766963
            },
            {
                "epoch": 56,
                "error": 0.40350325131716724
            },
            {
                "epoch": 57,
                "error": 0.3996078145697397
            },
            {
                "epoch": 58,
                "error": 0.4013313555709186
            },
            {
                "epoch": 59,
                "error": 0.3997291539853819
            },
            {
                "epoch": 60,
                "error": 0.3983396404138312
            },
            {
                "epoch": 61,
                "error": 0.3988555517566574
            },
            {
                "epoch": 62,
                "error": 0.39807961137757186
            },
            {
                "epoch": 63,
                "error": 0.39807841786205606
            },
            {
                "epoch": 64,
                "error": 0.39771470995213637
            },
            {
                "epoch": 65,
                "error": 0.39724109742349595
            },
            {
                "epoch": 66,
                "error": 0.3969536416482426
            },
            {
                "epoch": 67,
                "error": 0.3963261216798472
            },
            {
                "epoch": 68,
                "error": 0.39595927170598105
            },
            {
                "epoch": 69,
                "error": 0.39545771362684823
            },
            {
                "epoch": 70,
                "error": 0.39517019490575556
            },
            {
                "epoch": 71,
                "error": 0.3945879648880129
            },
            {
                "epoch": 72,
                "error": 0.39418790888823696
            },
            {
                "epoch": 73,
                "error": 0.3936993236858765
            },
            {
                "epoch": 74,
                "error": 0.3932123070255379
            },
            {
                "epoch": 75,
                "error": 0.3928685097598166
            },
            {
                "epoch": 76,
                "error": 0.3924805109334605
            },
            {
                "epoch": 77,
                "error": 0.39198604351309635
            },
            {
                "epoch": 78,
                "error": 0.3913566832140701
            },
            {
                "epoch": 79,
                "error": 0.39099185435941103
            },
            {
                "epoch": 80,
                "error": 0.3905649804154309
            },
            {
                "epoch": 81,
                "error": 0.390265153148494
            },
            {
                "epoch": 82,
                "error": 0.38994118515046333
            },
            {
                "epoch": 83,
                "error": 0.3896675693433431
            },
            {
                "epoch": 84,
                "error": 0.38938476634269803
            },
            {
                "epoch": 85,
                "error": 0.3891017437985229
            },
            {
                "epoch": 86,
                "error": 0.3887991777282547
            },
            {
                "epoch": 87,
                "error": 0.3884658409890717
            },
            {
                "epoch": 88,
                "error": 0.3881073967474243
            },
            {
                "epoch": 89,
                "error": 0.3877347825566752
            },
            {
                "epoch": 90,
                "error": 0.38736850676821305
            },
            {
                "epoch": 91,
                "error": 0.38701519390997835
            },
            {
                "epoch": 92,
                "error": 0.386680403224039
            },
            {
                "epoch": 93,
                "error": 0.38636466370968653
            },
            {
                "epoch": 94,
                "error": 0.3860696088618264
            },
            {
                "epoch": 95,
                "error": 0.385794596228065
            },
            {
                "epoch": 96,
                "error": 0.38553917869168813
            },
            {
                "epoch": 97,
                "error": 0.385302085935076
            },
            {
                "epoch": 98,
                "error": 0.3850822359430114
            },
            {
                "epoch": 99,
                "error": 0.38487827617316633
            },
            {
                "epoch": 100,
                "error": 0.3846888960526141
            },
            {
                "epoch": 101,
                "error": 0.384512652907505
            },
            {
                "epoch": 102,
                "error": 0.38434810351304766
            },
            {
                "epoch": 103,
                "error": 0.38419380322399693
            },
            {
                "epoch": 104,
                "error": 0.3840484334763716
            },
            {
                "epoch": 105,
                "error": 0.38391091917911585
            },
            {
                "epoch": 106,
                "error": 0.3837806071152588
            },
            {
                "epoch": 107,
                "error": 0.3836574511286475
            },
            {
                "epoch": 108,
                "error": 0.3835422036517514
            },
            {
                "epoch": 109,
                "error": 0.3834365898297879
            },
            {
                "epoch": 110,
                "error": 0.3833434800224551
            },
            {
                "epoch": 111,
                "error": 0.38326710725782587
            },
            {
                "epoch": 112,
                "error": 0.38321341335687437
            },
            {
                "epoch": 113,
                "error": 0.3831906142299317
            },
            {
                "epoch": 114,
                "error": 0.38321001370404356
            },
            {
                "epoch": 115,
                "error": 0.38328682557211985
            },
            {
                "epoch": 116,
                "error": 0.3834398828220849
            },
            {
                "epoch": 117,
                "error": 0.38368687730613343
            },
            {
                "epoch": 118,
                "error": 0.384029368466642
            },
            {
                "epoch": 119,
                "error": 0.38443198715965465
            },
            {
                "epoch": 120,
                "error": 0.38483254807126466
            },
            {
                "epoch": 121,
                "error": 0.3851896734189154
            },
            {
                "epoch": 122,
                "error": 0.38547933887802743
            },
            {
                "epoch": 123,
                "error": 0.38566340444818364
            },
            {
                "epoch": 124,
                "error": 0.3857380680982551
            },
            {
                "epoch": 125,
                "error": 0.38575764512959954
            },
            {
                "epoch": 126,
                "error": 0.3857735588878934
            },
            {
                "epoch": 127,
                "error": 0.38580746698807156
            },
            {
                "epoch": 128,
                "error": 0.3858635053026951
            },
            {
                "epoch": 129,
                "error": 0.38594034696562063
            },
            {
                "epoch": 130,
                "error": 0.38603604986188
            },
            {
                "epoch": 131,
                "error": 0.3861493448999558
            },
            {
                "epoch": 132,
                "error": 0.3862798382201788
            },
            {
                "epoch": 133,
                "error": 0.3864279518415309
            },
            {
                "epoch": 134,
                "error": 0.38659478021783145
            },
            {
                "epoch": 135,
                "error": 0.38678185322604774
            },
            {
                "epoch": 136,
                "error": 0.38699071619611886
            },
            {
                "epoch": 137,
                "error": 0.38722216537733195
            },
            {
                "epoch": 138,
                "error": 0.38747494412243866
            },
            {
                "epoch": 139,
                "error": 0.38774387870083443
            },
            {
                "epoch": 140,
                "error": 0.3880181006201606
            },
            {
                "epoch": 141,
                "error": 0.3882810784328223
            },
            {
                "epoch": 142,
                "error": 0.38851427083348666
            },
            {
                "epoch": 143,
                "error": 0.38870376560874553
            },
            {
                "epoch": 144,
                "error": 0.38884595019571055
            },
            {
                "epoch": 145,
                "error": 0.3889475636965223
            },
            {
                "epoch": 146,
                "error": 0.3890200325000034
            },
            {
                "epoch": 147,
                "error": 0.38907372447720934
            },
            {
                "epoch": 148,
                "error": 0.3891157970325754
            },
            {
                "epoch": 149,
                "error": 0.3891505196251048
            }
        ],
        "error_plot_path": "./modelos/10n_max_error_plot.png",
        "weights_path": "./modelos/10n_max_weights.npy",
        "confusion_matrix_path": "./modelos/10n_max_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 62.30769230769231,
            "test_avg_error": 0.6450519603187083,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 10,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "max_value",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 1,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "26n_threshold",
        "timestamp": 1714266618.674188,
        "epoch_errors": [
            0.9879812394749088,
            0.936026617144437,
            0.7781877431814087,
            0.578609243291969,
            0.43948182195754815,
            0.35444972907757727,
            0.289558485333037,
            0.2415919918891551,
            0.20899444716549273,
            0.17227302809329215,
            0.14863669645858563,
            0.13596721368337666,
            0.1257649967465271,
            0.11871724994981504,
            0.11299341464473682,
            0.10852603206234569,
            0.10432462625970369,
            0.0992097492133544,
            0.09811547795017657,
            0.09452346146386646,
            0.0903760371687418,
            0.08840741072605487,
            0.0860628592353567,
            0.08154446856083764,
            0.07793174490006076,
            0.07550558759036112,
            0.07360827173760716,
            0.07202998653920613,
            0.07048931199852565,
            0.06888715070092626,
            0.06740519367300243,
            0.06608992850370908,
            0.06490804303464313,
            0.06383007680878398,
            0.06283662899308853,
            0.061914452877441246,
            0.06105392810922637,
            0.06024773289359975,
            0.05949013853447459,
            0.05877663167089709,
            0.05810373777096756,
            0.05746901018685592,
            0.0568712185605634,
            0.056310867041832594,
            0.05579137850514488,
            0.055321802158528666,
            0.05492317494351877,
            0.054641568483850364,
            0.05454446540126282,
            0.05452019517409771,
            0.05408905551127681,
            0.05331884904113817,
            0.05256547154958362,
            0.05192503507877352,
            0.051373577964149035,
            0.05088079329489627,
            0.05042935705632738,
            0.05000915450764824,
            0.049613872933020275,
            0.04923930806997977,
            0.04888249282418295,
            0.04854122823265457,
            0.04821381810607644,
            0.04789891115393265,
            0.04759540242298713,
            0.04730236899696865,
            0.047019026385462584,
            0.04674469793468261,
            0.04647879274621437,
            0.04622078934041014,
            0.04597022331099203,
            0.045726677821905024,
            0.045489776171906394,
            0.04525917589172619,
            0.045034563995948906,
            0.04481565311775768,
            0.044602178327672,
            0.044393894488640506,
            0.04419057403641269,
            0.043992005100624475,
            0.04379798990148663,
            0.043608343371437555,
            0.04342289196199913,
            0.04324147260432812,
            0.043063931798291925,
            0.04289012480978996,
            0.04271991495986301,
            0.042553172992129885,
            0.04238977650747275,
            0.04222960945678413,
            0.042072561684114926,
            0.04191852851378887,
            0.04176741037605716,
            0.0416191124666817,
            0.04147354443651346,
            0.04133062010769126,
            0.04119025721355277,
            0.041052377159739376,
            0.040916904804303635,
            0.040783768254909016,
            0.040652898681444206,
            0.040524230142577125,
            0.04039769942494756,
            0.040273245893843464,
            0.0401508113543374,
            0.04003033992196819,
            0.03991177790215287,
            0.039795073677596306,
            0.03968017760304171,
            0.03956704190677017,
            0.039455620598315075,
            0.039345869381908614,
            0.03923774557522279,
            0.0391312080330064,
            0.03902621707525738,
            0.038922734419600695,
            0.03882072311757057,
            0.03872014749452272,
            0.03862097309292392,
            0.03852316661878833,
            0.03842669589104865,
            0.03833152979366639,
            0.03823763823030258,
            0.03814499208138234,
            0.03805356316340129,
            0.03796332419033186,
            0.037874248736999086,
            0.037786311204305784,
            0.037699486786192324,
            0.03761375143823041,
            0.03752908184775119,
            0.037445455405418715,
            0.037362850178166006,
            0.03728124488341412,
            0.03720061886450252,
            0.0371209520672628,
            0.03704222501767194,
            0.036964418800526554,
            0.03688751503908212,
            0.03681149587560593,
            0.03673634395279456,
            0.03666204239601116,
            0.03658857479629896,
            0.036515925194131826,
            0.036444078063863704,
            0.036373018298841674,
            0.03630273119714946,
            0.03623320244795015,
            0.036164418118398926,
            0.03609636464109703
        ],
        "validation_errors": [
            {
                "epoch": 0,
                "error": 0.9820581458946804
            },
            {
                "epoch": 1,
                "error": 0.9027959152539822
            },
            {
                "epoch": 2,
                "error": 0.7134113427849016
            },
            {
                "epoch": 3,
                "error": 0.562396767337586
            },
            {
                "epoch": 4,
                "error": 0.474298698311351
            },
            {
                "epoch": 5,
                "error": 0.43646774148435113
            },
            {
                "epoch": 6,
                "error": 0.4050856293619962
            },
            {
                "epoch": 7,
                "error": 0.3674939148407601
            },
            {
                "epoch": 8,
                "error": 0.3541804431552258
            },
            {
                "epoch": 9,
                "error": 0.34089684325962855
            },
            {
                "epoch": 10,
                "error": 0.3373163516040504
            },
            {
                "epoch": 11,
                "error": 0.3242753356917953
            },
            {
                "epoch": 12,
                "error": 0.328273708079222
            },
            {
                "epoch": 13,
                "error": 0.31374813868537393
            },
            {
                "epoch": 14,
                "error": 0.31017734654927676
            },
            {
                "epoch": 15,
                "error": 0.30329070623546617
            },
            {
                "epoch": 16,
                "error": 0.3069670097272595
            },
            {
                "epoch": 17,
                "error": 0.3009735560673738
            },
            {
                "epoch": 18,
                "error": 0.3116986805654306
            },
            {
                "epoch": 19,
                "error": 0.2993819321332638
            },
            {
                "epoch": 20,
                "error": 0.29684762940808346
            },
            {
                "epoch": 21,
                "error": 0.30242182956013175
            },
            {
                "epoch": 22,
                "error": 0.29954380242405787
            },
            {
                "epoch": 23,
                "error": 0.2949976323934944
            },
            {
                "epoch": 24,
                "error": 0.2940291666985916
            },
            {
                "epoch": 25,
                "error": 0.29269462375196653
            },
            {
                "epoch": 26,
                "error": 0.2923622710556611
            },
            {
                "epoch": 27,
                "error": 0.29191504416688846
            },
            {
                "epoch": 28,
                "error": 0.29056494855784837
            },
            {
                "epoch": 29,
                "error": 0.2893562459858645
            },
            {
                "epoch": 30,
                "error": 0.2884753885054656
            },
            {
                "epoch": 31,
                "error": 0.287755524115677
            },
            {
                "epoch": 32,
                "error": 0.287111196246797
            },
            {
                "epoch": 33,
                "error": 0.2865119801153962
            },
            {
                "epoch": 34,
                "error": 0.28594660347451223
            },
            {
                "epoch": 35,
                "error": 0.28541011756025797
            },
            {
                "epoch": 36,
                "error": 0.2848998086744169
            },
            {
                "epoch": 37,
                "error": 0.2844138818723614
            },
            {
                "epoch": 38,
                "error": 0.283951043329154
            },
            {
                "epoch": 39,
                "error": 0.2835104063979842
            },
            {
                "epoch": 40,
                "error": 0.28309155766372274
            },
            {
                "epoch": 41,
                "error": 0.2826947744089617
            },
            {
                "epoch": 42,
                "error": 0.28232148714456706
            },
            {
                "epoch": 43,
                "error": 0.2819752344945984
            },
            {
                "epoch": 44,
                "error": 0.2816637320104278
            },
            {
                "epoch": 45,
                "error": 0.2814037862450675
            },
            {
                "epoch": 46,
                "error": 0.28123386927368965
            },
            {
                "epoch": 47,
                "error": 0.2812409074674267
            },
            {
                "epoch": 48,
                "error": 0.2815542673089699
            },
            {
                "epoch": 49,
                "error": 0.28209104155775366
            },
            {
                "epoch": 50,
                "error": 0.2822130676079038
            },
            {
                "epoch": 51,
                "error": 0.2818915529658343
            },
            {
                "epoch": 52,
                "error": 0.2814665133774374
            },
            {
                "epoch": 53,
                "error": 0.2810432365038354
            },
            {
                "epoch": 54,
                "error": 0.28064911235732126
            },
            {
                "epoch": 55,
                "error": 0.28028858256703715
            },
            {
                "epoch": 56,
                "error": 0.27995888704794814
            },
            {
                "epoch": 57,
                "error": 0.2796554191446224
            },
            {
                "epoch": 58,
                "error": 0.27937363182299896
            },
            {
                "epoch": 59,
                "error": 0.2791096388070079
            },
            {
                "epoch": 60,
                "error": 0.27886031030895814
            },
            {
                "epoch": 61,
                "error": 0.2786231908473894
            },
            {
                "epoch": 62,
                "error": 0.27839637219803864
            },
            {
                "epoch": 63,
                "error": 0.2781783715766655
            },
            {
                "epoch": 64,
                "error": 0.27796803038131596
            },
            {
                "epoch": 65,
                "error": 0.2777644351354562
            },
            {
                "epoch": 66,
                "error": 0.2775668576156821
            },
            {
                "epoch": 67,
                "error": 0.27737471015341597
            },
            {
                "epoch": 68,
                "error": 0.277187512438579
            },
            {
                "epoch": 69,
                "error": 0.27700486685825426
            },
            {
                "epoch": 70,
                "error": 0.2768264401069324
            },
            {
                "epoch": 71,
                "error": 0.2766519493912962
            },
            {
                "epoch": 72,
                "error": 0.276481152005091
            },
            {
                "epoch": 73,
                "error": 0.27631383738572973
            },
            {
                "epoch": 74,
                "error": 0.27614982100897284
            },
            {
                "epoch": 75,
                "error": 0.27598893965434673
            },
            {
                "epoch": 76,
                "error": 0.2758310477005909
            },
            {
                "epoch": 77,
                "error": 0.27567601420131504
            },
            {
                "epoch": 78,
                "error": 0.27552372055650104
            },
            {
                "epoch": 79,
                "error": 0.275374058642808
            },
            {
                "epoch": 80,
                "error": 0.2752269293000291
            },
            {
                "epoch": 81,
                "error": 0.27508224109624185
            },
            {
                "epoch": 82,
                "error": 0.27493990931271856
            },
            {
                "epoch": 83,
                "error": 0.2747998551034379
            },
            {
                "epoch": 84,
                "error": 0.27466200479431396
            },
            {
                "epoch": 85,
                "error": 0.2745262892950105
            },
            {
                "epoch": 86,
                "error": 0.2743926436020725
            },
            {
                "epoch": 87,
                "error": 0.27426100637660006
            },
            {
                "epoch": 88,
                "error": 0.2741313195831449
            },
            {
                "epoch": 89,
                "error": 0.2740035281791716
            },
            {
                "epoch": 90,
                "error": 0.273877579846532
            },
            {
                "epoch": 91,
                "error": 0.27375342475801684
            },
            {
                "epoch": 92,
                "error": 0.27363101537335316
            },
            {
                "epoch": 93,
                "error": 0.27351030626004763
            },
            {
                "epoch": 94,
                "error": 0.27339125393528685
            },
            {
                "epoch": 95,
                "error": 0.2732738167257654
            },
            {
                "epoch": 96,
                "error": 0.27315795464285725
            },
            {
                "epoch": 97,
                "error": 0.2730436292709617
            },
            {
                "epoch": 98,
                "error": 0.272930803667222
            },
            {
                "epoch": 99,
                "error": 0.2728194422710922
            },
            {
                "epoch": 100,
                "error": 0.27270951082247186
            },
            {
                "epoch": 101,
                "error": 0.27260097628732577
            },
            {
                "epoch": 102,
                "error": 0.2724938067898581
            },
            {
                "epoch": 103,
                "error": 0.2723879715504641
            },
            {
                "epoch": 104,
                "error": 0.2722834408287743
            },
            {
                "epoch": 105,
                "error": 0.272180185871218
            },
            {
                "epoch": 106,
                "error": 0.27207817886260816
            },
            {
                "epoch": 107,
                "error": 0.2719773928813095
            },
            {
                "epoch": 108,
                "error": 0.2718778018576215
            },
            {
                "epoch": 109,
                "error": 0.2717793805350471
            },
            {
                "epoch": 110,
                "error": 0.2716821044341618
            },
            {
                "epoch": 111,
                "error": 0.271585949818836
            },
            {
                "epoch": 112,
                "error": 0.2714908936645916
            },
            {
                "epoch": 113,
                "error": 0.27139691362889784
            },
            {
                "epoch": 114,
                "error": 0.27130398802323646
            },
            {
                "epoch": 115,
                "error": 0.2712120957867869
            },
            {
                "epoch": 116,
                "error": 0.27112121646159865
            },
            {
                "epoch": 117,
                "error": 0.2710313301691239
            },
            {
                "epoch": 118,
                "error": 0.2709424175880115
            },
            {
                "epoch": 119,
                "error": 0.2708544599330661
            },
            {
                "epoch": 120,
                "error": 0.27076743893527755
            },
            {
                "epoch": 121,
                "error": 0.27068133682285667
            },
            {
                "epoch": 122,
                "error": 0.2705961363031946
            },
            {
                "epoch": 123,
                "error": 0.27051182054569145
            },
            {
                "epoch": 124,
                "error": 0.2704283731653919
            },
            {
                "epoch": 125,
                "error": 0.27034577820737626
            },
            {
                "epoch": 126,
                "error": 0.27026402013186174
            },
            {
                "epoch": 127,
                "error": 0.27018308379996553
            },
            {
                "epoch": 128,
                "error": 0.27010295446009475
            },
            {
                "epoch": 129,
                "error": 0.270023617734923
            },
            {
                "epoch": 130,
                "error": 0.26994505960892157
            },
            {
                "epoch": 131,
                "error": 0.26986726641641134
            },
            {
                "epoch": 132,
                "error": 0.2697902248301111
            },
            {
                "epoch": 133,
                "error": 0.2697139218501531
            },
            {
                "epoch": 134,
                "error": 0.2696383447935353
            },
            {
                "epoch": 135,
                "error": 0.2695634812840026
            },
            {
                "epoch": 136,
                "error": 0.2694893192423167
            },
            {
                "epoch": 137,
                "error": 0.2694158468769081
            },
            {
                "epoch": 138,
                "error": 0.2693430526748878
            },
            {
                "epoch": 139,
                "error": 0.2692709253933974
            },
            {
                "epoch": 140,
                "error": 0.2691994540512873
            },
            {
                "epoch": 141,
                "error": 0.269128627921103
            },
            {
                "epoch": 142,
                "error": 0.26905843652136563
            },
            {
                "epoch": 143,
                "error": 0.2689888696091364
            },
            {
                "epoch": 144,
                "error": 0.26891991717284897
            },
            {
                "epoch": 145,
                "error": 0.2688515694253966
            },
            {
                "epoch": 146,
                "error": 0.2687838167974668
            },
            {
                "epoch": 147,
                "error": 0.2687166499311087
            },
            {
                "epoch": 148,
                "error": 0.2686500596735274
            },
            {
                "epoch": 149,
                "error": 0.26858403707108486
            }
        ],
        "error_plot_path": "./modelos/26n_threshold_error_plot.png",
        "weights_path": "./modelos/26n_threshold_weights.npy",
        "confusion_matrix_path": "./modelos/26n_threshold_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 65.38461538461539,
            "test_avg_error": 0.4456682058242709,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 26,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 1,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "26n_max",
        "timestamp": 1714266812.16313,
        "epoch_errors": [
            0.9878239187753612,
            0.936381304090776,
            0.7961926075071011,
            0.5944622093556329,
            0.444075360800907,
            0.34446060501122316,
            0.274749250094348,
            0.23603286189064426,
            0.20253217762326947,
            0.17489309975872255,
            0.1551155620147793,
            0.14219863146316425,
            0.136465580284908,
            0.12265055651705668,
            0.11438190563847186,
            0.10774199427452068,
            0.10104281208492703,
            0.09547176637551896,
            0.09049008830608919,
            0.08629315927914162,
            0.08318253526137608,
            0.08096357206469175,
            0.08118393863665571,
            0.07619746631692878,
            0.07339018010724016,
            0.07136045845353377,
            0.06994943528286317,
            0.06877930892746173,
            0.06763954828402197,
            0.06617503442150201,
            0.06518157000570811,
            0.06418506265261838,
            0.06330753708275637,
            0.06330717162273648,
            0.06130063190494136,
            0.06126578952949491,
            0.05932033657375827,
            0.06182388626930482,
            0.056966972482940983,
            0.054855761123067365,
            0.053821291251829176,
            0.05296255940543191,
            0.05219490717120236,
            0.05149177082397266,
            0.05083891215584783,
            0.05022759135777595,
            0.049651780765973284,
            0.049107022651073785,
            0.04858985467178126,
            0.04809749204348854,
            0.04762763577131191,
            0.04717834888615821,
            0.04674797221888106,
            0.046335064772509565,
            0.045938360314589914,
            0.04555673515439394,
            0.04518918385933336,
            0.04483480069219794,
            0.044492765196586535,
            0.04416233080044492,
            0.043842815627556646,
            0.04353359494160392,
            0.043234094817805956,
            0.042943786758083864,
            0.04266218304956606,
            0.04238883272332792,
            0.04212331800871475,
            0.04186525120449687,
            0.04161427190573711,
            0.04137004453752519,
            0.041132256155538935,
            0.040900614479939285,
            0.040674846134157686,
            0.04045469506416195,
            0.0402399211170819,
            0.040030298760836955,
            0.03982561592874778,
            0.03962567297511664,
            0.03943028172949915,
            0.03923926463888266,
            0.03905245398829526,
            0.03886969119150238,
            0.03869082614443683,
            0.03851571663487199,
            0.038344227802601785,
            0.038176231645050226,
            0.03801160656380928,
            0.03785023694811183,
            0.03769201279168541,
            0.03753682933982586,
            0.03738458676386942,
            0.037235189860542875,
            0.03708854777393983,
            0.03694457373810108,
            0.03680318483838741,
            0.036664301790016236,
            0.03652784873229439,
            0.03639375303722611,
            0.036261945131302264,
            0.03613235832939059,
            0.03600492867975162,
            0.03587959481929322,
            0.03575629783825946,
            0.03563498115362287,
            0.03551559039051426,
            0.03539807327108306,
            0.035282379510235384,
            0.03516846071774292,
            0.035056270306259976,
            0.034945763404825456,
            0.03483689677746055,
            0.03472962874650556,
            0.0346239191203674,
            0.03451972912537828,
            0.034417021341484985,
            0.034315759641515065,
            0.034215909133783445,
            0.03411743610782012,
            0.034020307983019395,
            0.03392449326002167,
            0.033829961474658256,
            0.033736683154295836,
            0.033644629776434405,
            0.03355377372942013,
            0.0334640882751448,
            0.03337554751361276,
            0.03328812634926536,
            0.03320180045895852,
            0.03311654626149786,
            0.033032340888641674,
            0.032949162157488006,
            0.03286698854416701,
            0.032785799158766504,
            0.032705573721422,
            0.03262629253950615,
            0.03254793648585935,
            0.03247048697800509,
            0.03239392595829533,
            0.03231823587493997,
            0.032243399663870985,
            0.032169400731399504,
            0.032096222937624284,
            0.032023850580552515,
            0.031952268380898735,
            0.03188146146752479,
            0.03181141536349185,
            0.0317421159726917,
            0.03167354956703054,
            0.03160570277413749,
            0.03153856256557225
        ],
        "validation_errors": [
            {
                "epoch": 0,
                "error": 0.9815631565660897
            },
            {
                "epoch": 1,
                "error": 0.9040046779031207
            },
            {
                "epoch": 2,
                "error": 0.7396754160842013
            },
            {
                "epoch": 3,
                "error": 0.5552302775583984
            },
            {
                "epoch": 4,
                "error": 0.4866506179794844
            },
            {
                "epoch": 5,
                "error": 0.4060902048872965
            },
            {
                "epoch": 6,
                "error": 0.3853528210601611
            },
            {
                "epoch": 7,
                "error": 0.3523653399998702
            },
            {
                "epoch": 8,
                "error": 0.3500263773663984
            },
            {
                "epoch": 9,
                "error": 0.3192770732193312
            },
            {
                "epoch": 10,
                "error": 0.3152572501849605
            },
            {
                "epoch": 11,
                "error": 0.30685797154216377
            },
            {
                "epoch": 12,
                "error": 0.3069753353717014
            },
            {
                "epoch": 13,
                "error": 0.3020387595214208
            },
            {
                "epoch": 14,
                "error": 0.2952831234432214
            },
            {
                "epoch": 15,
                "error": 0.29479198927498024
            },
            {
                "epoch": 16,
                "error": 0.2920439476154123
            },
            {
                "epoch": 17,
                "error": 0.2885308320615007
            },
            {
                "epoch": 18,
                "error": 0.2849533092811642
            },
            {
                "epoch": 19,
                "error": 0.2821974065942023
            },
            {
                "epoch": 20,
                "error": 0.2787120780882232
            },
            {
                "epoch": 21,
                "error": 0.27487972117640097
            },
            {
                "epoch": 22,
                "error": 0.27455073461956814
            },
            {
                "epoch": 23,
                "error": 0.27228130835232145
            },
            {
                "epoch": 24,
                "error": 0.2703224957845826
            },
            {
                "epoch": 25,
                "error": 0.26906925345004407
            },
            {
                "epoch": 26,
                "error": 0.2677922624724221
            },
            {
                "epoch": 27,
                "error": 0.26627125340013
            },
            {
                "epoch": 28,
                "error": 0.26647246783879946
            },
            {
                "epoch": 29,
                "error": 0.26519321495477177
            },
            {
                "epoch": 30,
                "error": 0.26452191128597696
            },
            {
                "epoch": 31,
                "error": 0.2650297398816979
            },
            {
                "epoch": 32,
                "error": 0.2706952137352091
            },
            {
                "epoch": 33,
                "error": 0.2644890553130103
            },
            {
                "epoch": 34,
                "error": 0.261804521239071
            },
            {
                "epoch": 35,
                "error": 0.2615801057945169
            },
            {
                "epoch": 36,
                "error": 0.26093603005926697
            },
            {
                "epoch": 37,
                "error": 0.25946065679882147
            },
            {
                "epoch": 38,
                "error": 0.2576560577230551
            },
            {
                "epoch": 39,
                "error": 0.2564886881172314
            },
            {
                "epoch": 40,
                "error": 0.25553242695962425
            },
            {
                "epoch": 41,
                "error": 0.25469484567252104
            },
            {
                "epoch": 42,
                "error": 0.25394159348860423
            },
            {
                "epoch": 43,
                "error": 0.2532529115173995
            },
            {
                "epoch": 44,
                "error": 0.2526177597724944
            },
            {
                "epoch": 45,
                "error": 0.2520279645300512
            },
            {
                "epoch": 46,
                "error": 0.25147712637880687
            },
            {
                "epoch": 47,
                "error": 0.2509600854128569
            },
            {
                "epoch": 48,
                "error": 0.2504726228552438
            },
            {
                "epoch": 49,
                "error": 0.25001125563141907
            },
            {
                "epoch": 50,
                "error": 0.24957308459390934
            },
            {
                "epoch": 51,
                "error": 0.24915567836600896
            },
            {
                "epoch": 52,
                "error": 0.24875698267940188
            },
            {
                "epoch": 53,
                "error": 0.2483752487771605
            },
            {
                "epoch": 54,
                "error": 0.24800897653974158
            },
            {
                "epoch": 55,
                "error": 0.24765686922332472
            },
            {
                "epoch": 56,
                "error": 0.2473177974429354
            },
            {
                "epoch": 57,
                "error": 0.24699077051344978
            },
            {
                "epoch": 58,
                "error": 0.24667491361286448
            },
            {
                "epoch": 59,
                "error": 0.2463694495192525
            },
            {
                "epoch": 60,
                "error": 0.2460736839194708
            },
            {
                "epoch": 61,
                "error": 0.2457869934992166
            },
            {
                "epoch": 62,
                "error": 0.24550881620065004
            },
            {
                "epoch": 63,
                "error": 0.24523864317659225
            },
            {
                "epoch": 64,
                "error": 0.2449760120823642
            },
            {
                "epoch": 65,
                "error": 0.24472050143225665
            },
            {
                "epoch": 66,
                "error": 0.2444717258123901
            },
            {
                "epoch": 67,
                "error": 0.24422933179007678
            },
            {
                "epoch": 68,
                "error": 0.24399299439573385
            },
            {
                "epoch": 69,
                "error": 0.24376241408014276
            },
            {
                "epoch": 70,
                "error": 0.24353731406988516
            },
            {
                "epoch": 71,
                "error": 0.24331743805891276
            },
            {
                "epoch": 72,
                "error": 0.24310254818580043
            },
            {
                "epoch": 73,
                "error": 0.24289242325520033
            },
            {
                "epoch": 74,
                "error": 0.24268685716907554
            },
            {
                "epoch": 75,
                "error": 0.2424856575389254
            },
            {
                "epoch": 76,
                "error": 0.2422886444547354
            },
            {
                "epoch": 77,
                "error": 0.24209564939011577
            },
            {
                "epoch": 78,
                "error": 0.2419065142261153
            },
            {
                "epoch": 79,
                "error": 0.2417210903787593
            },
            {
                "epoch": 80,
                "error": 0.24153923801746996
            },
            {
                "epoch": 81,
                "error": 0.24136082536331263
            },
            {
                "epoch": 82,
                "error": 0.2411857280575296
            },
            {
                "epoch": 83,
                "error": 0.24101382859209683
            },
            {
                "epoch": 84,
                "error": 0.2408450157951389
            },
            {
                "epoch": 85,
                "error": 0.24067918436496388
            },
            {
                "epoch": 86,
                "error": 0.24051623444728806
            },
            {
                "epoch": 87,
                "error": 0.24035607125090136
            },
            {
                "epoch": 88,
                "error": 0.24019860469761983
            },
            {
                "epoch": 89,
                "error": 0.24004374910287898
            },
            {
                "epoch": 90,
                "error": 0.23989142288376847
            },
            {
                "epoch": 91,
                "error": 0.23974154829168337
            },
            {
                "epoch": 92,
                "error": 0.2395940511671092
            },
            {
                "epoch": 93,
                "error": 0.23944886071433283
            },
            {
                "epoch": 94,
                "error": 0.2393059092941421
            },
            {
                "epoch": 95,
                "error": 0.23916513223277258
            },
            {
                "epoch": 96,
                "error": 0.23902646764557414
            },
            {
                "epoch": 97,
                "error": 0.23888985627402418
            },
            {
                "epoch": 98,
                "error": 0.2387552413348649
            },
            {
                "epoch": 99,
                "error": 0.23862256838027834
            },
            {
                "epoch": 100,
                "error": 0.23849178516811279
            },
            {
                "epoch": 101,
                "error": 0.23836284154129317
            },
            {
                "epoch": 102,
                "error": 0.2382356893156208
            },
            {
                "epoch": 103,
                "error": 0.23811028217525676
            },
            {
                "epoch": 104,
                "error": 0.23798657557525088
            },
            {
                "epoch": 105,
                "error": 0.23786452665053298
            },
            {
                "epoch": 106,
                "error": 0.23774409413085568
            },
            {
                "epoch": 107,
                "error": 0.23762523826120743
            },
            {
                "epoch": 108,
                "error": 0.2375079207272674
            },
            {
                "epoch": 109,
                "error": 0.23739210458552334
            },
            {
                "epoch": 110,
                "error": 0.23727775419768332
            },
            {
                "epoch": 111,
                "error": 0.23716483516907222
            },
            {
                "epoch": 112,
                "error": 0.23705331429071425
            },
            {
                "epoch": 113,
                "error": 0.2369431594848252
            },
            {
                "epoch": 114,
                "error": 0.2368343397534898
            },
            {
                "epoch": 115,
                "error": 0.23672682513027304
            },
            {
                "epoch": 116,
                "error": 0.23662058663457988
            },
            {
                "epoch": 117,
                "error": 0.23651559622856613
            },
            {
                "epoch": 118,
                "error": 0.23641182677642802
            },
            {
                "epoch": 119,
                "error": 0.2363092520059069
            },
            {
                "epoch": 120,
                "error": 0.2362078464718722
            },
            {
                "epoch": 121,
                "error": 0.23610758552183442
            },
            {
                "epoch": 122,
                "error": 0.23600844526327264
            },
            {
                "epoch": 123,
                "error": 0.23591040253265577
            },
            {
                "epoch": 124,
                "error": 0.23581343486605272
            },
            {
                "epoch": 125,
                "error": 0.2357175204712304
            },
            {
                "epoch": 126,
                "error": 0.2356226382011536
            },
            {
                "epoch": 127,
                "error": 0.23552876752879226
            },
            {
                "epoch": 128,
                "error": 0.23543588852316627
            },
            {
                "epoch": 129,
                "error": 0.23534398182654917
            },
            {
                "epoch": 130,
                "error": 0.23525302863276398
            },
            {
                "epoch": 131,
                "error": 0.2351630106665082
            },
            {
                "epoch": 132,
                "error": 0.23507391016364854
            },
            {
                "epoch": 133,
                "error": 0.23498570985242936
            },
            {
                "epoch": 134,
                "error": 0.23489839293554485
            },
            {
                "epoch": 135,
                "error": 0.2348119430730259
            },
            {
                "epoch": 136,
                "error": 0.23472634436589798
            },
            {
                "epoch": 137,
                "error": 0.23464158134056598
            },
            {
                "epoch": 138,
                "error": 0.23455763893388826
            },
            {
                "epoch": 139,
                "error": 0.23447450247890486
            },
            {
                "epoch": 140,
                "error": 0.23439215769118033
            },
            {
                "epoch": 141,
                "error": 0.23431059065573384
            },
            {
                "epoch": 142,
                "error": 0.23422978781452528
            },
            {
                "epoch": 143,
                "error": 0.23414973595446661
            },
            {
                "epoch": 144,
                "error": 0.23407042219593213
            },
            {
                "epoch": 145,
                "error": 0.2339918339817472
            },
            {
                "epoch": 146,
                "error": 0.23391395906662454
            },
            {
                "epoch": 147,
                "error": 0.2338367855070299
            },
            {
                "epoch": 148,
                "error": 0.23376030165145856
            },
            {
                "epoch": 149,
                "error": 0.23368449613109607
            }
        ],
        "error_plot_path": "./modelos/26n_max_error_plot.png",
        "weights_path": "./modelos/26n_max_weights.npy",
        "confusion_matrix_path": "./modelos/26n_max_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 76.92307692307693,
            "test_avg_error": 0.44296745074792515,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 26,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "max_value",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 1,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold",
        "timestamp": 1714267144.247803,
        "epoch_errors": [
            0.9842319499527317,
            0.8731291308349147,
            0.6185432935653357,
            0.4167383606910207,
            0.30776793395677204,
            0.23017561559062555,
            0.19292456327407845,
            0.14770921952413585,
            0.12177022540506376,
            0.10548116325056395,
            0.09483749039253567,
            0.08649326301328014,
            0.08086912864248397,
            0.07875250757130738,
            0.07331839309038314,
            0.06969422627269216,
            0.06559403232258244,
            0.06321993748012456,
            0.06195728298223643,
            0.057954557007661216,
            0.05662581509084985,
            0.05474749580309087,
            0.05365138298244073,
            0.05249257412109361,
            0.051885567396529955,
            0.05006819818389372,
            0.04911198075032513,
            0.048619231833801825,
            0.04803983432706646,
            0.04727148828072763,
            0.04572653128610252,
            0.044568293218543824,
            0.0438984051743306,
            0.0434009839750429,
            0.04320009711983329,
            0.04332422463365218,
            0.04188802138754508,
            0.04108659914530282,
            0.040464192125792,
            0.03993466610810438,
            0.03946442833874603,
            0.03903751095077706,
            0.038645205239038555,
            0.038282834487044,
            0.037948880466331956,
            0.037645901453254416,
            0.037385021601481515,
            0.03720226622547117,
            0.03721696914158674,
            0.03765768380157351,
            0.037178102999876735,
            0.036271587408556454,
            0.03577723473031183,
            0.03537096474499035,
            0.03501763495367533,
            0.03470057401754845,
            0.03441024876174953,
            0.034140676732309604,
            0.03388786506559049,
            0.033649015185925876,
            0.03342208441046526,
            0.033205530033337725,
            0.03299815265960551,
            0.032798996324497995,
            0.03260728255189412,
            0.032422365482121136,
            0.03224370051893757,
            0.03207082190530134,
            0.03190332634782649,
            0.03174086083208259,
            0.03158311340050671,
            0.031429806062976906,
            0.031280689268116064,
            0.03113553753415026,
            0.030994145953351072,
            0.03085632736317824,
            0.030721910032404674,
            0.03059073574954665,
            0.030462658228926645,
            0.03033754177003533,
            0.03021526012080056,
            0.03009569550647382,
            0.02997873779416998,
            0.02986428376940751,
            0.02975223650582004,
            0.029642504812929883,
            0.029535002749768346,
            0.029429649194392615,
            0.02932636746114038,
            0.029225084958886892,
            0.02912573288470877,
            0.029028245948277732,
            0.028932562123053146,
            0.02883862242095143,
            0.028746370687668225,
            0.028655753416243,
            0.028566719576798006,
            0.02847922046066882,
            0.028393209537382485,
            0.028308642323143427,
            0.028225476259655564,
            0.02814367060225598,
            0.028063186316458575,
            0.027983985982114257,
            0.02790603370448265,
            0.027829295031593274,
            0.027753736877338748,
            0.027679327449806217,
            0.027606036184401824,
            0.02753383368137041,
            0.027462691647353907,
            0.027392582840662875,
            0.027323481019973037,
            0.02725536089618011,
            0.02718819808717546,
            0.027121969075324097,
            0.02705665116744745,
            0.026992222457129973,
            0.02692866178918543,
            0.026865948726130465,
            0.02680406351652902,
            0.026742987065079018,
            0.026682700904325715,
            0.02662318716789395,
            0.026564428565140658,
            0.026506408357136114,
            0.026449110333890018,
            0.02639251879274404,
            0.02633661851785912,
            0.02628139476073067,
            0.026226833221669094,
            0.026172920032188702,
            0.026119641738251383,
            0.026066985284314365,
            0.026014937998137488,
            0.025963487576304387,
            0.02591262207041988,
            0.025862329873943102,
            0.025812599709623886,
            0.025763420617507433,
            0.025714781943477955,
            0.02566667332831108,
            0.025619084697209384,
            0.025572006249794863,
            0.025525428450534387,
            0.025479342019576866,
            0.025433737923979856,
            0.025388607369306922,
            0.025343941791576296,
            0.025299732849544457
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.27094457717050335
            },
            {
                "epoch": 19,
                "error": 0.23683725771558595
            },
            {
                "epoch": 29,
                "error": 0.22828400473306726
            },
            {
                "epoch": 39,
                "error": 0.22267985816388564
            },
            {
                "epoch": 49,
                "error": 0.21977360765588957
            },
            {
                "epoch": 59,
                "error": 0.21666197401382395
            },
            {
                "epoch": 69,
                "error": 0.21447679355518004
            },
            {
                "epoch": 79,
                "error": 0.2128286053258396
            },
            {
                "epoch": 89,
                "error": 0.21148836549603398
            },
            {
                "epoch": 99,
                "error": 0.21036089897625654
            },
            {
                "epoch": 109,
                "error": 0.20939108981697
            },
            {
                "epoch": 119,
                "error": 0.20854288493590661
            },
            {
                "epoch": 129,
                "error": 0.20779116493751856
            },
            {
                "epoch": 139,
                "error": 0.20711769948525283
            },
            {
                "epoch": 149,
                "error": 0.20650885844880093
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_error_plot.png",
        "weights_path": "./modelos/60n_threshold_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 69.23076923076923,
            "test_avg_error": 0.36015318835169424,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_leaky_relu",
        "timestamp": 1714267375.639435,
        "epoch_errors": [
            0.9621869107718833,
            0.848934375253824,
            0.7135978851479666,
            0.5945442596542841,
            0.4986173802137366,
            0.42826860930857846,
            0.3790962801708765,
            0.34274231339147715,
            0.3143555441272681,
            0.2924965386536983,
            0.27463610420096557,
            0.2600796009098392,
            0.24669743915297154,
            0.23522505441118932,
            0.22454029095534725,
            0.21533133726953294,
            0.20684770630823274,
            0.19958935963290575,
            0.19247436990466618,
            0.18583389404287565,
            0.1799556139315741,
            0.17473750488378237,
            0.16975503714445664,
            0.1650959078050215,
            0.16180152394591277,
            0.15726831768031355,
            0.15366477768171477,
            0.15001164433256992,
            0.1467552353725441,
            0.14390931431840354,
            0.14094567629989913,
            0.13849942037240184,
            0.13583714806403616,
            0.13363240925556696,
            0.1313929500287178,
            0.12943220775154116,
            0.12734370761305533,
            0.1256135284407853,
            0.1238850850590384,
            0.12217427761498698,
            0.12059871097252388,
            0.11908078299458438,
            0.11767089689556678,
            0.11633875641091725,
            0.11505595377673254,
            0.11382036037804014,
            0.11268721649915406,
            0.11165612180286787,
            0.11065993681722497,
            0.10963849611920151,
            0.10862376023234063,
            0.10764308621377924,
            0.10672369347143046,
            0.10575676556852576,
            0.10492184957477203,
            0.10412305408272333,
            0.10325702728751354,
            0.10253728550868912,
            0.10183082824987777,
            0.10104391101361374,
            0.10036395852110083,
            0.09973660645352726,
            0.09907875084641103,
            0.0985390540237414,
            0.09791875400564347,
            0.09735839129293762,
            0.09679278689962315,
            0.09629395079071949,
            0.09574293050562942,
            0.09534808123144617,
            0.09482756524827048,
            0.09435123528838225,
            0.0939548273138332,
            0.09351350904600263,
            0.09308442928339772,
            0.0927153553546646,
            0.09229726274308114,
            0.09193730648748395,
            0.09157412355451112,
            0.09121363601819293,
            0.0908638490724784,
            0.09055576829910578,
            0.09021400060204705,
            0.08991224797917119,
            0.08959042975236486,
            0.08930449238096747,
            0.08900905444702094,
            0.08874786691194786,
            0.08848612255192173,
            0.08818985714063651,
            0.08796295152726549,
            0.08769319324587878,
            0.08745972421143142,
            0.08720996487017887,
            0.08699218581145837,
            0.08678583831546466,
            0.08654607752957573,
            0.08690560128332123,
            0.08670743328198527,
            0.08648575631015182,
            0.08623730252567403,
            0.08600484453913472,
            0.08575389407956253,
            0.08550659060730607,
            0.08529594932247436,
            0.08507239868506682,
            0.08485910293244524,
            0.08465984231488624,
            0.08445796152319804,
            0.08425888057323946,
            0.08406129032498674,
            0.08388446472787502,
            0.08369823075290087,
            0.0835192225748621,
            0.08335284020019021,
            0.08318745890810687,
            0.08302117967066903,
            0.08286773788516287,
            0.08270979164607847,
            0.08255704656250269,
            0.08240988151096376,
            0.08227516940301552,
            0.08212623256711869,
            0.08198925621493137,
            0.081861081743853,
            0.08172415451138948,
            0.08159464953278874,
            0.08147067381975098,
            0.08134790120307163,
            0.0817585094982843,
            0.08160473181488677,
            0.08149724558673652,
            0.08140479150386214,
            0.08131126841388335,
            0.08120711009651845,
            0.08109230699740745,
            0.08097939185878762,
            0.08086113515957223,
            0.0807375280604346,
            0.08061114909609966,
            0.08049754490724322,
            0.08037637082771484,
            0.0802640683915798,
            0.08014081700718445,
            0.08002939556916197,
            0.0799175042447171,
            0.07981013652459638,
            0.07970791424266725,
            0.07960273214478787,
            0.0794963599773734
        ],
        "validation_errors": [
            {
                "epoch": 0,
                "error": 0.9286089258876435
            },
            {
                "epoch": 1,
                "error": 0.8116062668327496
            },
            {
                "epoch": 2,
                "error": 0.6976605956163356
            },
            {
                "epoch": 3,
                "error": 0.6018927532195864
            },
            {
                "epoch": 4,
                "error": 0.5320802657669523
            },
            {
                "epoch": 5,
                "error": 0.48839570912042296
            },
            {
                "epoch": 6,
                "error": 0.4614277413469412
            },
            {
                "epoch": 7,
                "error": 0.4419622019109958
            },
            {
                "epoch": 8,
                "error": 0.427778041282883
            },
            {
                "epoch": 9,
                "error": 0.41511920020515874
            },
            {
                "epoch": 10,
                "error": 0.4051315799777875
            },
            {
                "epoch": 11,
                "error": 0.39656785645945825
            },
            {
                "epoch": 12,
                "error": 0.3918276325206913
            },
            {
                "epoch": 13,
                "error": 0.3860396444140762
            },
            {
                "epoch": 14,
                "error": 0.3832240948360696
            },
            {
                "epoch": 15,
                "error": 0.3783625730543128
            },
            {
                "epoch": 16,
                "error": 0.3772667597664685
            },
            {
                "epoch": 17,
                "error": 0.3735253579379484
            },
            {
                "epoch": 18,
                "error": 0.3717860671682105
            },
            {
                "epoch": 19,
                "error": 0.3696934550304136
            },
            {
                "epoch": 20,
                "error": 0.3678106166736672
            },
            {
                "epoch": 21,
                "error": 0.3662324694192723
            },
            {
                "epoch": 22,
                "error": 0.36520086807285207
            },
            {
                "epoch": 23,
                "error": 0.36424066027913216
            },
            {
                "epoch": 24,
                "error": 0.3623188957459867
            },
            {
                "epoch": 25,
                "error": 0.36152087233312946
            },
            {
                "epoch": 26,
                "error": 0.36022095192524567
            },
            {
                "epoch": 27,
                "error": 0.35942101269270704
            },
            {
                "epoch": 28,
                "error": 0.3585142151745158
            },
            {
                "epoch": 29,
                "error": 0.35760036270776335
            },
            {
                "epoch": 30,
                "error": 0.3569236572113841
            },
            {
                "epoch": 31,
                "error": 0.3558239590674323
            },
            {
                "epoch": 32,
                "error": 0.3551371180527413
            },
            {
                "epoch": 33,
                "error": 0.35512584104548267
            },
            {
                "epoch": 34,
                "error": 0.3542841975200239
            },
            {
                "epoch": 35,
                "error": 0.3537225116955193
            },
            {
                "epoch": 36,
                "error": 0.35344178359823886
            },
            {
                "epoch": 37,
                "error": 0.3527453056180367
            },
            {
                "epoch": 38,
                "error": 0.3525995503762885
            },
            {
                "epoch": 39,
                "error": 0.35220384210350886
            },
            {
                "epoch": 40,
                "error": 0.35146861312028077
            },
            {
                "epoch": 41,
                "error": 0.35123218687638
            },
            {
                "epoch": 42,
                "error": 0.3508649791504539
            },
            {
                "epoch": 43,
                "error": 0.3506370890725905
            },
            {
                "epoch": 44,
                "error": 0.3504383043544418
            },
            {
                "epoch": 45,
                "error": 0.3500505066717773
            },
            {
                "epoch": 46,
                "error": 0.3499628751239967
            },
            {
                "epoch": 47,
                "error": 0.3487782892658496
            },
            {
                "epoch": 48,
                "error": 0.3477230616943923
            },
            {
                "epoch": 49,
                "error": 0.3476992335556182
            },
            {
                "epoch": 50,
                "error": 0.3474580019379663
            },
            {
                "epoch": 51,
                "error": 0.3473320463130911
            },
            {
                "epoch": 52,
                "error": 0.34704477124142735
            },
            {
                "epoch": 53,
                "error": 0.346693764266962
            },
            {
                "epoch": 54,
                "error": 0.3466291451227404
            },
            {
                "epoch": 55,
                "error": 0.3464345482129209
            },
            {
                "epoch": 56,
                "error": 0.346280897182283
            },
            {
                "epoch": 57,
                "error": 0.34617796617723173
            },
            {
                "epoch": 58,
                "error": 0.34606822757308986
            },
            {
                "epoch": 59,
                "error": 0.34599843115802004
            },
            {
                "epoch": 60,
                "error": 0.34578317294865957
            },
            {
                "epoch": 61,
                "error": 0.3457647972466093
            },
            {
                "epoch": 62,
                "error": 0.34548540092030855
            },
            {
                "epoch": 63,
                "error": 0.34561680989507265
            },
            {
                "epoch": 64,
                "error": 0.34547071203015584
            },
            {
                "epoch": 65,
                "error": 0.345293929297635
            },
            {
                "epoch": 66,
                "error": 0.34530447609716675
            },
            {
                "epoch": 67,
                "error": 0.3453342390728172
            },
            {
                "epoch": 68,
                "error": 0.3450467670786791
            },
            {
                "epoch": 69,
                "error": 0.3451697334441283
            },
            {
                "epoch": 70,
                "error": 0.3452030677942742
            },
            {
                "epoch": 71,
                "error": 0.3449589600553399
            },
            {
                "epoch": 72,
                "error": 0.3451011726629783
            },
            {
                "epoch": 73,
                "error": 0.3451393633151012
            },
            {
                "epoch": 74,
                "error": 0.3448839226106868
            },
            {
                "epoch": 75,
                "error": 0.34512446423670307
            },
            {
                "epoch": 76,
                "error": 0.34501660419192587
            },
            {
                "epoch": 77,
                "error": 0.34500608607036554
            },
            {
                "epoch": 78,
                "error": 0.34500557764167866
            },
            {
                "epoch": 79,
                "error": 0.3450303932712943
            },
            {
                "epoch": 80,
                "error": 0.344983950633658
            },
            {
                "epoch": 81,
                "error": 0.3450881695778476
            },
            {
                "epoch": 82,
                "error": 0.3450777830478892
            },
            {
                "epoch": 83,
                "error": 0.3450256612380989
            },
            {
                "epoch": 84,
                "error": 0.34500883379346053
            },
            {
                "epoch": 85,
                "error": 0.3451202752582613
            },
            {
                "epoch": 86,
                "error": 0.3450714513167739
            },
            {
                "epoch": 87,
                "error": 0.34508040359831016
            },
            {
                "epoch": 88,
                "error": 0.3451208445997218
            },
            {
                "epoch": 89,
                "error": 0.34512408682713075
            },
            {
                "epoch": 90,
                "error": 0.34509540293319935
            },
            {
                "epoch": 91,
                "error": 0.3451507095371019
            },
            {
                "epoch": 92,
                "error": 0.3451496902579987
            },
            {
                "epoch": 93,
                "error": 0.3451627633710432
            },
            {
                "epoch": 94,
                "error": 0.34514478067211735
            },
            {
                "epoch": 95,
                "error": 0.34519783920563835
            },
            {
                "epoch": 96,
                "error": 0.34518131841682714
            },
            {
                "epoch": 97,
                "error": 0.3454394305953022
            },
            {
                "epoch": 98,
                "error": 0.34556767843619907
            },
            {
                "epoch": 99,
                "error": 0.34568402693227657
            },
            {
                "epoch": 100,
                "error": 0.3457591186317039
            },
            {
                "epoch": 101,
                "error": 0.3457811653082094
            },
            {
                "epoch": 102,
                "error": 0.3457857696012824
            },
            {
                "epoch": 103,
                "error": 0.34581148791689453
            },
            {
                "epoch": 104,
                "error": 0.34587507413642743
            },
            {
                "epoch": 105,
                "error": 0.34591447411835363
            },
            {
                "epoch": 106,
                "error": 0.34593163789236603
            },
            {
                "epoch": 107,
                "error": 0.3459861880425122
            },
            {
                "epoch": 108,
                "error": 0.3459792297766523
            },
            {
                "epoch": 109,
                "error": 0.3460417499351104
            },
            {
                "epoch": 110,
                "error": 0.3460672346348557
            },
            {
                "epoch": 111,
                "error": 0.34607999083019514
            },
            {
                "epoch": 112,
                "error": 0.3461065744791044
            },
            {
                "epoch": 113,
                "error": 0.3461183357641749
            },
            {
                "epoch": 114,
                "error": 0.34617790614099814
            },
            {
                "epoch": 115,
                "error": 0.3461953649578838
            },
            {
                "epoch": 116,
                "error": 0.34622079911572257
            },
            {
                "epoch": 117,
                "error": 0.34625112338636127
            },
            {
                "epoch": 118,
                "error": 0.34624362027626737
            },
            {
                "epoch": 119,
                "error": 0.346290482562764
            },
            {
                "epoch": 120,
                "error": 0.3463109494768911
            },
            {
                "epoch": 121,
                "error": 0.346321262976433
            },
            {
                "epoch": 122,
                "error": 0.3463468482892365
            },
            {
                "epoch": 123,
                "error": 0.3463650345155727
            },
            {
                "epoch": 124,
                "error": 0.3463786445377501
            },
            {
                "epoch": 125,
                "error": 0.34641108802130255
            },
            {
                "epoch": 126,
                "error": 0.34644175272165184
            },
            {
                "epoch": 127,
                "error": 0.3464353738484882
            },
            {
                "epoch": 128,
                "error": 0.3464592386362963
            },
            {
                "epoch": 129,
                "error": 0.34672046589487465
            },
            {
                "epoch": 130,
                "error": 0.34689718555808896
            },
            {
                "epoch": 131,
                "error": 0.346983816873275
            },
            {
                "epoch": 132,
                "error": 0.3470733551581231
            },
            {
                "epoch": 133,
                "error": 0.34713029042053006
            },
            {
                "epoch": 134,
                "error": 0.34713854050807896
            },
            {
                "epoch": 135,
                "error": 0.3471531274401355
            },
            {
                "epoch": 136,
                "error": 0.3471925413270514
            },
            {
                "epoch": 137,
                "error": 0.34718210165544966
            },
            {
                "epoch": 138,
                "error": 0.34715958112203166
            },
            {
                "epoch": 139,
                "error": 0.34715334492174715
            },
            {
                "epoch": 140,
                "error": 0.34715501210775057
            },
            {
                "epoch": 141,
                "error": 0.3471538105526549
            },
            {
                "epoch": 142,
                "error": 0.3471496685317756
            },
            {
                "epoch": 143,
                "error": 0.3471225634744496
            },
            {
                "epoch": 144,
                "error": 0.347145855364367
            },
            {
                "epoch": 145,
                "error": 0.3471499697958352
            },
            {
                "epoch": 146,
                "error": 0.34715224387896104
            },
            {
                "epoch": 147,
                "error": 0.34714256710418884
            },
            {
                "epoch": 148,
                "error": 0.3471358396012012
            },
            {
                "epoch": 149,
                "error": 0.3471278820256938
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_leaky_relu_error_plot.png",
        "weights_path": "./modelos/60n_threshold_leaky_relu_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_leaky_relu_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 63.07692307692307,
            "test_avg_error": 0.4976535672936932,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='leaky_relu', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='max', ctx=Load()), args=[BinOp(left=Constant(value=0.01), op=Mult(), right=Name(id='x', ctx=Load())), Name(id='x', ctx=Load())], keywords=[]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='leaky_relu_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=Constant(value=1), orelse=Constant(value=0.01)))], decorator_list=[], type_params=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 1,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.01,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_tanh",
        "timestamp": 1714267628.560513,
        "epoch_errors": [
            0.930004619536615,
            0.8442981036551015,
            0.808620883084199,
            0.7897565658192021,
            0.7780239044047172,
            0.7700027326402288,
            0.7640027643797516,
            0.7592262653925045,
            0.7552131557112417,
            0.7516281029568463,
            0.7482065881086862,
            0.7447381140991417,
            0.7410708465136121,
            0.7371281115457863,
            0.7329100022780899,
            0.728458331396329,
            0.7238020933654546,
            0.7189254930544875,
            0.7137780257065198,
            0.7083129316656002,
            0.7025261102890379,
            0.6964701229226065,
            0.6902349565999166,
            0.6839109659723596,
            0.6775600309564432,
            0.6712091890347105,
            0.6648622691892595,
            0.658517352954293,
            0.6521809226985447,
            0.6458744793488954,
            0.6396328783058286,
            0.6334966255194089,
            0.6275026734469339,
            0.6216781728899744,
            0.6160390066944285,
            0.6105919638386128,
            0.6053381999898716,
            0.6002761998280044,
            0.5954035856240112,
            0.590717893981859,
            0.5862167001250795,
            0.5818974178932586,
            0.5777569743688981,
            0.5737914692449956,
            0.5699958954901109,
            0.5663639858734875,
            0.5628882278179638,
            0.5595600501783086,
            0.5563701437361798,
            0.5533088500144597,
            0.5503665486425864,
            0.547533988362534,
            0.544802530824694,
            0.5421642997717376,
            0.5396122452032923,
            0.5371401411394692,
            0.5347425379678531,
            0.5324146884362146,
            0.530152462368885,
            0.5279522607178408,
            0.5258109355126387,
            0.5237257190481435,
            0.5216941633404987,
            0.5197140894180092,
            0.5177835452398012,
            0.5159007707647428,
            0.5140641687440696,
            0.5122722800290684,
            0.5105237624578957,
            0.5088173726428894,
            0.5071519501879546,
            0.5055264040157782,
            0.5039397005823757,
            0.5023908538135246,
            0.5008789166263078,
            0.499402973910168,
            0.4979621368432043,
            0.49655553841642763,
            0.4951823300347907,
            0.4938416790608005,
            0.4925327671657659,
            0.4912547893555439,
            0.4900069535423117,
            0.48878848054118157,
            0.48759860438015623,
            0.4864365728234744,
            0.48530164802126824,
            0.48419310721204956,
            0.4831102434183047,
            0.4820523660887822,
            0.48101880165350397,
            0.48000889396882396,
            0.4790220046395875,
            0.47805751321368833,
            0.47711481725089194,
            0.47619333227286803,
            0.4752924916049605,
            0.47441174612260434,
            0.4735505639165552,
            0.47270842989149,
            0.47188484531225555,
            0.4710793273112115,
            0.47029140836898464,
            0.46952063577951525,
            0.46876657110886943,
            0.46802878965571076,
            0.46730687991988573,
            0.46660044308423176,
            0.46590909251343604,
            0.46523245327269774,
            0.4645701616679514,
            0.4639218648086584,
            0.46328722019346325,
            0.46266589531850383,
            0.4620575673077317,
            0.4614619225643291,
            0.4608786564420429,
            0.4603074729351812,
            0.4597480843858767,
            0.4592002112072549,
            0.45866358162114884,
            0.4581379314090194,
            0.4576230036748778,
            0.4571185486190306,
            0.4566243233216104,
            0.4561400915349293,
            0.4556656234838171,
            0.45520069567318355,
            0.454745090702177,
            0.4542985970843326,
            0.4538610090732839,
            0.4534321264935849,
            0.45301175457633447,
            0.45259970379930387,
            0.4521957897313476,
            0.45179983288089753,
            0.45141165854840415,
            0.451031096682591,
            0.4506579817404253,
            0.45029215255073535,
            0.4499334521814,
            0.4495817278100658,
            0.44923683059834735,
            0.44889861556945476,
            0.44856694148923454,
            0.44824167075057847,
            0.44792266926115026,
            0.44760980633442415,
            0.4473029545839511,
            0.44700198982085904
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.8082852677948521
            },
            {
                "epoch": 19,
                "error": 0.7797069126250351
            },
            {
                "epoch": 29,
                "error": 0.7295615491655598
            },
            {
                "epoch": 39,
                "error": 0.6835533762234772
            },
            {
                "epoch": 49,
                "error": 0.6562253710541995
            },
            {
                "epoch": 59,
                "error": 0.6434142144934234
            },
            {
                "epoch": 69,
                "error": 0.636134315886664
            },
            {
                "epoch": 79,
                "error": 0.6311226036026722
            },
            {
                "epoch": 89,
                "error": 0.6274318489990507
            },
            {
                "epoch": 99,
                "error": 0.6246315989498087
            },
            {
                "epoch": 109,
                "error": 0.6224708015507108
            },
            {
                "epoch": 119,
                "error": 0.6207974374703656
            },
            {
                "epoch": 129,
                "error": 0.6195038845044158
            },
            {
                "epoch": 139,
                "error": 0.6185053832217527
            },
            {
                "epoch": 149,
                "error": 0.6177356654963628
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_tanh_error_plot.png",
        "weights_path": "./modelos/60n_threshold_tanh_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_tanh_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 62.30769230769231,
            "test_avg_error": 0.821861400103185,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='tanh', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='tanh', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='tanh_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='tanh', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=2))))], decorator_list=[], type_params=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.01,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_max",
        "timestamp": 1714267958.114659,
        "epoch_errors": [
            0.9846901493560829,
            0.8749389340600032,
            0.6156264228912884,
            0.4215554335270979,
            0.30031296285748854,
            0.22223273376722796,
            0.18620620422880313,
            0.14886385772835195,
            0.12254351757836512,
            0.10412286260161518,
            0.09435016537139335,
            0.08835269620356204,
            0.08443053429880719,
            0.07801287244064864,
            0.07275359045080225,
            0.07284547770038827,
            0.06774987157800573,
            0.06923661823185696,
            0.06334158763535586,
            0.059977342053663174,
            0.05799661391422036,
            0.054666467348307476,
            0.05370350356898907,
            0.05028312052247889,
            0.048485919114374366,
            0.047349667000419225,
            0.046462016583412875,
            0.04573891832117672,
            0.04526127935743639,
            0.04506363503661397,
            0.04441749197124497,
            0.04320340190464817,
            0.04216364789568888,
            0.04140175555227434,
            0.040762510322132,
            0.040209814437502656,
            0.03974672192640497,
            0.03947794876277394,
            0.0398632229737159,
            0.03858862806399245,
            0.03767626789244887,
            0.03709618745796674,
            0.03662161159339579,
            0.036200312575635565,
            0.03581585346231582,
            0.03545929249539728,
            0.035125136594411265,
            0.034809719922876514,
            0.03451043733376325,
            0.03422534261883972,
            0.033952922008323165,
            0.03369195899970609,
            0.033441449789851495,
            0.03320054816233367,
            0.03296852824865691,
            0.0327447585368352,
            0.03252868319099692,
            0.0323198082653604,
            0.03211769128435748,
            0.03192193319610235,
            0.03173217203802265,
            0.03154807786407158,
            0.03136934861979915,
            0.031195706742431575,
            0.031026896324665685,
            0.03086268072337786,
            0.030702840524302413,
            0.030547171795069702,
            0.030395484574477712,
            0.030247601557276453,
            0.030103356942269073,
            0.029962595417984045,
            0.029825171265116586,
            0.029690947558771736,
            0.029559795456545607,
            0.029431593560860867,
            0.029306227345875173,
            0.029183588640812212,
            0.029063575162816616,
            0.028946090093450942,
            0.028831041693800685,
            0.028718342953851297,
            0.028607911272387394,
            0.02849966816415934,
            0.028393538991474367,
            0.028289452717728446,
            0.02818734168069354,
            0.02808714138363506,
            0.027988790302559276,
            0.02789222970807978,
            0.027797403500563443,
            0.027704258057358832,
            0.027612742091039456,
            0.02752280651770469,
            0.02743440433447998,
            0.027347490505442867,
            0.0272620218552799,
            0.027177956970045943,
            0.027095256104455616,
            0.027013881095194144,
            0.026933795279778242,
            0.026854963420542822,
            0.026777351633366975,
            0.02670092732078481,
            0.026625659109161547,
            0.02655151678963781,
            0.02647847126257448,
            0.026406494485250134,
            0.026335559422584226,
            0.026265640000677864,
            0.026196711062980677,
            0.026128748328907422,
            0.02606172835474043,
            0.02599562849666972,
            0.025930426875830605,
            0.025866102345210872,
            0.025802634458309277,
            0.025740003439435447,
            0.025678190155548408,
            0.02561717608954051,
            0.025556943314877355,
            0.02549747447151384,
            0.02543875274300877,
            0.025380761834768298,
            0.025323485953351984,
            0.025266909786779954,
            0.02521101848578436,
            0.025155797645950755,
            0.025101233290700256,
            0.025047311855065296,
            0.024994020170214883,
            0.024941345448689554,
            0.024889275270306085,
            0.024837797568697608,
            0.024786900618453973,
            0.024736573022831557,
            0.02468680370200265,
            0.02463758188181638,
            0.024588897083044497,
            0.024540739111088408,
            0.02449309804612288,
            0.02444596423365565,
            0.024399328275481247,
            0.02435318102101101,
            0.024307513558958774,
            0.024262317209367792,
            0.024217583515959734,
            0.024173304238792125,
            0.024129471347209205,
            0.024086077013072197
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.2554173000358048
            },
            {
                "epoch": 19,
                "error": 0.2381373344544007
            },
            {
                "epoch": 29,
                "error": 0.2265008357463587
            },
            {
                "epoch": 39,
                "error": 0.22476577479082044
            },
            {
                "epoch": 49,
                "error": 0.22177033360056828
            },
            {
                "epoch": 59,
                "error": 0.21971447276501566
            },
            {
                "epoch": 69,
                "error": 0.21810273332015384
            },
            {
                "epoch": 79,
                "error": 0.21679290729569406
            },
            {
                "epoch": 89,
                "error": 0.2156969607585681
            },
            {
                "epoch": 99,
                "error": 0.21475932578558804
            },
            {
                "epoch": 109,
                "error": 0.21394321828798626
            },
            {
                "epoch": 119,
                "error": 0.21322316760503546
            },
            {
                "epoch": 129,
                "error": 0.2125808655371194
            },
            {
                "epoch": 139,
                "error": 0.21200274624813611
            },
            {
                "epoch": 149,
                "error": 0.21147850565245546
            }
        ],
        "error_plot_path": "./modelos/60n_max_error_plot.png",
        "weights_path": "./modelos/60n_max_weights.npy",
        "confusion_matrix_path": "./modelos/60n_max_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 81.53846153846153,
            "test_avg_error": 0.33568923956796654,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "max_value",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "300_threshold",
        "timestamp": 1714269314.016858,
        "epoch_errors": [
            1.0792756545005564,
            0.9988768910581464,
            0.9738963657473877,
            0.8618136149994743,
            0.6437887771095039,
            0.4637068363520814,
            0.35618743085442683,
            0.2629089581253301,
            0.20036190897056735,
            0.16992431408370715,
            0.14377180678856738,
            0.13301856764799236,
            0.12383861306583241,
            0.1232317079066099,
            0.09566372193708746,
            0.07095441400953628,
            0.06288867126020717,
            0.059795905364145634,
            0.055741152214129557,
            0.05146541216999252,
            0.049489774949293616,
            0.04487653133180191,
            0.04387032482634954,
            0.04319228830093727,
            0.041273907784744726,
            0.04055228829578946,
            0.0396032350822045,
            0.03908957972712774,
            0.039263301264073604,
            0.03727920498770057,
            0.03642720099157909,
            0.03537017334548548,
            0.03366633899212622,
            0.03374977227401698,
            0.03373441616586766,
            0.03291784696389447,
            0.032356087969262835,
            0.031639437980858484,
            0.031076519867579068,
            0.030591607095040975,
            0.030112475329678774,
            0.02919822886330902,
            0.02858228062399029,
            0.028266240689531583,
            0.028015143408711623,
            0.0278373635482641,
            0.027787907977205942,
            0.028004150020918245,
            0.02855481862523769,
            0.02824460403912258,
            0.026381009248277822,
            0.02604824454700202,
            0.02576728624363251,
            0.025524072844612115,
            0.02530597221551565,
            0.02510645346264579,
            0.024921600964484474,
            0.024748818207551867,
            0.02458625883039266,
            0.02443254245586936,
            0.02428659775658315,
            0.02414756886730182,
            0.024014756146507086,
            0.023887576863586817,
            0.023765538087981476,
            0.023648217388532452,
            0.023535248719328144,
            0.023426311858529506,
            0.023321124346920387,
            0.023219435226358068,
            0.023121020100829528,
            0.023025677187040273,
            0.0229332241173368,
            0.022843495322940232,
            0.02275633987068851,
            0.022671619658418386,
            0.022589207897051204,
            0.022508987824160036,
            0.022430851606140688,
            0.022354699395350643,
            0.02228043851556846,
            0.022207982754477957,
            0.02213725174601305,
            0.022068170428623315,
            0.022000668568055833,
            0.02193468033526054,
            0.021870143931632446,
            0.02180700125509949,
            0.021745197601610308,
            0.021684681397434583,
            0.021625403958386562,
            0.021567319272662096,
            0.02151038380446121,
            0.0214545563159649,
            0.021399797705573185,
            0.021346070860591353,
            0.02129334052279125,
            0.021241573165475845,
            0.021190736880848098,
            0.021140801276633005,
            0.021091737381027764,
            0.02104351755516419,
            0.02099611541236234,
            0.020949505743535237,
            0.0209036644481763,
            0.020858568470422424,
            0.020814195739740908,
            0.020770525115834246,
            0.020727536337400754,
            0.0206852099744238,
            0.02064352738369613,
            0.02060247066731428,
            0.020562022633903554,
            0.020522166762356582,
            0.020482887167888993,
            0.020444168570233862,
            0.02040599626381239,
            0.020368356089732902,
            0.02033123440948331,
            0.020294618080194046,
            0.02025849443135853,
            0.020222851242907593,
            0.020187676724544256,
            0.020152959496250716,
            0.02011868856988862,
            0.020084853331818562,
            0.02005144352647133,
            0.020018449240808426,
            0.01998586088961384,
            0.019953669201564675,
            0.019921865206030055,
            0.01989044022055388,
            0.01985938583897845,
            0.019828693920169664,
            0.01979835657730763,
            0.019768366167709137,
            0.019738715283149282,
            0.019709396740654434,
            0.019680403573738157,
            0.01965172902405523,
            0.019623366533449454,
            0.019595309736373526,
            0.019567552452660387,
            0.019540088680625876,
            0.019512912590485133,
            0.019486018518066098,
            0.019459400958803344,
            0.01943305456199794,
            0.019406974125329046,
            0.019381154589604554
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.31277237818957193
            },
            {
                "epoch": 19,
                "error": 0.23053192919555426
            },
            {
                "epoch": 29,
                "error": 0.2149367104132167
            },
            {
                "epoch": 39,
                "error": 0.21096552641715405
            },
            {
                "epoch": 49,
                "error": 0.20774694954551087
            },
            {
                "epoch": 59,
                "error": 0.20491645515504534
            },
            {
                "epoch": 69,
                "error": 0.20331748309491038
            },
            {
                "epoch": 79,
                "error": 0.20215663460071054
            },
            {
                "epoch": 89,
                "error": 0.20124208063498658
            },
            {
                "epoch": 99,
                "error": 0.2004893108007709
            },
            {
                "epoch": 109,
                "error": 0.19985138779351377
            },
            {
                "epoch": 119,
                "error": 0.1992990295976381
            },
            {
                "epoch": 129,
                "error": 0.19881264311157648
            },
            {
                "epoch": 139,
                "error": 0.1983784781741386
            },
            {
                "epoch": 149,
                "error": 0.1979865397031436
            }
        ],
        "error_plot_path": "./modelos/300_threshold_error_plot.png",
        "weights_path": "./modelos/300_threshold_weights.npy",
        "confusion_matrix_path": "./modelos/300_threshold_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 71.53846153846153,
            "test_avg_error": 0.326989135130103,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 300,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    }
]