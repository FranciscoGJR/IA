[
    {
        "model_name": "60n_threshold_early_stop",
        "timestamp": 1714338330.797433,
        "epoch_errors": [
            0.985247606338823,
            0.8874097343540355,
            0.6339526157310048,
            0.43463310387351484,
            0.32440763542552725,
            0.2567886477492825,
            0.20900511177641495,
            0.16749881012603465,
            0.14426729202622268,
            0.13101488190843424,
            0.11527165499612174,
            0.10374108883072913,
            0.08917388150509614,
            0.08212829612497358,
            0.07792741063175207,
            0.07450940990747701,
            0.07086432149901098,
            0.06726077042897924,
            0.06682996638758167,
            0.06462928554737865,
            0.061603104666102575,
            0.059402594455414945,
            0.060728990543814504,
            0.05999495898382873,
            0.0580604773731826
        ],
        "validation_errors": [
            {
                "epoch": 0,
                "error": 0.9666187448978276
            },
            {
                "epoch": 1,
                "error": 0.7972693743773499
            },
            {
                "epoch": 2,
                "error": 0.5486255003766577
            },
            {
                "epoch": 3,
                "error": 0.4210530791395399
            },
            {
                "epoch": 4,
                "error": 0.39308056189643237
            },
            {
                "epoch": 5,
                "error": 0.34051206700621717
            },
            {
                "epoch": 6,
                "error": 0.323078135524571
            },
            {
                "epoch": 7,
                "error": 0.2988680414898165
            },
            {
                "epoch": 8,
                "error": 0.27702659648321853
            },
            {
                "epoch": 9,
                "error": 0.2715432048814712
            },
            {
                "epoch": 10,
                "error": 0.24630436828105715
            },
            {
                "epoch": 11,
                "error": 0.23917516765443053
            },
            {
                "epoch": 12,
                "error": 0.22844577627997467
            },
            {
                "epoch": 13,
                "error": 0.22913598385145803
            },
            {
                "epoch": 14,
                "error": 0.22171061179550436
            },
            {
                "epoch": 15,
                "error": 0.22371361353142513
            },
            {
                "epoch": 16,
                "error": 0.22509485694063508
            },
            {
                "epoch": 17,
                "error": 0.21221773400712834
            },
            {
                "epoch": 18,
                "error": 0.22244583635459309
            },
            {
                "epoch": 19,
                "error": 0.2155498018978626
            },
            {
                "epoch": 20,
                "error": 0.21180010147334882
            },
            {
                "epoch": 21,
                "error": 0.21498605792301678
            },
            {
                "epoch": 22,
                "error": 0.21613375639979213
            },
            {
                "epoch": 23,
                "error": 0.217701866299315
            },
            {
                "epoch": 24,
                "error": 0.21664617023949062
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_early_stop_error_plot.png",
        "weights_path": "./modelos/60n_threshold_early_stop_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_early_stop_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 63.07692307692307,
            "test_avg_error": 0.4478909738610895,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 1,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.3,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_cross_validation_0",
        "timestamp": 1714338753.788843,
        "epoch_errors": [
            0.9820775676803737,
            0.8350130547756957,
            0.5390153052504426,
            0.3636001535075407,
            0.27439587679689537,
            0.215209657744074,
            0.17113228872195557,
            0.1365816418454658,
            0.1298771136146014,
            0.10979440752376778,
            0.09554324366449415,
            0.08885414666104101,
            0.08125437667612895,
            0.07687302337001521,
            0.07247972038901059,
            0.07269097206536222,
            0.06780113430070911,
            0.06272810634243534,
            0.060225802631200975,
            0.05639473680267404,
            0.05305628878348823,
            0.05269583466668454,
            0.05100244745619736,
            0.04930976439569315,
            0.047867374845374504,
            0.04682287021839378,
            0.04580820863934768,
            0.04516866358910586,
            0.04479583286980865,
            0.04417241443533269,
            0.04448234469262976,
            0.04346181665174988,
            0.04191501480233603,
            0.04230060750342674,
            0.04049130745725367,
            0.0388599514692789,
            0.03768376662389107,
            0.03641758634150087,
            0.03577838083986585,
            0.03539966225567713,
            0.03496881260189009,
            0.034390197154051595,
            0.033866357235573345,
            0.033442055660593946,
            0.032920169845603184,
            0.032374788414856935,
            0.03179107058422857,
            0.031238241546873553,
            0.030811826942276743,
            0.030469605330817787,
            0.030169472806592025,
            0.029902284639893553,
            0.029668735803382123,
            0.029478641322290146,
            0.029357499982320786,
            0.029348743584694893,
            0.02975112674976414,
            0.03035509571267457,
            0.03030906009902391,
            0.029296880146297777,
            0.02839201369608142,
            0.027904744461834947,
            0.02755353109110562,
            0.02725892354350529,
            0.02700023590114231,
            0.02676659105111598,
            0.026551623176635706,
            0.026351286334006692,
            0.026162848606343273,
            0.02598437448969745,
            0.025814437552992855,
            0.025651951314990148,
            0.025496064856365522,
            0.025346095756879773,
            0.02520148550006024,
            0.025061768911217017,
            0.024926552648749878,
            0.024795499705484957,
            0.024668318002879695,
            0.02454475183701677,
            0.02442457535303958,
            0.024307587489561633,
            0.024193608006550484,
            0.024082474324244808,
            0.023974038977822548,
            0.023868167545672034,
            0.023764736946326224,
            0.02366363402556867,
            0.023564754374290616,
            0.023468001331609274,
            0.023373285138054298,
            0.023280522211332765,
            0.023189634522999273,
            0.02310054905880034,
            0.023013197348880632,
            0.02292751505669716,
            0.02284344161756835,
            0.022760919919427542,
            0.022679896019657832,
            0.022600318892931605,
            0.022522140205818827,
            0.0224453141146175,
            0.022369797083410078,
            0.02229554771981541,
            0.02222252662627752,
            0.02215069626504845,
            0.02208002083528375,
            0.022010466160885436,
            0.021941999587913822,
            0.02187458989054235,
            0.021808207184663204,
            0.0217428228483618,
            0.021678409448575475,
            0.0216149406733333,
            0.021552391269044378,
            0.021490736982363468,
            0.021429954506215935,
            0.02137002142960979,
            0.021310916190902463,
            0.021252618034224874,
            0.021195106968798137,
            0.02113836373090162,
            0.02108236974827866,
            0.02102710710678478,
            0.020972558519102385,
            0.020918707295364394,
            0.020865537315540944,
            0.020813033003458287,
            0.020761179302330842,
            0.020709961651697265,
            0.020659365965660887,
            0.020609378612343403,
            0.020559986394468443,
            0.02051117653099898,
            0.020462936639757075,
            0.02041525472096268,
            0.020368119141630864,
            0.020321518620772774,
            0.020275442215349812,
            0.020229879306933922,
            0.020184819589030147,
            0.0201402530550226,
            0.020096169986704007,
            0.020052560943357427,
            0.020009416751354703,
            0.01996672849424426,
            0.019924487503298578,
            0.019882685348496503,
            0.01984131382991546,
            0.019800364969510924
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.20436012366049291
            },
            {
                "epoch": 19,
                "error": 0.180823611160568
            },
            {
                "epoch": 29,
                "error": 0.17480389171919
            },
            {
                "epoch": 39,
                "error": 0.15815931187441265
            },
            {
                "epoch": 49,
                "error": 0.15411407437283411
            },
            {
                "epoch": 59,
                "error": 0.15290524718742013
            },
            {
                "epoch": 69,
                "error": 0.15049941494740635
            },
            {
                "epoch": 79,
                "error": 0.14911126214469048
            },
            {
                "epoch": 89,
                "error": 0.14797546657624666
            },
            {
                "epoch": 99,
                "error": 0.1470001948499977
            },
            {
                "epoch": 109,
                "error": 0.14614325963820546
            },
            {
                "epoch": 119,
                "error": 0.1453792608153412
            },
            {
                "epoch": 129,
                "error": 0.1446906678354589
            },
            {
                "epoch": 139,
                "error": 0.14406455238844748
            },
            {
                "epoch": 149,
                "error": 0.14349102347244205
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_cross_validation_0_error_plot.png",
        "weights_path": "./modelos/60n_threshold_cross_validation_0_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_cross_validation_0_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 70.76923076923077,
            "test_avg_error": 0.3559482047783731,
            "crossvalidation": true,
            "crossvalidation_fold": 1,
            "crossvalidation_size": 10,
            "crossvalidation_group": "60n_threshold_cross_validation"
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_cross_validation_1",
        "timestamp": 1714339175.758368,
        "epoch_errors": [
            0.9810589194276407,
            0.8095822912380277,
            0.5320995914577279,
            0.36393615947659447,
            0.2806512634932664,
            0.22719741005431335,
            0.182611777101139,
            0.14453415916111576,
            0.12869494209411667,
            0.11160312956189695,
            0.09557665257342694,
            0.0882779801432445,
            0.07836423274530446,
            0.07282328073061045,
            0.06955569651307912,
            0.06722425523345017,
            0.061855212744339506,
            0.059663812534019214,
            0.057946046200263286,
            0.0555603793538508,
            0.05265301137226019,
            0.050942137359769074,
            0.05012575981784655,
            0.04839629895687302,
            0.048874982454070875,
            0.0477555992379108,
            0.047171029644015997,
            0.04560018549529473,
            0.043472705203702805,
            0.043092723818067724,
            0.04162407697990929,
            0.04187931900164936,
            0.0410687013926081,
            0.04039567708597743,
            0.038939563755280786,
            0.038163366873118706,
            0.037528268753330214,
            0.037062792164661885,
            0.036658532300458235,
            0.03629059474452335,
            0.03594951473021863,
            0.03563049807735779,
            0.03533089496791296,
            0.03504944564742358,
            0.034786353919755715,
            0.03454439626308358,
            0.0343329640665667,
            0.03418398887027747,
            0.03421678407796735,
            0.03454982437163852,
            0.034488924472006605,
            0.03415228666293981,
            0.03402152873352549,
            0.033632953198700334,
            0.03331787047638907,
            0.03304466804008918,
            0.03277868255713185,
            0.032113133704032466,
            0.03163136304211119,
            0.03138256626997725,
            0.031173940924989187,
            0.03099271823093887,
            0.0308448630139909,
            0.03075591482885742,
            0.03072265314061624,
            0.030942066861717958,
            0.030477933141540736,
            0.031301020499272074,
            0.031005115302261944,
            0.030755099063703533,
            0.02987764910604231,
            0.02949268337902112,
            0.029230649287819196,
            0.02901752356301284,
            0.02883097860029051,
            0.02866167183702225,
            0.02850477633805251,
            0.028357491909857615,
            0.028218050255478615,
            0.02808526065886447,
            0.02795828204791995,
            0.02783650013986228,
            0.027719457590503756,
            0.02760681300733502,
            0.02749831701834764,
            0.027393799510604094,
            0.027293165307585816,
            0.027196397536582127,
            0.02710356955543281,
            0.027014868096025473,
            0.026930632736333376,
            0.026851420474807288,
            0.026778109396168363,
            0.02671206085684024,
            0.02665535627387957,
            0.026611076346095504,
            0.026583397979988606,
            0.02657690365300827,
            0.026595139474993628,
            0.026642969571293827,
            0.026733549093698218,
            0.02687558812981748,
            0.027019147916405084,
            0.026967072932834943,
            0.026558849984536028,
            0.02618649468270239,
            0.025978128780304463,
            0.025819138771940812,
            0.025685309973961554,
            0.025569646775149033,
            0.025471460109910853,
            0.02539543973027161,
            0.025357063554984967,
            0.025404473344317016,
            0.025683550486749668,
            0.026089955535208282,
            0.025096937781243223,
            0.024733618389684475,
            0.024526646601936774,
            0.02437095860712631,
            0.0242399415714957,
            0.024122826878961695,
            0.02401465097730258,
            0.023912893648806846,
            0.023816153646798774,
            0.023723576679121307,
            0.023634593122533912,
            0.023548791762919175,
            0.023465856103026976,
            0.023385530605389823,
            0.02330760180673052,
            0.023231887111099622,
            0.023158227715446112,
            0.023086483862440367,
            0.02301653147067039,
            0.022948259624281833,
            0.022881568628432075,
            0.022816368456833838,
            0.022752577483780696,
            0.02269012143076727,
            0.02262893248015318,
            0.02256894852208724,
            0.02251011250976166,
            0.02245237190400657,
            0.022395678192379427,
            0.02233998647091174,
            0.02228525507891956,
            0.022231445279009943,
            0.022178520975767294,
            0.022126448467680825
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.23483567392329904
            },
            {
                "epoch": 19,
                "error": 0.19953762843350106
            },
            {
                "epoch": 29,
                "error": 0.18655192838913642
            },
            {
                "epoch": 39,
                "error": 0.17686172884240764
            },
            {
                "epoch": 49,
                "error": 0.1749322114532873
            },
            {
                "epoch": 59,
                "error": 0.17284628789143947
            },
            {
                "epoch": 69,
                "error": 0.1729505412182764
            },
            {
                "epoch": 79,
                "error": 0.17077767022118875
            },
            {
                "epoch": 89,
                "error": 0.1702065973008993
            },
            {
                "epoch": 99,
                "error": 0.17060733654796856
            },
            {
                "epoch": 109,
                "error": 0.1683617134525642
            },
            {
                "epoch": 119,
                "error": 0.16995377645827775
            },
            {
                "epoch": 129,
                "error": 0.1681220587709454
            },
            {
                "epoch": 139,
                "error": 0.1666556597582006
            },
            {
                "epoch": 149,
                "error": 0.16551762723759503
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_cross_validation_1_error_plot.png",
        "weights_path": "./modelos/60n_threshold_cross_validation_1_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_cross_validation_1_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 68.46153846153847,
            "test_avg_error": 0.3750449062378941,
            "crossvalidation": true,
            "crossvalidation_fold": 2,
            "crossvalidation_size": 10,
            "crossvalidation_group": "60n_threshold_cross_validation"
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_sigmoid",
        "timestamp": 1714339668.271352,
        "epoch_errors": [
            1.1236488759148653,
            0.9845720912377945,
            0.9821992342291843,
            0.9816832612928513,
            0.9814981800336641,
            0.9814052676546655,
            0.9813447833617752,
            0.9812978677071731,
            0.9812576250233603,
            0.9812212305968857,
            0.9811873946330877,
            0.9811554537201548,
            0.9811250189903035,
            0.9810958312457642,
            0.9810676979467388,
            0.9810404642408195,
            0.9810139987960084,
            0.9809881863619916,
            0.9809629235368968,
            0.9809381161435897,
            0.9809136774634497,
            0.9808895269577925,
            0.9808655892862708,
            0.9808417935186623,
            0.9808180724805612,
            0.9807943621966504,
            0.9807706014080941,
            0.9807467311479369,
            0.9807226943629921,
            0.980698435573407,
            0.9806739005631635,
            0.980649036095958,
            0.980623789651908,
            0.9805981091812108,
            0.9805719428713967,
            0.9805452389252249,
            0.9805179453465226,
            0.9804900097315875,
            0.9804613790638055,
            0.9804319995093919,
            0.980401816212107,
            0.9803707730849346,
            0.980338812596625,
            0.9803058755510162,
            0.98027190085695,
            0.9802368252864818,
            0.9802005832189605,
            0.9801631063683585,
            0.9801243234909409,
            0.9800841600702275,
            0.9800425379756972,
            0.9799993750914326,
            0.9799545849103551,
            0.9799080760892162,
            0.979859751958878,
            0.9798095099836938,
            0.9797572411629203,
            0.9797028293662227,
            0.9796461505941234,
            0.979587072152993,
            0.9795254517327248,
            0.9794611363734732,
            0.9793939613059358,
            0.9793237486474132,
            0.9792503059333374,
            0.9791734244611193,
            0.979092877419979,
            0.9790084177768502,
            0.9789197758846153,
            0.9788266567748268,
            0.9787287370928057,
            0.9786256616288488,
            0.9785170393955483,
            0.9784024391985146,
            0.9782813846467275,
            0.97815334855093,
            0.97801774666531,
            0.977873930741855,
            0.9777211808920259,
            0.9775586972912059,
            0.9773855913246904,
            0.9772008763682442,
            0.977003458531986,
            0.9767921278866377,
            0.9765655509491176,
            0.9763222655431238,
            0.9760606795754263,
            0.9757790757735979,
            0.9754756249821219,
            0.9751484111359805,
            0.9747954713859668,
            0.9744148548232867,
            0.9740047025499295,
            0.9735633501342041,
            0.9730894505017421,
            0.9725821109900248,
            0.9720410330251789,
            0.9714666376607423,
            0.9708601566420505,
            0.9702236685597193,
            0.9695600643942148,
            0.9688729363833244,
            0.9681663969157571,
            0.9674448468066422,
            0.966712721218196,
            0.9659742441425058,
            0.9652332183926681,
            0.9644928692232587,
            0.9637557489913927,
            0.9630237005717888,
            0.962297870434939,
            0.96157875896284,
            0.9608662952523452,
            0.9601599253557501,
            0.9594587055825051,
            0.9587613953024053,
            0.9580665461218897,
            0.9573725860984275,
            0.9566778987556712,
            0.9559808971204815,
            0.9552800929396877,
            0.954574160794844,
            0.953861996180977,
            0.9531427659245908,
            0.9524159487646267,
            0.9516813636697142,
            0.9509391836356201,
            0.9501899333452128,
            0.9494344701320134,
            0.9486739490240672,
            0.9479097740422252,
            0.9471435391463517,
            0.9463769630573913,
            0.9456118225048756,
            0.9448498882364743,
            0.9440928674557076,
            0.9433423553748095,
            0.9425997974587923,
            0.9418664628602577,
            0.9411434286278432,
            0.9404315735873416,
            0.9397315803646347,
            0.939043943824976,
            0.9383689842000377,
            0.9377068633081144,
            0.9370576024909494,
            0.9364211011469445,
            0.9357971550009853,
            0.9351854734923383,
            0.9345856958711587
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.9821254100442712
            },
            {
                "epoch": 19,
                "error": 0.9819271055443938
            },
            {
                "epoch": 29,
                "error": 0.9817302833408534
            },
            {
                "epoch": 39,
                "error": 0.9815286956532592
            },
            {
                "epoch": 49,
                "error": 0.9812873515524712
            },
            {
                "epoch": 59,
                "error": 0.9809672190713629
            },
            {
                "epoch": 69,
                "error": 0.9805117759883962
            },
            {
                "epoch": 79,
                "error": 0.9798104753608993
            },
            {
                "epoch": 89,
                "error": 0.9785612057440798
            },
            {
                "epoch": 99,
                "error": 0.9759381267977811
            },
            {
                "epoch": 109,
                "error": 0.9717188633566877
            },
            {
                "epoch": 119,
                "error": 0.966899305221884
            },
            {
                "epoch": 129,
                "error": 0.9611248593797083
            },
            {
                "epoch": 139,
                "error": 0.9551910109861381
            },
            {
                "epoch": 149,
                "error": 0.9503754342174382
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_sigmoid_error_plot.png",
        "weights_path": "./modelos/60n_threshold_sigmoid_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_sigmoid_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 3.8461538461538436,
            "test_avg_error": 0.9501321638072352,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='sigmoid', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value=1.0), op=Div(), right=BinOp(left=Constant(value=1.0), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))))], decorator_list=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='sigmoid_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sigF', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[])))), Return(value=BinOp(left=Name(id='sigF', ctx=Load()), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='sigF', ctx=Load()))))], decorator_list=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.01,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_swish",
        "timestamp": 1714340017.887996,
        "epoch_errors": [
            0.98084977069702,
            0.9538035431196172,
            0.9017926806917699,
            0.8470192361249885,
            0.790220175805722,
            0.7430889389283909,
            0.7099826694755066,
            0.6825799339965405,
            0.6576387366488471,
            0.6341753661070646,
            0.6119598369481135,
            0.5911493244305126,
            0.5719291743785563,
            0.5543529002064622,
            0.5383449112827012,
            0.5237623606316365,
            0.5104511020628089,
            0.4982694250849976,
            0.48709013204322993,
            0.4767975505494049,
            0.46728609353948813,
            0.45846042239340606,
            0.45023602564876003,
            0.4425395692159707,
            0.4353088082001469,
            0.4284920158277016,
            0.42204698266654833,
            0.4159397084286414,
            0.41014292909135797,
            0.40463461089762626,
            0.3993965296407986,
            0.3944130424860149,
            0.38967013284576457,
            0.38515475750320144,
            0.38085446632253406,
            0.3767572261890962,
            0.3728513735518735,
            0.3691256341527817,
            0.36556916877193724,
            0.3621716211405387,
            0.3589231563430852,
            0.3558144856594175,
            0.35283687801987657,
            0.3499821601247864,
            0.3472427077268388,
            0.3446114303132875,
            0.34208175094116583,
            0.3396475825349672,
            0.33730330164439287,
            0.3350437204734307,
            0.33286405788630796,
            0.33075991002486044,
            0.3287272211051658,
            0.3267622548852719,
            0.32486156720924375,
            0.32302197994051707,
            0.3212405565065044,
            0.3195145791922888,
            0.3178415282480859,
            0.31621906281485823,
            0.31464500362534,
            0.31311731740293375,
            0.3116341028571418,
            0.3101935781594326,
            0.30879406977615914,
            0.30743400253349285,
            0.3061118907918573,
            0.30482633061289066,
            0.30357599280933106,
            0.302359616776791,
            0.3011760050153658,
            0.30002401825815156,
            0.2989025711324899,
            0.29781062828815025,
            0.2967472009343148,
            0.29571134373433816,
            0.2947021520135652,
            0.2937187592411938,
            0.29276033475218743,
            0.29182608167968477,
            0.2909152350722186,
            0.29002706017345936,
            0.2891608508451414,
            0.28831592811638973,
            0.2874916388448877,
            0.286687354477248,
            0.28590246989761287,
            0.28513640235495324,
            0.28438859046077497,
            0.283658493250021,
            0.2829455892988996,
            0.282249375894149,
            0.2815693682489795,
            0.28090509876150943,
            0.2802561163120411,
            0.2796219855959805,
            0.27900228648958253,
            0.27839661344604844,
            0.27780457491978255,
            0.27722579281687826,
            0.27665990197011,
            0.2761065496368972,
            0.27556539501886795,
            0.2750361088017927,
            0.27451837271476487,
            0.2740118791076284,
            0.27351633054572455,
            0.2730314394211204,
            0.272556927579535,
            0.2720925259622584,
            0.27163797426238306,
            0.27119302059473593,
            0.27075742117892976,
            0.2703309400349746,
            0.26991334869094874,
            0.269504425902226,
            0.26910395738180254,
            0.268711735541279,
            0.2683275592420764,
            0.26795123355648004,
            0.2675825695381304,
            0.26722138400158585,
            0.2668674993106057,
            0.26652074317480895,
            0.26618094845438595,
            0.2658479529725416,
            0.26552159933536973,
            0.26520173475886727,
            0.26488821090280606,
            0.2645808837111887,
            0.2642796132590319,
            0.2639842636052278,
            0.26369470265122996,
            0.2634108020053504,
            0.263132436852425,
            0.26285948582864205,
            0.2625918309013275,
            0.2623293572534802,
            0.26207195317286974,
            0.26181950994551373,
            0.26157192175335503,
            0.26132908557596374,
            0.2610909010961121,
            0.2608572706090491,
            0.26062809893533867,
            0.2604032933371028,
            0.26018276343753827,
            0.259966421143572,
            0.25975418057151983,
            0.2595459579756347
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.6904121985413069
            },
            {
                "epoch": 19,
                "error": 0.5730781542148503
            },
            {
                "epoch": 29,
                "error": 0.523146419805304
            },
            {
                "epoch": 39,
                "error": 0.49819745249330344
            },
            {
                "epoch": 49,
                "error": 0.4851396137750603
            },
            {
                "epoch": 59,
                "error": 0.4777732806166042
            },
            {
                "epoch": 69,
                "error": 0.47338039829357886
            },
            {
                "epoch": 79,
                "error": 0.470692311721505
            },
            {
                "epoch": 89,
                "error": 0.46903146998126594
            },
            {
                "epoch": 99,
                "error": 0.4680090946112687
            },
            {
                "epoch": 109,
                "error": 0.4673954474645546
            },
            {
                "epoch": 119,
                "error": 0.467051702363147
            },
            {
                "epoch": 129,
                "error": 0.46689108832657616
            },
            {
                "epoch": 139,
                "error": 0.4668567118341778
            },
            {
                "epoch": 149,
                "error": 0.46690934842265813
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_swish_error_plot.png",
        "weights_path": "./modelos/60n_threshold_swish_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_swish_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 56.92307692307692,
            "test_avg_error": 0.6459759322647488,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='swish', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='x', ctx=Load()), op=Mult(), right=Call(func=Name(id='sigmoid', ctx=Load()), args=[BinOp(left=Constant(value=1), op=Mult(), right=Name(id='x', ctx=Load()))], keywords=[])))], decorator_list=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='swish_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sigmoid_beta_x', ctx=Store())], value=Call(func=Name(id='sigmoid', ctx=Load()), args=[BinOp(left=Constant(value=1), op=Mult(), right=Name(id='x', ctx=Load()))], keywords=[])), Return(value=BinOp(left=Name(id='sigmoid_beta_x', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Constant(value=1), op=Mult(), right=Name(id='x', ctx=Load())), op=Mult(), right=Name(id='sigmoid_beta_x', ctx=Load())), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='sigmoid_beta_x', ctx=Load())))))], decorator_list=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.01,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_selu",
        "timestamp": 1714340456.084698,
        "epoch_errors": [
            0.9085447587091956,
            0.8288060853264567,
            0.8036138746504836,
            0.7901318340035176,
            0.78143394783656,
            0.7753309827108439,
            0.7708048112857295,
            0.767121054166641,
            0.7641187271193544,
            0.7614408116494451,
            0.7591879759343959,
            0.7572238753876692,
            0.7555330211597471,
            0.7539558791723975,
            0.7525033831335317,
            0.751190255486474,
            0.749913661414521,
            0.7488183738500732,
            0.7477400265556706,
            0.7466212733145688,
            0.7456635035720506,
            0.7446505819716177,
            0.743730003371084,
            0.7427777182511629,
            0.7419575042283038,
            0.7411310822796412,
            0.7402486872894807,
            0.7394131373095546,
            0.738689315720767,
            0.737881179843265,
            0.7371774974082707,
            0.7363462093652358,
            0.7356224720146811,
            0.7348764906496557,
            0.7341558702145587,
            0.7334787799743088,
            0.732744992411441,
            0.7320249541843296,
            0.7312522454192996,
            0.7305922926588132,
            0.7298441860023216,
            0.7291882230795931,
            0.7284675472087784,
            0.7277211170929052,
            0.7269874318679783,
            0.7263050755117004,
            0.7256487647448683,
            0.7248073588421982,
            0.7241489270335113,
            0.7233764393405537,
            0.7226918265014888,
            0.7218593568142843,
            0.7210809346428212,
            0.7203733848948861,
            0.7195436201796563,
            0.7188611396513552,
            0.7180443846889423,
            0.7172364062239873,
            0.716458572790304,
            0.7155442473262122,
            0.7148188930085364,
            0.713920484967469,
            0.7130519777430709,
            0.7121774872561037,
            0.7113794862134566,
            0.7104707142029794,
            0.709514946921173,
            0.7086239521012558,
            0.707742658408872,
            0.7066602012423983,
            0.7057927065441838,
            0.7047999744915222,
            0.7038025434540279,
            0.702847181728266,
            0.7018115079516598,
            0.7007863845456349,
            0.6997521755529998,
            0.698637095821997,
            0.6976080124036012,
            0.6964879702198846,
            0.6954247085556489,
            0.6943142076635246,
            0.693238002555128,
            0.6919351582012421,
            0.6908954572234043,
            0.689598476592598,
            0.6885099779799465,
            0.6872368291487423,
            0.6860988435556624,
            0.6847667883654039,
            0.6836431962388241,
            0.6823171341522065,
            0.6811024891446541,
            0.6797198668612321,
            0.6784301331915169,
            0.6772183167915299,
            0.6757757265696723,
            0.674430612844675,
            0.6731875433868002,
            0.6718560899207204,
            0.6703518555476607,
            0.669039472283326,
            0.6677257902296994,
            0.6661864223032966,
            0.6647773470756542,
            0.6634219007948468,
            0.6619071622112492,
            0.6605466674943273,
            0.6591174972087777,
            0.6577442281057158,
            0.6562291965688736,
            0.6546909107574284,
            0.6532985280311131,
            0.6519134207203994,
            0.6502808344730032,
            0.6488877466572023,
            0.6474110719016222,
            0.6458672309100858,
            0.6445247894711481,
            0.642895193957154,
            0.6414345223365666,
            0.6399583402633778,
            0.6383901193455577,
            0.6369824934365153,
            0.6354624595108948,
            0.6339393478713955,
            0.6324169039475215,
            0.6309617561005956,
            0.6294793405929068,
            0.6278839954178111,
            0.6265005638771814,
            0.6248693209770392,
            0.6234487628546711,
            0.6221302560860333,
            0.6204601978191684,
            0.6190145343813758,
            0.6175351359093991,
            0.6160354017658374,
            0.6144765137547807,
            0.6130703835085585,
            0.6115784832279747,
            0.6101246703566892,
            0.6086871576043863,
            0.60728350388737,
            0.6058380112874535,
            0.6044287849500574,
            0.6029718446004689,
            0.6015855605987416,
            0.6001672594666838,
            0.598775135597151
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.8187568446786384
            },
            {
                "epoch": 19,
                "error": 0.8160127269120423
            },
            {
                "epoch": 29,
                "error": 0.8140719242622931
            },
            {
                "epoch": 39,
                "error": 0.8117170192690987
            },
            {
                "epoch": 49,
                "error": 0.8087969634504071
            },
            {
                "epoch": 59,
                "error": 0.8051665332790171
            },
            {
                "epoch": 69,
                "error": 0.7996958023269959
            },
            {
                "epoch": 79,
                "error": 0.7933293173383356
            },
            {
                "epoch": 89,
                "error": 0.7852191084927432
            },
            {
                "epoch": 99,
                "error": 0.7761820316186774
            },
            {
                "epoch": 109,
                "error": 0.7677172133019582
            },
            {
                "epoch": 119,
                "error": 0.7579544423887473
            },
            {
                "epoch": 129,
                "error": 0.7480893683428887
            },
            {
                "epoch": 139,
                "error": 0.7375466516659496
            },
            {
                "epoch": 149,
                "error": 0.7281402089081532
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_selu_error_plot.png",
        "weights_path": "./modelos/60n_threshold_selu_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_selu_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 26.923076923076916,
            "test_avg_error": 0.9925271271460478,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='selu', args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='lambda_constant'), arg(arg='alpha_constant')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1.0507), Constant(value=1.67326)]), body=[Return(value=BinOp(left=Name(id='lambda_constant', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), Name(id='x', ctx=Load()), BinOp(left=Name(id='alpha_constant', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)))], keywords=[])))], decorator_list=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='selu_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='lambda_constant'), arg(arg='alpha_constant')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1.0507), Constant(value=1.67326)]), body=[Return(value=BinOp(left=Name(id='lambda_constant', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), Constant(value=1), BinOp(left=Name(id='alpha_constant', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))], keywords=[])))], decorator_list=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.01,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_sigmoid",
        "timestamp": 1714341136.395962,
        "epoch_errors": [
            1.0115389468003142,
            0.9820194367099362,
            0.9818172192292969,
            0.9816518538121398,
            0.9814989514965956,
            0.9813454264754552,
            0.9811779899736427,
            0.9809808709732936,
            0.9807332425950157,
            0.9804056856365948,
            0.9799551360046984,
            0.9793176070792019,
            0.9783972397469031,
            0.9770479456577152,
            0.9750402621068969,
            0.9720026182560986,
            0.9673046227661226,
            0.960008199065965,
            0.9504874964322163,
            0.9411377701525595,
            0.9325884448711468,
            0.9245908610168075,
            0.9168373010729374,
            0.9087011814536128,
            0.8994120748887091,
            0.8884583503982351,
            0.8759336946488165,
            0.8622680250002149,
            0.8477587463885949,
            0.8323673983780966,
            0.815794339780672,
            0.7977550295457699,
            0.7782239629220101,
            0.7575003136791005,
            0.7361236538477957,
            0.7146826153263308,
            0.6936176232084764,
            0.6731455843067333,
            0.6532882534313852,
            0.6339336228787682,
            0.6149257405205167,
            0.596188622835784,
            0.5777987074675057,
            0.55993166112926,
            0.5427609616060243,
            0.526403492287903,
            0.5109165684337384,
            0.4963132114306169,
            0.48257649384978774,
            0.4696698913889733,
            0.45754506932016376,
            0.4461479066717388,
            0.43542288088322034,
            0.4253159338315733,
            0.41577611711977325,
            0.40675638567413985,
            0.3982138626193687,
            0.3901098043539986,
            0.38240940569960896,
            0.37508152185340005,
            0.36809834700426275,
            0.3614350714898576,
            0.3550695324412991,
            0.3489818711467113,
            0.3431542100054206,
            0.3375703605866665,
            0.33221557100705973,
            0.32707631604837756,
            0.3221401285063231,
            0.31739546655535816,
            0.3128316100952723,
            0.3084385789526667,
            0.3042070668176005,
            0.30012838623261434,
            0.2961944213507003,
            0.2923975863139882,
            0.2887307879220388,
            0.2851873917914013,
            0.28176119151805,
            0.2784463805019383,
            0.2752375261299655,
            0.2721295459847516,
            0.2691176856934436,
            0.2661974979920798,
            0.2633648225890793,
            0.26061576648403256,
            0.2579466845324064,
            0.2553541602185813,
            0.2528349867697223,
            0.25038614887132515,
            0.24800480530487903,
            0.24568827281336428,
            0.2434340114260866,
            0.24123961136787836,
            0.23910278156751108,
            0.23702133968795808,
            0.23499320353812403,
            0.23301638369320693,
            0.23108897714428686,
            0.22920916180934708,
            0.22737519176017518,
            0.2255853930463509,
            0.22383816002425277,
            0.22213195212302447,
            0.2204652909989038,
            0.21883675804335218,
            0.21724499221847005,
            0.21568868819523027,
            0.2141665947664013,
            0.21267751349759717,
            0.2112202975682312,
            0.2097938507413976,
            0.20839712639060762,
            0.20702912650453392,
            0.20568890059098402,
            0.20437554440956382,
            0.20308819847912418,
            0.20182604632951312,
            0.20058831249457976,
            0.19937426027110106,
            0.1981831892925152,
            0.19701443298396984,
            0.19586735597443347,
            0.19474135154213199,
            0.19363583916246557,
            0.19255026221485597,
            0.1914840858891591,
            0.19043679531572028,
            0.18940789392781018,
            0.18839690205232146,
            0.18740335571484915,
            0.1864268056387501,
            0.1854668164140942,
            0.18452296581111735,
            0.1835948442132147,
            0.18268205414615002,
            0.18178420988249192,
            0.18090093710292732,
            0.1800318725988698,
            0.17917666400339785,
            0.1783349695400033,
            0.17750645778085164,
            0.1766908074081903,
            0.17588770697426195,
            0.1750968546565478,
            0.17431795800641095,
            0.17355073369027452,
            0.17279490722331797,
            0.17205021269637077,
            0.17131639249718594
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.980237801741272
            },
            {
                "epoch": 19,
                "error": 0.9412493463918656
            },
            {
                "epoch": 29,
                "error": 0.8340845119819237
            },
            {
                "epoch": 39,
                "error": 0.6553727567268194
            },
            {
                "epoch": 49,
                "error": 0.5149280921944012
            },
            {
                "epoch": 59,
                "error": 0.4408987995855455
            },
            {
                "epoch": 69,
                "error": 0.39965318968666613
            },
            {
                "epoch": 79,
                "error": 0.3733841745778852
            },
            {
                "epoch": 89,
                "error": 0.3552363397972347
            },
            {
                "epoch": 99,
                "error": 0.3418881928278237
            },
            {
                "epoch": 109,
                "error": 0.3316103991351483
            },
            {
                "epoch": 119,
                "error": 0.32343431316144616
            },
            {
                "epoch": 129,
                "error": 0.31673414617700973
            },
            {
                "epoch": 139,
                "error": 0.3110989593684289
            },
            {
                "epoch": 149,
                "error": 0.30626143011879375
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_sigmoid_error_plot.png",
        "weights_path": "./modelos/60n_threshold_sigmoid_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_sigmoid_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 62.30769230769231,
            "test_avg_error": 0.46587598411747505,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='sigmoid', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value=1.0), op=Div(), right=BinOp(left=Constant(value=1.0), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))))], decorator_list=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='sigmoid_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sigF', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[])))), Return(value=BinOp(left=Name(id='sigF', ctx=Load()), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='sigF', ctx=Load()))))], decorator_list=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.05,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_swish",
        "timestamp": 1714341488.040464,
        "epoch_errors": [
            0.9802075798371402,
            0.9521076457986001,
            0.9060021843547293,
            0.852507639308093,
            0.7961549827781348,
            0.7497904018522399,
            0.7147306589889534,
            0.6860761327193958,
            0.6612828443966632,
            0.6384719812242969,
            0.616570523938397,
            0.5951873530349321,
            0.5743924991590293,
            0.5545277705463333,
            0.5359910406528412,
            0.5190494982801673,
            0.5037680758740104,
            0.4900482293727143,
            0.477708257277476,
            0.466549934097641,
            0.4563943088681312,
            0.44709301861888984,
            0.43852691590052767,
            0.43060049644188025,
            0.4232361980053518,
            0.41636988002440145,
            0.4099475842270264,
            0.4039233005308534,
            0.3982574252667165,
            0.39291566580726117,
            0.3878682234748932,
            0.38308914671101474,
            0.37855578825518954,
            0.3742483297085048,
            0.3701493577058799,
            0.3662434883965646,
            0.36251704173513377,
            0.35895776656988276,
            0.3555546146692856,
            0.35229755893435205,
            0.3491774492129106,
            0.34618589854457116,
            0.3433151930394164,
            0.3405582195272344,
            0.33790840626315727,
            0.3353596731077165,
            0.33290638858707905,
            0.3305433320323476,
            0.32826565959314186,
            0.32606887334416634,
            0.3239487929880554,
            0.3219015298385328,
            0.3199234628756274,
            0.318011216724053,
            0.31616164143524317,
            0.3143717939657569,
            0.3126389212481603,
            0.3109604447502279,
            0.30933394641729417,
            0.3077571558923251,
            0.3062279389093707,
            0.3047442867586931,
            0.3033043067258423,
            0.3019062134121174,
            0.30054832084984895,
            0.2992290353324874,
            0.2979468488863395,
            0.2967003333176341,
            0.2954881347753368,
            0.29430896877645685,
            0.2931616156465171,
            0.2920449163332646,
            0.2909577685565392,
            0.28989912326151657,
            0.28886798134634223,
            0.2878633906384668,
            0.28688444309685457,
            0.2859302722197552,
            0.28500005063986855,
            0.28409298789063236,
            0.2832083283290097,
            0.28234534920158977,
            0.28150335884210786,
            0.2806816949896152,
            0.2798797232175356,
            0.2790968354647706,
            0.2783324486607986,
            0.2775860034374746,
            0.2768569629208752,
            0.27614481159715554,
            0.275449054246891,
            0.27476921494290824,
            0.27410483610700964,
            0.27345547762143085,
            0.27282071599120444,
            0.27220014355395156,
            0.27159336773389803,
            0.27100001033719573,
            0.2704197068858589,
            0.26985210598783566,
            0.26929686874095754,
            0.2687536681686466,
            0.26822218868545433,
            0.26770212559062945,
            0.2671931845880521,
            0.2666950813309883,
            0.2662075409902163,
            0.2657302978442001,
            0.2652630948900399,
            0.26480568347403827,
            0.2643578229407864,
            0.2639192802997421,
            0.2634898299083324,
            0.2630692531706827,
            0.26265733825111787,
            0.2622538798016316,
            0.26185867870258034,
            0.2614715418158819,
            0.26109228175005395,
            0.26072071663646357,
            0.2603566699161866,
            0.2599999701369226,
            0.2596504507594261,
            0.2593079499729664,
            0.25897231051932523,
            0.2586433795249029,
            0.25832100834050226,
            0.25800505238839183,
            0.25769537101627404,
            0.25739182735780003,
            0.25709428819930075,
            0.25680262385240665,
            0.2565167080322637,
            0.25623641774106115,
            0.2559616331565945,
            0.2556922375256216,
            0.25542811706176466,
            0.25516916084772884,
            0.25491526074163456,
            0.2546663112872438,
            0.2544222096279052,
            0.2541828554240235,
            0.2539481507738907,
            0.253718000137706,
            0.25349231026464564,
            0.25327099012282156,
            0.25305395083199766,
            0.25284110559894035,
            0.2526323696552623,
            0.25242766019766194
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.6675457744797817
            },
            {
                "epoch": 19,
                "error": 0.5438441802982504
            },
            {
                "epoch": 29,
                "error": 0.5049298950431883
            },
            {
                "epoch": 39,
                "error": 0.48771695471557874
            },
            {
                "epoch": 49,
                "error": 0.4781555554377639
            },
            {
                "epoch": 59,
                "error": 0.47254744185888603
            },
            {
                "epoch": 69,
                "error": 0.4692141819168874
            },
            {
                "epoch": 79,
                "error": 0.46725840688951037
            },
            {
                "epoch": 89,
                "error": 0.4661699654867953
            },
            {
                "epoch": 99,
                "error": 0.4656423506468836
            },
            {
                "epoch": 109,
                "error": 0.4654792921150407
            },
            {
                "epoch": 119,
                "error": 0.46554900425280565
            },
            {
                "epoch": 129,
                "error": 0.46576162346238825
            },
            {
                "epoch": 139,
                "error": 0.46605647161449953
            },
            {
                "epoch": 149,
                "error": 0.4663934526647868
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_swish_error_plot.png",
        "weights_path": "./modelos/60n_threshold_swish_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_swish_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 54.61538461538461,
            "test_avg_error": 0.6776817227564637,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='swish', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='x', ctx=Load()), op=Mult(), right=Call(func=Name(id='sigmoid', ctx=Load()), args=[BinOp(left=Constant(value=1), op=Mult(), right=Name(id='x', ctx=Load()))], keywords=[])))], decorator_list=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='swish_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sigmoid_beta_x', ctx=Store())], value=Call(func=Name(id='sigmoid', ctx=Load()), args=[BinOp(left=Constant(value=1), op=Mult(), right=Name(id='x', ctx=Load()))], keywords=[])), Return(value=BinOp(left=Name(id='sigmoid_beta_x', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Constant(value=1), op=Mult(), right=Name(id='x', ctx=Load())), op=Mult(), right=Name(id='sigmoid_beta_x', ctx=Load())), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='sigmoid_beta_x', ctx=Load())))))], decorator_list=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.01,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_hard_swish",
        "timestamp": 1714341913.207773,
        "epoch_errors": [
            0.9811911839883669,
            0.9569111379130383,
            0.9182873820103701,
            0.8749214103976011,
            0.8302557613304,
            0.7890279478031382,
            0.7553911920991447,
            0.7282777621057589,
            0.7054525577862303,
            0.6849291563929346,
            0.6654677932383899,
            0.6465528119622367,
            0.6280142846065201,
            0.6098004577782434,
            0.5919457957996087,
            0.5746166218200982,
            0.5580949557574685,
            0.5426578415715977,
            0.5283432377971985,
            0.5151395586865398,
            0.5030026625474069,
            0.4918581067677728,
            0.48160223558091547,
            0.47217590987413083,
            0.46353512808605773,
            0.4556297341457477,
            0.4484387907472215,
            0.44186663525540615,
            0.4358142134433247,
            0.43025407508253555,
            0.4250844703528683,
            0.4202683696447261,
            0.4157380954573544,
            0.41146742935364566,
            0.4074249641122969,
            0.4036485161048968,
            0.4000486215196663,
            0.3966488866877914,
            0.39341022281201843,
            0.3903202752880364,
            0.3873897918228572,
            0.384601850077375,
            0.3819414691904258,
            0.3793995615945413,
            0.37694601671479183,
            0.3746201091071069,
            0.3724004857176479,
            0.37026269155221114,
            0.368200048399436,
            0.36621849907347875,
            0.36432353162202763,
            0.3624842695124489,
            0.3607421221933984,
            0.3590374284068659,
            0.3574195802828164,
            0.35583204030743903,
            0.3542923584541861,
            0.35282705102619466,
            0.3513991416605545,
            0.35001590424784834,
            0.3486787790560264,
            0.3473919628607347,
            0.3461414156062882,
            0.34494118365398985,
            0.34376941061204247,
            0.34264182936837373,
            0.34153946409497227,
            0.34045500828977193,
            0.33941772373240686,
            0.3384124084307495,
            0.33743354678430143,
            0.33648836450101666,
            0.3355486807788556,
            0.33465120821602073,
            0.33380237804661816,
            0.3329385503296572,
            0.33211898744483376,
            0.3313248965122651,
            0.330548048701065,
            0.3297907979734044,
            0.32905173966790296,
            0.3283357114741242,
            0.32763983895796417,
            0.32695974837615727,
            0.3262988070153263,
            0.325648328204432,
            0.32502083106879337,
            0.32439816645240876,
            0.3237933724773044,
            0.32320474850340614,
            0.32262707201528373,
            0.32206386844344825,
            0.32151600399219554,
            0.3209742783080472,
            0.32044979213869174,
            0.31993782449432523,
            0.31943643224675583,
            0.31894737156316355,
            0.31847556047840314,
            0.31800740048474885,
            0.31755086841078517,
            0.3171100038038061,
            0.31667775727276126,
            0.3162535422285539,
            0.3158395816598023,
            0.31543303515627896,
            0.3150362442433157,
            0.31465029110420323,
            0.31427185108586675,
            0.3138993351355215,
            0.31353916028889595,
            0.3131775648629372,
            0.31282734251961464,
            0.3124888346033577,
            0.31214808207154593,
            0.31181836985281763,
            0.3114972173046099,
            0.3111843439844248,
            0.31087836711920197,
            0.3105772962636417,
            0.31028366535522073,
            0.30999545351705565,
            0.3097166066401209,
            0.3094353836998595,
            0.3091630811510961,
            0.308892837949132,
            0.30863028556406197,
            0.3083726153142164,
            0.308121489081792,
            0.30787195148128615,
            0.3076306248470669,
            0.3073948050807003,
            0.30716373687364434,
            0.3069354155879427,
            0.3067117201999463,
            0.30649576721647687,
            0.30628399688646635,
            0.30607307223820107,
            0.30586820351431004,
            0.3056686784228724,
            0.30547361850228655,
            0.3052809238099279,
            0.30508912311590397,
            0.3049074704688723,
            0.30472594141379333,
            0.30454481776715764,
            0.3043749646207331,
            0.3042021403896846,
            0.3040389095484182,
            0.30387208904380286
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.7083110906208038
            },
            {
                "epoch": 19,
                "error": 0.5780226161449851
            },
            {
                "epoch": 29,
                "error": 0.5264656943136783
            },
            {
                "epoch": 39,
                "error": 0.5091558738083979
            },
            {
                "epoch": 49,
                "error": 0.5005266331730499
            },
            {
                "epoch": 59,
                "error": 0.49518425795980037
            },
            {
                "epoch": 69,
                "error": 0.49203796909952324
            },
            {
                "epoch": 79,
                "error": 0.4902924018791469
            },
            {
                "epoch": 89,
                "error": 0.4893004422802565
            },
            {
                "epoch": 99,
                "error": 0.4886600629588729
            },
            {
                "epoch": 109,
                "error": 0.4883038724973858
            },
            {
                "epoch": 119,
                "error": 0.4880539389266626
            },
            {
                "epoch": 129,
                "error": 0.487866627583826
            },
            {
                "epoch": 139,
                "error": 0.48780432861703443
            },
            {
                "epoch": 149,
                "error": 0.48779583054608217
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_hard_swish_error_plot.png",
        "weights_path": "./modelos/60n_threshold_hard_swish_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_hard_swish_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 55.38461538461539,
            "test_avg_error": 0.6889629172584387,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='hard_swish', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Name(id='x', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Constant(value=3)), Constant(value=0)], keywords=[]), Constant(value=6)], keywords=[])), op=Div(), right=Constant(value=6)))], decorator_list=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='hard_swish_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='x', ctx=Load()), ops=[Lt()], comparators=[UnaryOp(op=USub(), operand=Constant(value=3))]), Constant(value=0), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='x', ctx=Load()), ops=[LtE()], comparators=[Constant(value=3)]), BinOp(left=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='x', ctx=Load())), op=Add(), right=Constant(value=3)), op=Div(), right=Constant(value=6)), Constant(value=1)], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.01,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_selu",
        "timestamp": 1714342311.006539,
        "epoch_errors": [
            0.9129432010038736,
            0.8373139220648202,
            0.8102776506248915,
            0.7965333958716427,
            0.7878012238767182,
            0.7818264326736437,
            0.7773810786381267,
            0.7739726916243072,
            0.7710318083094888,
            0.768654106913446,
            0.7664042432181917,
            0.7645057337679944,
            0.7626952682215763,
            0.7613158769018116,
            0.7597325939425547,
            0.7584500513613521,
            0.7571837338304985,
            0.7561382943798408,
            0.7548952510438284,
            0.7538762420884954,
            0.753005746418555,
            0.7519255035432479,
            0.7511570205893182,
            0.7501308740139244,
            0.7492346018393499,
            0.7483864091722943,
            0.747653681188871,
            0.7467178087569653,
            0.745954790156671,
            0.7452484827021072,
            0.744317078830928,
            0.7436410550355949,
            0.7428019300540051,
            0.742093664650311,
            0.7412235246705224,
            0.7404671413764613,
            0.7396758148762698,
            0.7389157283470605,
            0.7381753961015777,
            0.7373724698836202,
            0.7365547792595656,
            0.7357055418632046,
            0.7348414762202146,
            0.7339970188432094,
            0.7331271723633241,
            0.7321336295731316,
            0.7311791243220588,
            0.730216484262811,
            0.7290754334028231,
            0.7279869112849221,
            0.726826381245671,
            0.7255917316050445,
            0.7244037347863629,
            0.723109816097062,
            0.7218726716211101,
            0.7206490030114432,
            0.7194104069701763,
            0.7182848588050624,
            0.7171318395435275,
            0.7159053572775113,
            0.7148345806547186,
            0.7137948228350127,
            0.7125723090637038,
            0.7115208514524082,
            0.710422004655525,
            0.7092696596024191,
            0.7082810703612487,
            0.7071274984096517,
            0.705970073342863,
            0.704917041434683,
            0.7037820495056376,
            0.7026041222418092,
            0.7015626134353986,
            0.7003838815061161,
            0.6992553801928719,
            0.6981327301311177,
            0.6968707648416532,
            0.6957320100285128,
            0.6945405921653858,
            0.6932284928858924,
            0.692073550068736,
            0.6908473753391001,
            0.6895227151238665,
            0.6882933373014527,
            0.687035275241684,
            0.6857551408807068,
            0.6843734001657166,
            0.6830574450411518,
            0.681698137999869,
            0.6803671447971158,
            0.6789830069272471,
            0.677553213619284,
            0.6761144805357031,
            0.6747256162335042,
            0.6733645127446121,
            0.6719088082237479,
            0.6704962177757737,
            0.6689426957404844,
            0.6675778510521377,
            0.6661456046135672,
            0.6645755545914057,
            0.6630888524947783,
            0.6616163235608947,
            0.6600973709004241,
            0.6585521787963045,
            0.6570974748677434,
            0.6554451091010965,
            0.6539224098700293,
            0.652413132380182,
            0.6508342646641992,
            0.649233210137381,
            0.6476566101326996,
            0.6461509803493365,
            0.6444482567787276,
            0.6429323013195096,
            0.6413418158655074,
            0.6397784558640769,
            0.6381418501370532,
            0.6365711383259067,
            0.6350353140101116,
            0.6333784119017571,
            0.6318245612236331,
            0.6302120830014915,
            0.6286129766215466,
            0.6269845928914856,
            0.6253615677750416,
            0.6238645937645634,
            0.6222349283324023,
            0.6206665860488194,
            0.6189818455002714,
            0.617545984291342,
            0.6159297172570868,
            0.6143750284595652,
            0.6128237843556255,
            0.6112513254371751,
            0.6096937793199586,
            0.6081350260468789,
            0.6066845909855813,
            0.6050952005856037,
            0.6036152869224621,
            0.6021945879401696,
            0.6005827367693246,
            0.5990574700147806,
            0.5976196088365803,
            0.5961244801258639,
            0.5945988173630566,
            0.5932065340067206,
            0.5916643529912646,
            0.5902755313504371,
            0.5888158668399462
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.8077399594854777
            },
            {
                "epoch": 19,
                "error": 0.8036150632925929
            },
            {
                "epoch": 29,
                "error": 0.800945049787567
            },
            {
                "epoch": 39,
                "error": 0.7984649492946947
            },
            {
                "epoch": 49,
                "error": 0.7939006013897119
            },
            {
                "epoch": 59,
                "error": 0.7872421591786688
            },
            {
                "epoch": 69,
                "error": 0.7831775411371509
            },
            {
                "epoch": 79,
                "error": 0.7771882244942411
            },
            {
                "epoch": 89,
                "error": 0.7691661177771028
            },
            {
                "epoch": 99,
                "error": 0.7605124111886855
            },
            {
                "epoch": 109,
                "error": 0.7527541616232412
            },
            {
                "epoch": 119,
                "error": 0.7439365827645114
            },
            {
                "epoch": 129,
                "error": 0.7346152300427325
            },
            {
                "epoch": 139,
                "error": 0.7252863029125538
            },
            {
                "epoch": 149,
                "error": 0.7166059646359494
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_selu_error_plot.png",
        "weights_path": "./modelos/60n_threshold_selu_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_selu_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 34.61538461538461,
            "test_avg_error": 0.9951411610936245,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='selu', args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='lambda_constant'), arg(arg='alpha_constant')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1.0507), Constant(value=1.67326)]), body=[Return(value=BinOp(left=Name(id='lambda_constant', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), Name(id='x', ctx=Load()), BinOp(left=Name(id='alpha_constant', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)))], keywords=[])))], decorator_list=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='selu_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='lambda_constant'), arg(arg='alpha_constant')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1.0507), Constant(value=1.67326)]), body=[Return(value=BinOp(left=Name(id='lambda_constant', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), Constant(value=1), BinOp(left=Name(id='alpha_constant', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))], keywords=[])))], decorator_list=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.01,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_mish",
        "timestamp": 1714342688.770733,
        "epoch_errors": [
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN,
            NaN
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": NaN
            },
            {
                "epoch": 19,
                "error": NaN
            },
            {
                "epoch": 29,
                "error": NaN
            },
            {
                "epoch": 39,
                "error": NaN
            },
            {
                "epoch": 49,
                "error": NaN
            },
            {
                "epoch": 59,
                "error": NaN
            },
            {
                "epoch": 69,
                "error": NaN
            },
            {
                "epoch": 79,
                "error": NaN
            },
            {
                "epoch": 89,
                "error": NaN
            },
            {
                "epoch": 99,
                "error": NaN
            },
            {
                "epoch": 109,
                "error": NaN
            },
            {
                "epoch": 119,
                "error": NaN
            },
            {
                "epoch": 129,
                "error": NaN
            },
            {
                "epoch": 139,
                "error": NaN
            },
            {
                "epoch": 149,
                "error": NaN
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_mish_error_plot.png",
        "weights_path": "./modelos/60n_threshold_mish_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_mish_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 0.0,
            "test_avg_error": NaN,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='mish', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='x', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='tanh', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='log1p', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])], keywords=[])], keywords=[])))], decorator_list=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='mish_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='omega', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=2)), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))), Assign(targets=[Name(id='delta', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value=4), op=Mult(), right=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Constant(value=1))), op=Add(), right=BinOp(left=Constant(value=4), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[BinOp(left=Constant(value=2), op=Mult(), right=Name(id='x', ctx=Load()))], keywords=[]))), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[BinOp(left=Constant(value=3), op=Mult(), right=Name(id='x', ctx=Load()))], keywords=[])), op=Add(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=BinOp(left=Constant(value=4), op=Mult(), right=Name(id='x', ctx=Load())), op=Add(), right=Constant(value=6))))), Return(value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='delta', ctx=Load())), op=Div(), right=BinOp(left=Name(id='omega', ctx=Load()), op=Pow(), right=Constant(value=2))))], decorator_list=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.01,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_hard_tanh",
        "timestamp": 1714343111.475885,
        "epoch_errors": [
            0.9294758520885259,
            0.8414473644736937,
            0.8016822678388394,
            0.7816085063164562,
            0.7697674676928962,
            0.7619478493656058,
            0.7563122296555591,
            0.7520191336262353,
            0.7486411804848656,
            0.745917388061622,
            0.7436603507601102,
            0.7417577392864886,
            0.7401196630685485,
            0.7386779967881232,
            0.7374059118999283,
            0.7362660787415883,
            0.7352339570137189,
            0.7342908933137506,
            0.7334175835122262,
            0.7325984187336706,
            0.7318329796363044,
            0.7311098676195582,
            0.7304278583881179,
            0.7297885061194223,
            0.7291724823394807,
            0.7285911256465147,
            0.7280331937110276,
            0.7275032652980649,
            0.7269935162549487,
            0.726501577371272,
            0.7260316518594722,
            0.7255740956843707,
            0.7251305140572888,
            0.7247014354660188,
            0.7242891468900357,
            0.7238834197885441,
            0.7234877470968345,
            0.7231006487302672,
            0.7227254051061077,
            0.7223626340426994,
            0.7220067801027974,
            0.7216586990509716,
            0.7213156304575764,
            0.7209791234376502,
            0.7206502655058995,
            0.7203284829473203,
            0.7200103909333672,
            0.71970234279174,
            0.7194021606879468,
            0.7191063142881353,
            0.7188171871042073,
            0.7185316028618718,
            0.7182521946404179,
            0.7179754707942333,
            0.717706383380991,
            0.7174420766768601,
            0.7171813540268038,
            0.716922376797945,
            0.7166703219117823,
            0.7164220790242636,
            0.7161782089804285,
            0.715936901577749,
            0.715698243067135,
            0.7154624101618191,
            0.7152322276068727,
            0.7150050464848284,
            0.714779137521508,
            0.7145593019967668,
            0.7143394316712627,
            0.7141288353983827,
            0.7139162575041178,
            0.7137038513790447,
            0.7135011035037516,
            0.713296151640691,
            0.7130952605307519,
            0.712898404028712,
            0.7127071105644734,
            0.7125091358295369,
            0.7123239594568224,
            0.7121352201646816,
            0.7119512000951481,
            0.7117685990832031,
            0.7115916028031479,
            0.7114122978382524,
            0.7112369682549042,
            0.7110644060091414,
            0.7108952842486229,
            0.7107285979573698,
            0.7105578450592179,
            0.7103960724636489,
            0.7102365289885904,
            0.710071575471533,
            0.7099180617580728,
            0.7097609517811114,
            0.7096037962480843,
            0.7094554553469478,
            0.7093037420442082,
            0.7091552101697408,
            0.7090100801698561,
            0.7088619694167614,
            0.7087199847894782,
            0.7085808164750123,
            0.7084369621990628,
            0.7083010704829139,
            0.7081653241329694,
            0.7080322739846509,
            0.707895214111636,
            0.7077665903480153,
            0.7076369076381134,
            0.7075093903506932,
            0.7073812917519855,
            0.7072533820075988,
            0.7071311710547765,
            0.7070086127138631,
            0.7068883388050623,
            0.7067650926173157,
            0.7066471905485056,
            0.7065299903376419,
            0.7064106153418939,
            0.7062961209774515,
            0.7061816614147441,
            0.7060661981877486,
            0.7059527029238459,
            0.7058379941975484,
            0.7057274776265335,
            0.7056161357388268,
            0.7055044867458239,
            0.7053930292329845,
            0.7052824907401949,
            0.7051678210738507,
            0.7050576549275577,
            0.7049452640429688,
            0.7048328043243027,
            0.7047200076005941,
            0.7046050952096438,
            0.7044925033026369,
            0.7043764889356097,
            0.7042587871620938,
            0.7041402082825512,
            0.7040183211727121,
            0.7038909411849408,
            0.703759739161844,
            0.7036281735991052,
            0.7034927421240507,
            0.703351226660042,
            0.7031947244614044,
            0.703025802625941,
            0.7028451001365087,
            0.7026550314466476,
            0.7024483650972536
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.7828425850567855
            },
            {
                "epoch": 19,
                "error": 0.7824290032762674
            },
            {
                "epoch": 29,
                "error": 0.7826829347226972
            },
            {
                "epoch": 39,
                "error": 0.783043010764344
            },
            {
                "epoch": 49,
                "error": 0.7834001761704433
            },
            {
                "epoch": 59,
                "error": 0.783767674210436
            },
            {
                "epoch": 69,
                "error": 0.7841092011291826
            },
            {
                "epoch": 79,
                "error": 0.7844138202099142
            },
            {
                "epoch": 89,
                "error": 0.7846990975200493
            },
            {
                "epoch": 99,
                "error": 0.7849564067494104
            },
            {
                "epoch": 109,
                "error": 0.7851822088118637
            },
            {
                "epoch": 119,
                "error": 0.7853505820246134
            },
            {
                "epoch": 129,
                "error": 0.7854133426681745
            },
            {
                "epoch": 139,
                "error": 0.7852548557547477
            },
            {
                "epoch": 149,
                "error": 0.7843646391553305
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_hard_tanh_error_plot.png",
        "weights_path": "./modelos/60n_threshold_hard_tanh_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_hard_tanh_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 20.769230769230774,
            "test_avg_error": 0.9476048801253695,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='hard_tanh', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='clip', ctx=Load()), args=[Name(id='x', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=1)], keywords=[]))], decorator_list=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='hard_tanh_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[BinOp(left=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), op=BitAnd(), right=Compare(left=Name(id='x', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1)])), Constant(value=1), Constant(value=0)], keywords=[]))], decorator_list=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.01,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_relu",
        "timestamp": 1714343471.3209,
        "epoch_errors": [
            1.1016976873172437,
            1.0366381666271014,
            0.8612961357228112,
            0.7572699719341662,
            0.7737709206310959,
            0.6338076366817574,
            0.5040329040761072,
            0.47696943254366275,
            0.4044804917548302,
            0.38649936934328105,
            0.35983156427009044,
            0.3220564382348425,
            0.2948357286937107,
            0.32521379438389775,
            0.2771335138817492,
            0.25170487288256493,
            0.25715919905476453,
            0.2502651882943564,
            0.22704987899475965,
            0.2230702493407746,
            0.20013524404477512,
            0.20400646269034245,
            0.1681478259820619,
            0.21461429172832114,
            0.16899000521939114,
            0.150141773005361,
            0.15886496457875135,
            0.14750160967031498,
            0.1407832932557648,
            0.1428664497979416,
            0.13588598034058832,
            0.14285648456933278,
            0.13486408591041554,
            0.11581072565892571,
            0.1331875981944355,
            0.1079120056739223,
            0.10983652035994335,
            0.11269150537036449,
            0.09457627642339994,
            0.11937023259432232,
            0.09019885945251194,
            0.08843316145586995,
            0.10978868165770349,
            0.08271696821516777,
            0.07503753512037173,
            0.09349975960863632,
            0.06754517829546743,
            0.08672291369340808,
            0.06569298401072593,
            0.0846620590853487,
            0.07678031667242698,
            0.06416605509113285,
            0.06985047609269786,
            0.054348666887516,
            0.07427077462121366,
            0.06918549069565266,
            0.06805019455520775,
            0.05398846364193424,
            0.07467479391316759,
            0.0640572982409226,
            0.0599626842729164,
            0.07240128551020214,
            0.06843922619517466,
            0.04657017962636772,
            0.058099784539481794,
            0.03654751132681313,
            0.023329018857521356,
            0.03919329370549156,
            0.052223171541749026,
            0.04512081995253397,
            0.04282717561024633,
            0.05372129117710785,
            0.04965565847524657,
            0.027981797896492095,
            0.04078735659365783,
            0.03917931933871298,
            0.03770379489011913,
            0.027574026533735002,
            0.03320892500348886,
            0.03243676676458143,
            0.02771375112008159,
            0.032891017813593486,
            0.027543669975164747,
            0.03568728304195605,
            0.02818903367014338,
            0.028037734409916918,
            0.026812309073801204,
            0.04440078222205585,
            0.03540711020612075,
            0.03333546958911906,
            0.025621284300134252,
            0.030559339349406568,
            0.03901462855643567,
            0.02457279068369576,
            0.029978317087182717,
            0.023293184915667422,
            0.03267381022232118,
            0.02692432223512995,
            0.01990834472336909,
            0.02893239452518518,
            0.020682985293425608,
            0.02964326539032587,
            0.03055321912837415,
            0.022360513035922163,
            0.032124160817631184,
            0.041427400643109666,
            0.026922972822664665,
            0.020615826056376938,
            0.03331171527541967,
            0.031101283816405055,
            0.02626939878946144,
            0.02002753468238555,
            0.02443680698731675,
            0.018824778496580475,
            0.022926980446407005,
            0.02007033186572377,
            0.01730538153361216,
            0.016084538392366204,
            0.023089222518884484,
            0.01589174124446996,
            0.010061480047651925,
            0.017654292338108626,
            0.011521775344652572,
            0.013582187175424537,
            0.02322079898969682,
            0.014807250564290981,
            0.019570620043251788,
            0.023185825197556527,
            0.022408362876690513,
            0.017702180477739173,
            0.022651033042092858,
            0.02162896922384516,
            0.025190836629091478,
            0.01643642113622017,
            0.01707972140935562,
            0.009979229719421716,
            0.009255317022072903,
            0.01608000904897703,
            0.017922263959123046,
            0.009508797385950295,
            0.009660406971021374,
            0.016536318499437402,
            0.020053499506736763,
            0.0115462874988005,
            0.017788800176956113,
            0.01334503187028065,
            0.006982212993033385,
            0.01108274327375877,
            0.014607175149296126,
            0.009913885218078561
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.45800876976537946
            },
            {
                "epoch": 19,
                "error": 0.42160819368203345
            },
            {
                "epoch": 29,
                "error": 0.3769096362036305
            },
            {
                "epoch": 39,
                "error": 0.33194674878367314
            },
            {
                "epoch": 49,
                "error": 0.33029148660612506
            },
            {
                "epoch": 59,
                "error": 0.32940846195502343
            },
            {
                "epoch": 69,
                "error": 0.3332779217836539
            },
            {
                "epoch": 79,
                "error": 0.33966320609939826
            },
            {
                "epoch": 89,
                "error": 0.34936220347065644
            },
            {
                "epoch": 99,
                "error": 0.3285043160667702
            },
            {
                "epoch": 109,
                "error": 0.3205522603747133
            },
            {
                "epoch": 119,
                "error": 0.32676804133133164
            },
            {
                "epoch": 129,
                "error": 0.33887463376052707
            },
            {
                "epoch": 139,
                "error": 0.35361212866276126
            },
            {
                "epoch": 149,
                "error": 0.3512087089667026
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_relu_error_plot.png",
        "weights_path": "./modelos/60n_threshold_relu_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_relu_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 49.23076923076923,
            "test_avg_error": 0.5815334250990409,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='relu', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Name(id='x', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='relu_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=Constant(value=1), orelse=Constant(value=0)))], decorator_list=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.01,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_relu",
        "timestamp": 1714343843.746053,
        "epoch_errors": [
            1.009093097510598,
            0.9620447260029368,
            0.8284924493447989,
            0.7494795513678217,
            0.6222829304449206,
            0.5891548907405937,
            0.5578998755781815,
            0.5173391367338059,
            0.4896647406627911,
            0.4503211129413591,
            0.3774083282286625,
            0.3968424178382,
            0.37715953588195983,
            0.342824100462362,
            0.3733471266692924,
            0.3056923821599211,
            0.28482287176243193,
            0.3203557065857397,
            0.29134146720947063,
            0.2461923294345194,
            0.26781354050672396,
            0.26823037286856694,
            0.22636700357673464,
            0.20776632717526838,
            0.18862683665839464,
            0.17599597878336992,
            0.15920868873488767,
            0.15293265437158016,
            0.14517212222080406,
            0.23994435328109195,
            0.176582814343506,
            0.15517800748168198,
            0.1869483558735804,
            0.17713726176731984,
            0.1509608815645053,
            0.17808294543938083,
            0.15247343756185386,
            0.11453847948889662,
            0.08893274077805702,
            0.11710814384055493,
            0.11962249992972468,
            0.11026604530923143,
            0.10694010295889879,
            0.09788528685131256,
            0.0881211545168942,
            0.09482834748004791,
            0.0913402495089371,
            0.08449815097761357,
            0.08625622906810902,
            0.0745483821364959,
            0.06965457552632615,
            0.06143482656582383,
            0.07206208425720621,
            0.06254347401593469,
            0.078792758106281,
            0.07760532150776053,
            0.07979455819810218,
            0.06276093789920148,
            0.0645705550854981,
            0.057000236765380366,
            0.057459453575106643,
            0.05478294186515864,
            0.05432372505543237,
            0.05745945357510664,
            0.0558915893152695,
            0.05348408058438946,
            0.04988913525498891,
            0.05337723322609975,
            0.058108884215491236,
            0.04859027397421972,
            0.048483426615930025,
            0.050997782705099776,
            0.050807568874441454,
            0.045454545454545456,
            0.050807568874441454,
            0.04988913525498891,
            0.04212860310421286,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102,
            0.041019955654102
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.4245699640159052
            },
            {
                "epoch": 19,
                "error": 0.4172557017160651
            },
            {
                "epoch": 29,
                "error": 0.38049387748645824
            },
            {
                "epoch": 39,
                "error": 0.350637380499647
            },
            {
                "epoch": 49,
                "error": 0.33545088195203887
            },
            {
                "epoch": 59,
                "error": 0.2863624685740734
            },
            {
                "epoch": 69,
                "error": 0.30575002886506997
            },
            {
                "epoch": 79,
                "error": 0.2993612017306793
            },
            {
                "epoch": 89,
                "error": 0.2993612017306793
            },
            {
                "epoch": 99,
                "error": 0.2993612017306793
            },
            {
                "epoch": 109,
                "error": 0.2993612017306793
            },
            {
                "epoch": 119,
                "error": 0.2993612017306793
            },
            {
                "epoch": 129,
                "error": 0.2993612017306793
            },
            {
                "epoch": 139,
                "error": 0.2993612017306793
            },
            {
                "epoch": 149,
                "error": 0.2993612017306793
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_relu_error_plot.png",
        "weights_path": "./modelos/60n_threshold_relu_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_relu_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 53.07692307692308,
            "test_avg_error": 0.5777843801103772,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='relu', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Name(id='x', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='relu_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=Constant(value=1), orelse=Constant(value=0)))], decorator_list=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.05,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_sigmoid",
        "timestamp": 1714344155.898858,
        "epoch_errors": [
            1.0118704689278224,
            0.9820685357335496,
            0.9818341746301019,
            0.9816472015384278,
            0.9814751323133967,
            0.9813009147067501,
            0.9811076084878173,
            0.9808747117424779,
            0.9805734086552466,
            0.9801578555329058,
            0.9795453781930368,
            0.9785615365633108,
            0.9767653599181422,
            0.9730578290654881,
            0.9666623985358599,
            0.9597211397987317,
            0.9525612583418613,
            0.9431514395285893,
            0.9332933382528443,
            0.9248915380762655,
            0.9170737987067676,
            0.9091436040061049,
            0.9010695490195437,
            0.8929495411490902,
            0.8845255283621178,
            0.875247685110517,
            0.8646111048381491,
            0.8523400832691209,
            0.8383372453401324,
            0.8226764585811255,
            0.8057166540541862,
            0.7879929142611906,
            0.769899976814814,
            0.7515935406000875,
            0.733113022212452,
            0.7145040582894556,
            0.6958511328649583,
            0.6772433266824688,
            0.6587266479660204,
            0.6402773684184386,
            0.6218414341914141,
            0.6034724179810607,
            0.5854247609940718,
            0.5680242361815869,
            0.5514776117108251,
            0.535833781107399,
            0.5210477638910953,
            0.5070431453546032,
            0.4937441531972142,
            0.4810868948819334,
            0.469021080822016,
            0.4575081697928043,
            0.446518444025844,
            0.43602807336783944,
            0.42601665248617754,
            0.41646540060415344,
            0.4073560190454886,
            0.3986700862597618,
            0.3903888322367058,
            0.38249315208233436,
            0.3749637565511237,
            0.3677813895273237,
            0.36092706288930726,
            0.35438227365402575,
            0.3481291816666922,
            0.3421507384698163,
            0.3364307675924858,
            0.3309540025051825,
            0.32570609130854705,
            0.3206735777777322,
            0.315843867494692,
            0.3112051860882927,
            0.3067465345531999,
            0.3024576446375125,
            0.29832893567637647,
            0.29435147316022114,
            0.29051692876901114,
            0.2868175414744088,
            0.2832460794539344,
            0.2797958028174586,
            0.2764604273924325,
            0.273234089973919,
            0.27011131549127465,
            0.26708698648570955,
            0.2641563151648454,
            0.26131481814085666,
            0.2585582938015037,
            0.2558828021308602,
            0.2532846466999876,
            0.2507603584901316,
            0.24830668119047922,
            0.24592055762532944,
            0.24359911700673773,
            0.24133966277208396,
            0.23913966084325888,
            0.23699672822544085,
            0.2349086219381198,
            0.23287322832974452,
            0.23088855286396182,
            0.22895271047798016,
            0.22706391660453168,
            0.22522047892400743,
            0.22342078987979694,
            0.22166331995474395,
            0.2199466116754091,
            0.21826927428698692,
            0.21662997902645412,
            0.21502745491465422,
            0.21346048498811607,
            0.21192790289679644,
            0.21042858980288007,
            0.20896147152678393,
            0.2075255158985169,
            0.20611973028472133,
            0.20474315927356115,
            0.20339488251072269,
            0.20207401268977482,
            0.2007796937085477,
            0.1995110990095317,
            0.19826743012582693,
            0.1970479154542372,
            0.19585180927305826,
            0.1946783910135807,
            0.1935269647815687,
            0.19239685910875998,
            0.19128742689650247,
            0.19019804549630911,
            0.18912811685808528,
            0.18807706766876742,
            0.18704434940389256,
            0.18602943822308302,
            0.18503183465663345,
            0.1840510630523488,
            0.18308667077624668,
            0.18213822718432954,
            0.18120532240228357,
            0.18028756596357937,
            0.17938458536312854,
            0.17849602458370492,
            0.17762154264698546,
            0.17676081223197584,
            0.17591351839262548,
            0.17507935739516697,
            0.17425803568539264,
            0.173449268987402,
            0.17265278152875405,
            0.17186830538234302,
            0.1710955799125842,
            0.17033435131225091,
            0.16958437221621073
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.9799086820359239
            },
            {
                "epoch": 19,
                "error": 0.9309135700087489
            },
            {
                "epoch": 29,
                "error": 0.827922467450973
            },
            {
                "epoch": 39,
                "error": 0.6639954581277635
            },
            {
                "epoch": 49,
                "error": 0.5263828059941451
            },
            {
                "epoch": 59,
                "error": 0.44435412699755483
            },
            {
                "epoch": 69,
                "error": 0.39701243274415265
            },
            {
                "epoch": 79,
                "error": 0.36745355591505313
            },
            {
                "epoch": 89,
                "error": 0.34695019028220864
            },
            {
                "epoch": 99,
                "error": 0.3316812796149352
            },
            {
                "epoch": 109,
                "error": 0.3198609128058574
            },
            {
                "epoch": 119,
                "error": 0.310444035806862
            },
            {
                "epoch": 129,
                "error": 0.302755608267471
            },
            {
                "epoch": 139,
                "error": 0.296312968830049
            },
            {
                "epoch": 149,
                "error": 0.2907967656409775
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_sigmoid_error_plot.png",
        "weights_path": "./modelos/60n_threshold_sigmoid_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_sigmoid_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 66.92307692307692,
            "test_avg_error": 0.45499249792231267,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='sigmoid', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value=1.0), op=Div(), right=BinOp(left=Constant(value=1.0), op=Add(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))))], decorator_list=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='sigmoid_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sigF', ctx=Store())], value=BinOp(left=Constant(value=1), op=Div(), right=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[])))), Return(value=BinOp(left=Name(id='sigF', ctx=Load()), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='sigF', ctx=Load()))))], decorator_list=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.05,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_swish",
        "timestamp": 1714344496.143074,
        "epoch_errors": [
            0.926994682018826,
            0.7656709775572687,
            0.6562230967217025,
            0.5712945169513912,
            0.5125332488673514,
            0.470825639869816,
            0.4393501792753247,
            0.41486159417388263,
            0.39431808110318,
            0.37654928070018745,
            0.3608989954698543,
            0.34707857923500235,
            0.3349613258212127,
            0.3242631865888041,
            0.3146419254624335,
            0.3058493444556948,
            0.2977327130929841,
            0.2901919152321435,
            0.28315035103127034,
            0.27654602062887673,
            0.27032670047316376,
            0.26444315920591366,
            0.2588522784143473,
            0.25352384139059225,
            0.2484391980947757,
            0.24358953158083776,
            0.23897711246581588,
            0.23461126011878325,
            0.23049470298808653,
            0.22661190621497093,
            0.22293626590569335,
            0.21944554452814205,
            0.21612922208313756,
            0.21298518702623398,
            0.21000923894924425,
            0.20718961607426276,
            0.2045111359170518,
            0.20195988692189118,
            0.19952441433359014,
            0.1971960472937712,
            0.19496847668501105,
            0.19283651145000924,
            0.19079531360749832,
            0.1888402812663033,
            0.1869670822848126,
            0.18517168467929807,
            0.1834503819596537,
            0.1817997921184306,
            0.18021682447083798,
            0.1786986235876919,
            0.1772424999428203,
            0.1758458579667135,
            0.1745061347837165,
            0.17322076140182216,
            0.1719871516934149,
            0.17080271635978,
            0.16966489298137422,
            0.16857118133770774,
            0.16751917514019876,
            0.16650658521367503,
            0.16553125292210477,
            0.1645911551137453,
            0.1636844029106992,
            0.16280923668980266,
            0.16196401910611577,
            0.16114722738511164,
            0.16035744557020276,
            0.15959335703562905,
            0.15885373735649927,
            0.15813744752802958,
            0.15744342749916562,
            0.15677068999455288,
            0.15611831461858247,
            0.15548544225256233,
            0.15487126976577778,
            0.15427504506290607,
            0.15369606248597847,
            0.15313365858141798,
            0.15258720823402658,
            0.15205612116175973,
            0.1515398387586336,
            0.1510378312684314,
            0.15054959526881762,
            0.1500746514437336,
            0.1496125426210966,
            0.1491628320525174,
            0.14872510191181565,
            0.14829895198935072,
            0.1478839985596298,
            0.1474798734002373,
            0.14708622294094553,
            0.14670270752288528,
            0.14632900074892924,
            0.1459647889079769,
            0.14560977045757642,
            0.14526365555128098,
            0.1449261655991987,
            0.1445970328523288,
            0.14427600000333654,
            0.14396281979837244,
            0.14365725465627777,
            0.1433590762929945,
            0.1430680653502066,
            0.1427840110281473,
            0.1425067107231464,
            0.14223596967090757,
            0.14197160059670255,
            0.1417134233737356,
            0.14146126469087164,
            0.14121495773078893,
            0.14097434185945498,
            0.14073926232761969,
            0.14050956998483347,
            0.14028512100631085,
            0.14006577663279157,
            0.13985140292339726,
            0.13964187052136678,
            0.1394370544324364,
            0.13923683381554602,
            0.1390410917854898,
            0.13884971522707115,
            0.13866259462028188,
            0.1384796238760011,
            0.13830070018169122,
            0.13812572385655092,
            0.13795459821559794,
            0.13778722944213942,
            0.137623526468113,
            0.1374634008617833,
            0.1373067667222971,
            0.13715354058062645,
            0.13700364130643322,
            0.13685699002043372,
            0.1367135100118414,
            0.13657312666050975,
            0.13643576736341087,
            0.1363013614651104,
            0.1361698401919298,
            0.1360411365895026,
            0.13591518546346035,
            0.1357919233230003,
            0.13567128832711628,
            0.1355532202332811,
            0.13543766034839896,
            0.13532455148186043,
            0.13521383790054298,
            0.13510546528562087,
            0.13499938069106282,
            0.13489553250370184,
            0.1347938704047757
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.494614301116571
            },
            {
                "epoch": 19,
                "error": 0.4890850533091208
            },
            {
                "epoch": 29,
                "error": 0.4802476778968691
            },
            {
                "epoch": 39,
                "error": 0.4784521294416867
            },
            {
                "epoch": 49,
                "error": 0.4772170103718543
            },
            {
                "epoch": 59,
                "error": 0.4785442261800061
            },
            {
                "epoch": 69,
                "error": 0.48007738915607473
            },
            {
                "epoch": 79,
                "error": 0.48095978609587287
            },
            {
                "epoch": 89,
                "error": 0.4813251045746419
            },
            {
                "epoch": 99,
                "error": 0.481435511341623
            },
            {
                "epoch": 109,
                "error": 0.4814595949128741
            },
            {
                "epoch": 119,
                "error": 0.4814716360236104
            },
            {
                "epoch": 129,
                "error": 0.48149377791742076
            },
            {
                "epoch": 139,
                "error": 0.4815272129961521
            },
            {
                "epoch": 149,
                "error": 0.48156771858527314
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_swish_error_plot.png",
        "weights_path": "./modelos/60n_threshold_swish_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_swish_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 42.307692307692314,
            "test_avg_error": 0.7553608282374523,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='swish', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='x', ctx=Load()), op=Mult(), right=Call(func=Name(id='sigmoid', ctx=Load()), args=[BinOp(left=Constant(value=1), op=Mult(), right=Name(id='x', ctx=Load()))], keywords=[])))], decorator_list=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='swish_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sigmoid_beta_x', ctx=Store())], value=Call(func=Name(id='sigmoid', ctx=Load()), args=[BinOp(left=Constant(value=1), op=Mult(), right=Name(id='x', ctx=Load()))], keywords=[])), Return(value=BinOp(left=Name(id='sigmoid_beta_x', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Constant(value=1), op=Mult(), right=Name(id='x', ctx=Load())), op=Mult(), right=Name(id='sigmoid_beta_x', ctx=Load())), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='sigmoid_beta_x', ctx=Load())))))], decorator_list=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.05,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_hard_swish",
        "timestamp": 1714344912.419207,
        "epoch_errors": [
            0.9321385204318541,
            0.7928397658846367,
            0.7040604696045168,
            0.6312278264342506,
            0.5741128075127797,
            0.529820021015466,
            0.49833383194655345,
            0.4728997049111202,
            0.45221023604182775,
            0.434708227203873,
            0.4190096397932621,
            0.40526698261038746,
            0.3930280309353517,
            0.38206132273636345,
            0.37271517949173066,
            0.3637186430578346,
            0.3557286317275854,
            0.3484461741994108,
            0.3416991147019623,
            0.33567562875195683,
            0.3300608955915763,
            0.32461552455595566,
            0.31952662670635235,
            0.3148317071095473,
            0.31037140642267136,
            0.306195998423777,
            0.30228782876831956,
            0.2986917090300654,
            0.295207474050504,
            0.29202603175980685,
            0.2888573995245348,
            0.2860021566684605,
            0.2831323778793778,
            0.2804320243760588,
            0.27787179580531596,
            0.27533750802965484,
            0.2729460089850396,
            0.2706472750461086,
            0.26849335168706595,
            0.2663341411580403,
            0.26439476506113335,
            0.2624742697920159,
            0.26057274296167593,
            0.2588466926370213,
            0.25717824667426725,
            0.2554561648376712,
            0.2539270862162948,
            0.2524480505413528,
            0.25092883898281726,
            0.24956424857910964,
            0.24820671354985643,
            0.2468537932372199,
            0.24569539833340473,
            0.24444422385895412,
            0.24323074776535764,
            0.24216225337146213,
            0.24113841364560135,
            0.2399955333921093,
            0.23901588482883224,
            0.23807704384262185,
            0.2370813578132411,
            0.23622463875588334,
            0.23536490706875698,
            0.2344493164554226,
            0.23364684684901435,
            0.23281701237463595,
            0.23206224714885537,
            0.23134515946907497,
            0.23058241955752404,
            0.22987757212294244,
            0.2291342517326904,
            0.22848376354151176,
            0.22790004321999102,
            0.2272111788862409,
            0.2266135150154037,
            0.22597167389876086,
            0.22545384492826298,
            0.22492133469391437,
            0.22428657277711986,
            0.2238154291322219,
            0.2232515202634167,
            0.22278887193718452,
            0.22231499208514738,
            0.22178307509078526,
            0.2213407980329945,
            0.22086867837552784,
            0.22041874567650507,
            0.2200131268299502,
            0.219543351949623,
            0.21913921558074465,
            0.2187532503183307,
            0.21833372560184916,
            0.21796150628065142,
            0.21756717912907783,
            0.21723705538040658,
            0.21684707436758108,
            0.21649889862824157,
            0.21612147889998104,
            0.21581527272854223,
            0.21548801943190402,
            0.21514063127104607,
            0.21485947553019752,
            0.2145119679143817,
            0.21423814227153568,
            0.21391557248656914,
            0.21364160901044763,
            0.21333398890576424,
            0.21307748844398233,
            0.2128121695392471,
            0.2125197463646826,
            0.21227813519048283,
            0.21199641712657513,
            0.21176968396424495,
            0.2114954802390605,
            0.21128325754025892,
            0.2110270898269858,
            0.21080328977756793,
            0.21057442289228448,
            0.21035574893772466,
            0.21014910007188126,
            0.20992768203566434,
            0.2097379556620198,
            0.20951157220601582,
            0.20933189279734524,
            0.20912489868430964,
            0.20893898671316694,
            0.20874611363307136,
            0.2085741780821382,
            0.2083779474082414,
            0.2082204947764011,
            0.208040184737891,
            0.20786295959790171,
            0.2077023381712564,
            0.2075517561425679,
            0.20737784289651812,
            0.20723674585147925,
            0.20708607481617292,
            0.20693635489348777,
            0.20679590629620898,
            0.20664504504002948,
            0.2065170506505958,
            0.20637546911453225,
            0.20624131667983003,
            0.206105256778187,
            0.20599246878421565,
            0.20586584707700714,
            0.20573804906553672,
            0.2056267472146115,
            0.20551064253950804,
            0.20538075388178922
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.5397089066522687
            },
            {
                "epoch": 19,
                "error": 0.5233710546534917
            },
            {
                "epoch": 29,
                "error": 0.5238082781995743
            },
            {
                "epoch": 39,
                "error": 0.5237515338381767
            },
            {
                "epoch": 49,
                "error": 0.5228937522818653
            },
            {
                "epoch": 59,
                "error": 0.5232944924039763
            },
            {
                "epoch": 69,
                "error": 0.5229353609764883
            },
            {
                "epoch": 79,
                "error": 0.5225971213263221
            },
            {
                "epoch": 89,
                "error": 0.5222042345257244
            },
            {
                "epoch": 99,
                "error": 0.5219342550040016
            },
            {
                "epoch": 109,
                "error": 0.5217674204633622
            },
            {
                "epoch": 119,
                "error": 0.5215117245748859
            },
            {
                "epoch": 129,
                "error": 0.5212193171079659
            },
            {
                "epoch": 139,
                "error": 0.5209906925223492
            },
            {
                "epoch": 149,
                "error": 0.5208161457250022
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_hard_swish_error_plot.png",
        "weights_path": "./modelos/60n_threshold_hard_swish_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_hard_swish_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 48.46153846153847,
            "test_avg_error": 0.759729000641409,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='hard_swish', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Name(id='x', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='minimum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='maximum', ctx=Load()), args=[BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Constant(value=3)), Constant(value=0)], keywords=[]), Constant(value=6)], keywords=[])), op=Div(), right=Constant(value=6)))], decorator_list=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='hard_swish_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='x', ctx=Load()), ops=[Lt()], comparators=[UnaryOp(op=USub(), operand=Constant(value=3))]), Constant(value=0), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='x', ctx=Load()), ops=[LtE()], comparators=[Constant(value=3)]), BinOp(left=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='x', ctx=Load())), op=Add(), right=Constant(value=3)), op=Div(), right=Constant(value=6)), Constant(value=1)], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.05,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_selu",
        "timestamp": 1714345331.711418,
        "epoch_errors": [
            0.9134187071726176,
            0.8353333351224916,
            0.8085440676943311,
            0.7950635062197863,
            0.786318423052243,
            0.7801122742663501,
            0.7753665818133255,
            0.7716463163433989,
            0.768595210232438,
            0.7660656243792482,
            0.7637885346238323,
            0.7618495608974826,
            0.7600601329799628,
            0.7585197951548447,
            0.756996049413634,
            0.7556394115516224,
            0.7542968197483721,
            0.7531744837992446,
            0.7521471280372932,
            0.750966970097371,
            0.7498561037169859,
            0.7489135397386294,
            0.7480426930242708,
            0.7469730814927681,
            0.7460908930738046,
            0.745188206720462,
            0.7443454551527477,
            0.743554059104988,
            0.7426993600137947,
            0.7418290699847102,
            0.7410858141329212,
            0.740372474140215,
            0.7395134730321186,
            0.7387028859481556,
            0.737958445588628,
            0.7372142180636713,
            0.7365181983732734,
            0.7357095804360985,
            0.7349920153554083,
            0.7342336266868813,
            0.7333809399568104,
            0.7326557910511289,
            0.7318620000530383,
            0.731152863961137,
            0.7303537996772347,
            0.7296651591232785,
            0.7288544638907163,
            0.7281337210170028,
            0.7272899335305478,
            0.7265929417153785,
            0.7257888513430658,
            0.7250122556136455,
            0.7242163952770093,
            0.7235143543981518,
            0.7226171756922755,
            0.7219149831289439,
            0.721055567958642,
            0.7202377277903275,
            0.7194107248371365,
            0.7185839587296853,
            0.7176876663396559,
            0.7168413465473169,
            0.7160196364520128,
            0.7151290394093184,
            0.7143540128633262,
            0.7133816912050771,
            0.712445436967036,
            0.7115395895336037,
            0.7106088659922372,
            0.709668836089755,
            0.708770268211253,
            0.7078001491339014,
            0.7067954240255986,
            0.7057781831477234,
            0.7048401255915396,
            0.7037582125280485,
            0.7026758193469176,
            0.7015934991977864,
            0.7004796678103059,
            0.6993512958932335,
            0.6982108959302611,
            0.6970717197252149,
            0.6958446986745002,
            0.6945205982795146,
            0.6932118427734051,
            0.6918822514395839,
            0.6904349831475719,
            0.6889393817251785,
            0.6874188866453258,
            0.6858639828173514,
            0.6842251880103711,
            0.6825719345157377,
            0.6808286637366221,
            0.6791001899974848,
            0.6773688641028822,
            0.6757544887235152,
            0.6741088892156679,
            0.672420785078823,
            0.6708985242010586,
            0.6692208596197601,
            0.6677599049997758,
            0.6661831193488305,
            0.6647119542233094,
            0.6632382368545108,
            0.6617462840931919,
            0.66032871638537,
            0.6588337496861871,
            0.6573947134837796,
            0.6559568435491123,
            0.6545477188976667,
            0.6530596414273255,
            0.6515996843842701,
            0.6501572656156209,
            0.6487086750701744,
            0.6472355133274111,
            0.6457587069689626,
            0.644390511202861,
            0.6428604670161557,
            0.6414103011151755,
            0.6399186832728059,
            0.6384091326385949,
            0.6369066416953781,
            0.6355398633578457,
            0.6338868850460653,
            0.6325522213283484,
            0.6310640636172359,
            0.6295306453995353,
            0.6281113629848438,
            0.6266019061121155,
            0.6251902115283516,
            0.6236980741599704,
            0.6222343452336764,
            0.6207804126712758,
            0.6192981055304589,
            0.6178515294385651,
            0.6163374374006266,
            0.614872874321687,
            0.6134304504877661,
            0.6120435837614062,
            0.6104939939448113,
            0.6091015755233157,
            0.6076778756966666,
            0.6062343867584008,
            0.6047407526915715,
            0.6033254719831057,
            0.6019622008720285,
            0.6005291866643604,
            0.5991393511439909,
            0.5977168734670426,
            0.5963832387894427
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.799382188458394
            },
            {
                "epoch": 19,
                "error": 0.7993476769407316
            },
            {
                "epoch": 29,
                "error": 0.7996075499259756
            },
            {
                "epoch": 39,
                "error": 0.7984638687191229
            },
            {
                "epoch": 49,
                "error": 0.7964824022319601
            },
            {
                "epoch": 59,
                "error": 0.7930318087899997
            },
            {
                "epoch": 69,
                "error": 0.7890824449664946
            },
            {
                "epoch": 79,
                "error": 0.783628769839325
            },
            {
                "epoch": 89,
                "error": 0.77597503474421
            },
            {
                "epoch": 99,
                "error": 0.7651684790847896
            },
            {
                "epoch": 109,
                "error": 0.7562352914493913
            },
            {
                "epoch": 119,
                "error": 0.7473491105681537
            },
            {
                "epoch": 129,
                "error": 0.7372739801097778
            },
            {
                "epoch": 139,
                "error": 0.7284843972865187
            },
            {
                "epoch": 149,
                "error": 0.7199225462560453
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_selu_error_plot.png",
        "weights_path": "./modelos/60n_threshold_selu_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_selu_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 33.07692307692307,
            "test_avg_error": 0.9746395270050604,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='selu', args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='lambda_constant'), arg(arg='alpha_constant')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1.0507), Constant(value=1.67326)]), body=[Return(value=BinOp(left=Name(id='lambda_constant', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), Name(id='x', ctx=Load()), BinOp(left=Name(id='alpha_constant', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)))], keywords=[])))], decorator_list=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='selu_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='lambda_constant'), arg(arg='alpha_constant')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1.0507), Constant(value=1.67326)]), body=[Return(value=BinOp(left=Name(id='lambda_constant', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), Constant(value=1), BinOp(left=Name(id='alpha_constant', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))], keywords=[])))], decorator_list=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.01,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_hard_tanh",
        "timestamp": 1714345803.830709,
        "epoch_errors": [
            0.9029365453556004,
            0.8245327305278687,
            0.8063529147585761,
            0.7996286278431028,
            0.7971249963316973,
            0.795585464087221,
            0.7940762903283975,
            0.7927763543009073,
            0.7916785079340329,
            0.790087949688513,
            0.7875914528030147,
            0.7852577906195263,
            0.7837394721960028,
            0.7825258216660773,
            0.7807002270428646,
            0.7775151713527364,
            0.774403968375077,
            0.7723363932642767,
            0.7692669336715557,
            0.7653870095304581,
            0.7619498535018783,
            0.7605157269260547,
            0.7606654344328976,
            0.7611692912125443,
            0.7598780196753887,
            0.7588231239589476,
            0.7583209305468493,
            0.756884618739087,
            0.7551831223394414,
            0.7537511844227917,
            0.7523321711931432,
            0.750397377686318,
            0.7484934733755446,
            0.7452529641874529,
            0.7421027621183691,
            0.7394227759605924,
            0.7370533710516407,
            0.7345770918817068,
            0.7326076664553641,
            0.7314468353530379,
            0.7314356334044134,
            0.7305508464871902,
            0.7283857526173552,
            0.725705237484732,
            0.723590166539422,
            0.7228904973962257,
            0.7232926634147822,
            0.7240820645606523,
            0.7259364264368295,
            0.7274774739184475,
            0.7289753703582433,
            0.7292401389903622,
            0.7292013334014523,
            0.7296454955679876,
            0.729508962118281,
            0.7287993642148451,
            0.7286124092484243,
            0.7282617938906117,
            0.72765732736287,
            0.7269510200396322,
            0.7268368627634646,
            0.7265224722081911,
            0.7255127134310155,
            0.7246830137484568,
            0.7237058825973472,
            0.7225665829228161,
            0.7214451076929036,
            0.7200777146238687,
            0.7197143662676978,
            0.7194670434045753,
            0.7201000951065852,
            0.7221232201207627,
            0.7241843989451782,
            0.7263371289774027,
            0.7279481558893571,
            0.7296712190642969,
            0.7310384528918399,
            0.7311154202972685,
            0.7309921741978808,
            0.7310073146208806,
            0.7311840194622533,
            0.7310594108001678,
            0.7308059761717685,
            0.7312384833634435,
            0.7317702799693563,
            0.732021379000922,
            0.7323674255363586,
            0.7329911641820572,
            0.733145676784765,
            0.7335757364783729,
            0.7341872324237131,
            0.73453818743808,
            0.7347507645078685,
            0.7347279512217458,
            0.7350354161648801,
            0.7350746524946411,
            0.7349247794102111,
            0.7345550149542855,
            0.7343327876503989,
            0.7341584851807693,
            0.7343944903584556,
            0.7344766041600131,
            0.7345176065395111,
            0.7345787524953173,
            0.7346502126492918,
            0.7345384464158594,
            0.734477635125282,
            0.7342496325281642,
            0.7338594745617385,
            0.7338829278966101,
            0.7337524339754145,
            0.7337121094989746,
            0.7337947583909374,
            0.7337963282293138,
            0.7337357140399142,
            0.7334338821635635,
            0.7332520489868436,
            0.7328408389017175,
            0.7326750256328355,
            0.7325037057347319,
            0.7322704370770128,
            0.7318505155267089,
            0.7314498559653584,
            0.7311031083345835,
            0.7305893794532256,
            0.7300628630977825,
            0.7295682019279022,
            0.7293086101428687,
            0.7289317394401273,
            0.7286128018064251,
            0.7283178816423808,
            0.7280544057331513,
            0.7277515261189685,
            0.7274208411306701,
            0.7271442557749803,
            0.7269675317589993,
            0.7267231786122329,
            0.7265335236984433,
            0.7263784297334105,
            0.7260879480265346,
            0.7257746165433091,
            0.7257625253274652,
            0.7257115317472876,
            0.7256205178322731,
            0.7255376846193134,
            0.7255023438427713,
            0.7254011566881057,
            0.7253367483110565,
            0.7252396157362224,
            0.7252440164452749
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.8217997174070987
            },
            {
                "epoch": 19,
                "error": 0.8327953327009562
            },
            {
                "epoch": 29,
                "error": 0.8342097039929399
            },
            {
                "epoch": 39,
                "error": 0.8623239379881401
            },
            {
                "epoch": 49,
                "error": 0.8779933137845655
            },
            {
                "epoch": 59,
                "error": 0.9037734403843736
            },
            {
                "epoch": 69,
                "error": 0.8926442276655322
            },
            {
                "epoch": 79,
                "error": 0.8612767689487952
            },
            {
                "epoch": 89,
                "error": 0.8595702288992388
            },
            {
                "epoch": 99,
                "error": 0.8570996994886997
            },
            {
                "epoch": 109,
                "error": 0.8650735471017594
            },
            {
                "epoch": 119,
                "error": 0.8740657276848034
            },
            {
                "epoch": 129,
                "error": 0.8823557334201542
            },
            {
                "epoch": 139,
                "error": 0.8879265901038388
            },
            {
                "epoch": 149,
                "error": 0.8916802923444669
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_hard_tanh_error_plot.png",
        "weights_path": "./modelos/60n_threshold_hard_tanh_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_hard_tanh_confusion_matrix.png",
        "custom_data": {
            "test_accuracy": 50.76923076923077,
            "test_avg_error": 1.0869794597812013,
            "crossvalidation": false
        },
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='hard_tanh', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='clip', ctx=Load()), args=[Name(id='x', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=1)], keywords=[]))], decorator_list=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='hard_swish_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='x', ctx=Load()), ops=[Lt()], comparators=[UnaryOp(op=USub(), operand=Constant(value=3))]), Constant(value=0), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='x', ctx=Load()), ops=[LtE()], comparators=[Constant(value=3)]), BinOp(left=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='x', ctx=Load())), op=Add(), right=Constant(value=3)), op=Div(), right=Constant(value=6)), Constant(value=1)], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 150,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.05,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()))], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix'), arg(arg='custom_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='custom_data'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Name(id='custom_data', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.005)])]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])"
        }
    }
]