[
    {
        "model_name": "10n_max",
        "timestamp": 1714164132.054328,
        "epoch_errors": [
            0.9893438931661164,
            0.9835401437600984,
            0.9834123179535769,
            0.9764365181079343,
            0.9279400190118149,
            0.8824414690803384,
            0.8010642890194467,
            0.7356477680363712,
            0.6844542612589282,
            0.6343924584998099,
            0.5985770485895042,
            0.5563008653910623,
            0.5224017272105004,
            0.4985122599298138,
            0.4627206865695256,
            0.45763147583812835,
            0.44640535002963466,
            0.4121015458215519,
            0.4045561269368171,
            0.38452044741155983,
            0.3760280558710084,
            0.36297693646060686,
            0.3421212993721647,
            0.3282932339023697,
            0.3249570347566323,
            0.31618203089021757,
            0.3089962963687731,
            0.29976817228430097,
            0.2934526373334466,
            0.2911604829139051,
            0.27173589301069706,
            0.2676741666721824,
            0.25315418814036506,
            0.2439904699683972,
            0.23422700570796884,
            0.22915529472136495,
            0.23362658246430992,
            0.21963940580365415,
            0.2305954693006182,
            0.2179304593473964,
            0.21231187404712548,
            0.20243278274852272,
            0.20414631957511578,
            0.19098780313771127,
            0.18728297105981143,
            0.18099220197729127,
            0.1778115354770781,
            0.17976008491743206,
            0.1708974273603954,
            0.1665919951970416,
            0.1702594176663043,
            0.16066163728853966,
            0.1617952755288906,
            0.16683121713882132,
            0.15724160087826472,
            0.14973868280768285,
            0.1515778576830719,
            0.14606080087907497,
            0.14596052766143816,
            0.14697217929798065,
            0.14091487388256987,
            0.1385956565735276,
            0.1368394785292024,
            0.13502207183380355,
            0.13400179847740967,
            0.13262466029173414,
            0.13173036686200196,
            0.13057679705791114,
            0.12975806820555685,
            0.12877703620004416,
            0.1280956675592008,
            0.12695036949764738,
            0.12661969520812089,
            0.12575969791755068,
            0.12594506833582023,
            0.12435974283383405,
            0.12332959648222674,
            0.12218400420937091,
            0.12150765525580194,
            0.12094659874681248,
            0.12074848047266297,
            0.12066948143689289,
            0.11975562711294695,
            0.11888108115757652,
            0.11827194661489905,
            0.11833830623744128,
            0.11805133047837346,
            0.11731160314422291,
            0.11634394103280418,
            0.11610173001524828,
            0.11595477957804762,
            0.11569262840087308,
            0.11543903893266316,
            0.11494951791947676,
            0.11456097634106775,
            0.11430204949585553,
            0.11354267503126247,
            0.11372977078716255,
            0.11237339811156884,
            0.11251289450105594,
            0.11159535713811349,
            0.11137889392232983,
            0.11034767745889185,
            0.11053831750835148,
            0.10938296653002612,
            0.1096923483608626,
            0.10857004576587359,
            0.108467672985168,
            0.10745911044139995,
            0.10780795775658138,
            0.10654443594128621,
            0.10633187376894175,
            0.10565215498930945,
            0.10539176609679947,
            0.10505493512309078,
            0.10532261124309067,
            0.10420907551532795,
            0.10386698419649232,
            0.1041280035171858,
            0.10314758261855793,
            0.10283895212939358,
            0.10302759927068234,
            0.10207662998235988,
            0.10180973769034729,
            0.1019971659313229,
            0.10111654615400424,
            0.10083620554672258,
            0.10103337504454958,
            0.10019744429890934,
            0.0998876473474778,
            0.10008444700922411,
            0.09933912867709273,
            0.09901898771129074,
            0.09916197998107638,
            0.09852544401127745,
            0.09822594348085312,
            0.09818835277426731,
            0.09777201385594131,
            0.0975710963420923,
            0.09722692509509494,
            0.09689901061657215,
            0.09678415265731265,
            0.0964443772206227,
            0.09616362119982369,
            0.09611434852919247,
            0.09577627785363677,
            0.09557385597989798,
            0.09557222393011111,
            0.09531787322300192,
            0.0951474444542789,
            0.09497646116732854,
            0.09450915332747667,
            0.09415641198126082,
            0.09385947402808296,
            0.09354679206561582,
            0.09329621087407619,
            0.093039402956968,
            0.09278752666619083,
            0.09255683747095562,
            0.09232128018537633,
            0.09209371277258725,
            0.09187264583426041,
            0.09165307989452691,
            0.09143888921221464,
            0.09122828879897339,
            0.0910209822187036,
            0.09081738819381129,
            0.09061701779107564,
            0.09041983872133773,
            0.09022575665625025,
            0.0900346280574022,
            0.08984636337094065,
            0.08966086208425814,
            0.08947803035103691,
            0.08929778157179498,
            0.08912003301218722,
            0.08894470688899939,
            0.08877172982187098,
            0.08860103251255459,
            0.08843254950541213,
            0.08826621890831884,
            0.08810198213895992,
            0.08793978368447433,
            0.08777957087560437,
            0.08762129367634837,
            0.08746490448875542,
            0.08731035797245126,
            0.08715761087824757,
            0.08700662189505415,
            0.08685735150923415,
            0.08670976187551765,
            0.08656381669859033,
            0.08641948112448983,
            0.08627672164099419,
            0.08613550598622494,
            0.08599580306474379,
            0.08585758287048209,
            0.08572081641589294,
            0.08558547566677265,
            0.08545153348225316,
            0.08531896355951223,
            0.08518774038279857,
            0.08505783917640769,
            0.0849292358612866,
            0.08480190701497922,
            0.08467582983465786,
            0.08455098210301025,
            0.08442734215678614,
            0.08430488885781737,
            0.08418360156635785,
            0.08406346011659908,
            0.08394444479422744,
            0.08382653631591559,
            0.08370971581063291,
            0.08359396480267893,
            0.08347926519634603,
            0.08336559926211838,
            0.08325294962432131,
            0.0831412992501343,
            0.08303063143987743,
            0.08292092981848583,
            0.08281217832808109,
            0.08270436122154656,
            0.08259746305701193,
            0.08249146869315353,
            0.08238636328520653,
            0.08228213228159535,
            0.08217876142107823,
            0.08207623673030823,
            0.08197454452171485,
            0.08187367139160708,
            0.08177360421841266,
            0.08167433016096479,
            0.08157583665675879,
            0.08147811142010744,
            0.08138114244013211,
            0.08128491797853588,
            0.08118942656711534,
            0.08109465700497454,
            0.08100059835542091,
            0.0809072399425226,
            0.08081457134732799,
            0.08072258240374511,
            0.08063126319409598,
            0.08054060404436021,
            0.08045059551913476,
            0.08036122841633515,
            0.08027249376167202,
            0.08018438280293681,
            0.08009688700413296,
            0.08000999803948823,
            0.07992370778738533,
            0.07983800832424624,
            0.0797528919184029,
            0.07966835102398453,
            0.07958437827485455,
            0.0795009664786163,
            0.07941810861071788,
            0.07933579780866969,
            0.07925402736639539,
            0.07917279072872829,
            0.07909208148606633,
            0.07901189336919172,
            0.07893222024426265,
            0.07885305610798347,
            0.07877439508295038,
            0.07869623141317854,
            0.07861855945980539,
            0.07854137369697414,
            0.07846466870788414,
            0.07838843918101679,
            0.07831267990652241,
            0.07823738577276783,
            0.07816255176303984,
            0.07808817295239497,
            0.07801424450465445,
            0.07794076166953486,
            0.07786771977991155,
            0.07779511424920608,
            0.07772294056889495,
            0.07765119430613009,
            0.07757987110147178,
            0.07750896666672062,
            0.07743847678285125,
            0.07736839729803745,
            0.07729872412576565,
            0.07722945324303494,
            0.07716058068863295,
            0.07709210256149049,
            0.07702401501910594,
            0.0769563142760388,
            0.07688899660246558,
            0.07682205832279926,
            0.07675549581436365,
            0.0766893055061243,
            0.0766234838774701,
            0.07655802745704407,
            0.0764929328216212,
            0.07642819659502886,
            0.07636381544711052
        ],
        "validation_errors": [
            {
                "epoch": 0,
                "error": 0.9830027901427444
            },
            {
                "epoch": 1,
                "error": 0.9829053667485296
            },
            {
                "epoch": 2,
                "error": 0.9826599959681135
            },
            {
                "epoch": 3,
                "error": 0.9723491647775759
            },
            {
                "epoch": 4,
                "error": 0.9420253333382343
            },
            {
                "epoch": 5,
                "error": 0.8968239931692558
            },
            {
                "epoch": 6,
                "error": 0.8243795736463204
            },
            {
                "epoch": 7,
                "error": 0.7871476544208648
            },
            {
                "epoch": 8,
                "error": 0.744767515282082
            },
            {
                "epoch": 9,
                "error": 0.724255325736869
            },
            {
                "epoch": 10,
                "error": 0.6575663892583861
            },
            {
                "epoch": 11,
                "error": 0.6531877714423162
            },
            {
                "epoch": 12,
                "error": 0.5984018490254
            },
            {
                "epoch": 13,
                "error": 0.5671950495128405
            },
            {
                "epoch": 14,
                "error": 0.5582745845917904
            },
            {
                "epoch": 15,
                "error": 0.5325460698879677
            },
            {
                "epoch": 16,
                "error": 0.5585052521885264
            },
            {
                "epoch": 17,
                "error": 0.5322406207575671
            },
            {
                "epoch": 18,
                "error": 0.5296266417556967
            },
            {
                "epoch": 19,
                "error": 0.5001682108160145
            },
            {
                "epoch": 20,
                "error": 0.49270132571238345
            },
            {
                "epoch": 21,
                "error": 0.5292058215214769
            },
            {
                "epoch": 22,
                "error": 0.4759778160909311
            },
            {
                "epoch": 23,
                "error": 0.47327458873998063
            },
            {
                "epoch": 24,
                "error": 0.48067656622923366
            },
            {
                "epoch": 25,
                "error": 0.4485145913168505
            },
            {
                "epoch": 26,
                "error": 0.46507339051812546
            },
            {
                "epoch": 27,
                "error": 0.44283434186404547
            },
            {
                "epoch": 28,
                "error": 0.4488027203996188
            },
            {
                "epoch": 29,
                "error": 0.4545460154821858
            },
            {
                "epoch": 30,
                "error": 0.4340351946180412
            },
            {
                "epoch": 31,
                "error": 0.4334596598199901
            },
            {
                "epoch": 32,
                "error": 0.42812564862309477
            },
            {
                "epoch": 33,
                "error": 0.4218333923305211
            },
            {
                "epoch": 34,
                "error": 0.40701391482451293
            },
            {
                "epoch": 35,
                "error": 0.4093173901728644
            },
            {
                "epoch": 36,
                "error": 0.4128981829359118
            },
            {
                "epoch": 37,
                "error": 0.3987660821290954
            },
            {
                "epoch": 38,
                "error": 0.3939184663031768
            },
            {
                "epoch": 39,
                "error": 0.38961747486890835
            },
            {
                "epoch": 40,
                "error": 0.3822783123441208
            },
            {
                "epoch": 41,
                "error": 0.37987040927243787
            },
            {
                "epoch": 42,
                "error": 0.38854320624043426
            },
            {
                "epoch": 43,
                "error": 0.38507085328926327
            },
            {
                "epoch": 44,
                "error": 0.3890052477703751
            },
            {
                "epoch": 45,
                "error": 0.3717183327569907
            },
            {
                "epoch": 46,
                "error": 0.3714758770343021
            },
            {
                "epoch": 47,
                "error": 0.36681537022408695
            },
            {
                "epoch": 48,
                "error": 0.36868037982488505
            },
            {
                "epoch": 49,
                "error": 0.37168168700285825
            },
            {
                "epoch": 50,
                "error": 0.37615577804058187
            },
            {
                "epoch": 51,
                "error": 0.3667441663844765
            },
            {
                "epoch": 52,
                "error": 0.37024222265053247
            },
            {
                "epoch": 53,
                "error": 0.36661297739446347
            },
            {
                "epoch": 54,
                "error": 0.36416542790897377
            },
            {
                "epoch": 55,
                "error": 0.36220385758135143
            },
            {
                "epoch": 56,
                "error": 0.3636983468913218
            },
            {
                "epoch": 57,
                "error": 0.359410489313499
            },
            {
                "epoch": 58,
                "error": 0.36127724389280497
            },
            {
                "epoch": 59,
                "error": 0.3595342199655287
            },
            {
                "epoch": 60,
                "error": 0.3597995450577317
            },
            {
                "epoch": 61,
                "error": 0.35741968894722304
            },
            {
                "epoch": 62,
                "error": 0.355129397148525
            },
            {
                "epoch": 63,
                "error": 0.35729217070222113
            },
            {
                "epoch": 64,
                "error": 0.35391289552305816
            },
            {
                "epoch": 65,
                "error": 0.35635539112106296
            },
            {
                "epoch": 66,
                "error": 0.35269383007171706
            },
            {
                "epoch": 67,
                "error": 0.35511185238761483
            },
            {
                "epoch": 68,
                "error": 0.35194945565995356
            },
            {
                "epoch": 69,
                "error": 0.35571219295245143
            },
            {
                "epoch": 70,
                "error": 0.3514656145408874
            },
            {
                "epoch": 71,
                "error": 0.35330892198555186
            },
            {
                "epoch": 72,
                "error": 0.3518644204053173
            },
            {
                "epoch": 73,
                "error": 0.355549631394153
            },
            {
                "epoch": 74,
                "error": 0.35137172767828656
            },
            {
                "epoch": 75,
                "error": 0.3541595379043988
            },
            {
                "epoch": 76,
                "error": 0.35023822826990975
            },
            {
                "epoch": 77,
                "error": 0.3525631955321664
            },
            {
                "epoch": 78,
                "error": 0.35030065281134015
            },
            {
                "epoch": 79,
                "error": 0.35120360154020436
            },
            {
                "epoch": 80,
                "error": 0.35484660383034616
            },
            {
                "epoch": 81,
                "error": 0.34919168314632054
            },
            {
                "epoch": 82,
                "error": 0.35150795731161544
            },
            {
                "epoch": 83,
                "error": 0.3491249509109392
            },
            {
                "epoch": 84,
                "error": 0.34943036835613905
            },
            {
                "epoch": 85,
                "error": 0.3480031285905182
            },
            {
                "epoch": 86,
                "error": 0.35294168418224564
            },
            {
                "epoch": 87,
                "error": 0.347405944889461
            },
            {
                "epoch": 88,
                "error": 0.34711186752701545
            },
            {
                "epoch": 89,
                "error": 0.35205969517813346
            },
            {
                "epoch": 90,
                "error": 0.34619848131659936
            },
            {
                "epoch": 91,
                "error": 0.34529199228383456
            },
            {
                "epoch": 92,
                "error": 0.3486569155159155
            },
            {
                "epoch": 93,
                "error": 0.34435666155435857
            },
            {
                "epoch": 94,
                "error": 0.3481897174426854
            },
            {
                "epoch": 95,
                "error": 0.34419921232087786
            },
            {
                "epoch": 96,
                "error": 0.34661625877185653
            },
            {
                "epoch": 97,
                "error": 0.3445502521335422
            },
            {
                "epoch": 98,
                "error": 0.3425882885662484
            },
            {
                "epoch": 99,
                "error": 0.3421470204313638
            },
            {
                "epoch": 100,
                "error": 0.34544532700060865
            },
            {
                "epoch": 101,
                "error": 0.34302913902703247
            },
            {
                "epoch": 102,
                "error": 0.3443847556336677
            },
            {
                "epoch": 103,
                "error": 0.34390318711950413
            },
            {
                "epoch": 104,
                "error": 0.3412823126237294
            },
            {
                "epoch": 105,
                "error": 0.3412715307906477
            },
            {
                "epoch": 106,
                "error": 0.3444872377975787
            },
            {
                "epoch": 107,
                "error": 0.34276515676394537
            },
            {
                "epoch": 108,
                "error": 0.34101208701402824
            },
            {
                "epoch": 109,
                "error": 0.34069311305391425
            },
            {
                "epoch": 110,
                "error": 0.34365959367263865
            },
            {
                "epoch": 111,
                "error": 0.34045650062363564
            },
            {
                "epoch": 112,
                "error": 0.3397994031931062
            },
            {
                "epoch": 113,
                "error": 0.34408774441547213
            },
            {
                "epoch": 114,
                "error": 0.3402206862448672
            },
            {
                "epoch": 115,
                "error": 0.3397157016885351
            },
            {
                "epoch": 116,
                "error": 0.344004986440962
            },
            {
                "epoch": 117,
                "error": 0.3397983679270642
            },
            {
                "epoch": 118,
                "error": 0.33970307562428725
            },
            {
                "epoch": 119,
                "error": 0.3441481329966623
            },
            {
                "epoch": 120,
                "error": 0.3398307665610795
            },
            {
                "epoch": 121,
                "error": 0.33962514795689025
            },
            {
                "epoch": 122,
                "error": 0.3437547745454092
            },
            {
                "epoch": 123,
                "error": 0.3400753657088641
            },
            {
                "epoch": 124,
                "error": 0.3393564014678641
            },
            {
                "epoch": 125,
                "error": 0.34333485642689915
            },
            {
                "epoch": 126,
                "error": 0.3400497911782375
            },
            {
                "epoch": 127,
                "error": 0.3391988121209062
            },
            {
                "epoch": 128,
                "error": 0.34290327432644585
            },
            {
                "epoch": 129,
                "error": 0.33959160476992084
            },
            {
                "epoch": 130,
                "error": 0.33916928257493145
            },
            {
                "epoch": 131,
                "error": 0.34255681454279996
            },
            {
                "epoch": 132,
                "error": 0.3391050181239353
            },
            {
                "epoch": 133,
                "error": 0.3393626645485571
            },
            {
                "epoch": 134,
                "error": 0.3419980033754254
            },
            {
                "epoch": 135,
                "error": 0.33860760147079455
            },
            {
                "epoch": 136,
                "error": 0.33988016365828555
            },
            {
                "epoch": 137,
                "error": 0.3413287596633422
            },
            {
                "epoch": 138,
                "error": 0.3383346292076005
            },
            {
                "epoch": 139,
                "error": 0.3400259061067996
            },
            {
                "epoch": 140,
                "error": 0.34023474564983075
            },
            {
                "epoch": 141,
                "error": 0.33823444502632627
            },
            {
                "epoch": 142,
                "error": 0.34017898752453907
            },
            {
                "epoch": 143,
                "error": 0.3393102272202748
            },
            {
                "epoch": 144,
                "error": 0.33828703953017203
            },
            {
                "epoch": 145,
                "error": 0.34007718587224567
            },
            {
                "epoch": 146,
                "error": 0.33862917908485646
            },
            {
                "epoch": 147,
                "error": 0.3384498209683361
            },
            {
                "epoch": 148,
                "error": 0.33951146039813235
            },
            {
                "epoch": 149,
                "error": 0.3382884464113254
            },
            {
                "epoch": 150,
                "error": 0.33854255086352264
            },
            {
                "epoch": 151,
                "error": 0.33886011247766973
            },
            {
                "epoch": 152,
                "error": 0.33823441674817206
            },
            {
                "epoch": 153,
                "error": 0.3384518198047319
            },
            {
                "epoch": 154,
                "error": 0.3384247145895867
            },
            {
                "epoch": 155,
                "error": 0.33821089453048936
            },
            {
                "epoch": 156,
                "error": 0.3382952009949354
            },
            {
                "epoch": 157,
                "error": 0.3382085999043804
            },
            {
                "epoch": 158,
                "error": 0.33813519472991616
            },
            {
                "epoch": 159,
                "error": 0.33812346902879925
            },
            {
                "epoch": 160,
                "error": 0.33805630028105144
            },
            {
                "epoch": 161,
                "error": 0.3380090729607182
            },
            {
                "epoch": 162,
                "error": 0.3379654899395888
            },
            {
                "epoch": 163,
                "error": 0.3379126112726603
            },
            {
                "epoch": 164,
                "error": 0.3378648458348468
            },
            {
                "epoch": 165,
                "error": 0.3378159448365448
            },
            {
                "epoch": 166,
                "error": 0.3377663096558242
            },
            {
                "epoch": 167,
                "error": 0.33771720305530867
            },
            {
                "epoch": 168,
                "error": 0.3376677886148466
            },
            {
                "epoch": 169,
                "error": 0.33761831417323507
            },
            {
                "epoch": 170,
                "error": 0.33756881248750686
            },
            {
                "epoch": 171,
                "error": 0.3375192453725523
            },
            {
                "epoch": 172,
                "error": 0.3374696480239127
            },
            {
                "epoch": 173,
                "error": 0.337420031682096
            },
            {
                "epoch": 174,
                "error": 0.3373704107450105
            },
            {
                "epoch": 175,
                "error": 0.3373208019329296
            },
            {
                "epoch": 176,
                "error": 0.33727122112478053
            },
            {
                "epoch": 177,
                "error": 0.33722168429946203
            },
            {
                "epoch": 178,
                "error": 0.3371722070826252
            },
            {
                "epoch": 179,
                "error": 0.3371228045356406
            },
            {
                "epoch": 180,
                "error": 0.33707349102597844
            },
            {
                "epoch": 181,
                "error": 0.33702428011121627
            },
            {
                "epoch": 182,
                "error": 0.33697518446368663
            },
            {
                "epoch": 183,
                "error": 0.3369262158246543
            },
            {
                "epoch": 184,
                "error": 0.33687738498323655
            },
            {
                "epoch": 185,
                "error": 0.33682870177561414
            },
            {
                "epoch": 186,
                "error": 0.33678017510035513
            },
            {
                "epoch": 187,
                "error": 0.336731812946233
            },
            {
                "epoch": 188,
                "error": 0.33668362242948235
            },
            {
                "epoch": 189,
                "error": 0.3366356098379239
            },
            {
                "epoch": 190,
                "error": 0.3365877806798754
            },
            {
                "epoch": 191,
                "error": 0.33654013973613583
            },
            {
                "epoch": 192,
                "error": 0.33649269111371577
            },
            {
                "epoch": 193,
                "error": 0.3364454383002503
            },
            {
                "epoch": 194,
                "error": 0.3363983842182874
            },
            {
                "epoch": 195,
                "error": 0.33635153127883627
            },
            {
                "epoch": 196,
                "error": 0.33630488143373394
            },
            {
                "epoch": 197,
                "error": 0.3362584362264973
            },
            {
                "epoch": 198,
                "error": 0.33621219684143255
            },
            {
                "epoch": 199,
                "error": 0.3361661641508595
            },
            {
                "epoch": 200,
                "error": 0.33612033876034914
            },
            {
                "epoch": 201,
                "error": 0.3360747210519167
            },
            {
                "epoch": 202,
                "error": 0.3360293112251452
            },
            {
                "epoch": 203,
                "error": 0.3359841093362252
            },
            {
                "epoch": 204,
                "error": 0.3359391153349022
            },
            {
                "epoch": 205,
                "error": 0.33589432909933087
            },
            {
                "epoch": 206,
                "error": 0.3358497504688329
            },
            {
                "epoch": 207,
                "error": 0.3358053792745375
            },
            {
                "epoch": 208,
                "error": 0.3357612153678925
            },
            {
                "epoch": 209,
                "error": 0.33571725864701346
            },
            {
                "epoch": 210,
                "error": 0.33567350908082794
            },
            {
                "epoch": 211,
                "error": 0.33562996673097484
            },
            {
                "epoch": 212,
                "error": 0.3355866317713931
            },
            {
                "epoch": 213,
                "error": 0.3355435045055532
            },
            {
                "epoch": 214,
                "error": 0.33550058538125116
            },
            {
                "epoch": 215,
                "error": 0.3354578750029286
            },
            {
                "epoch": 216,
                "error": 0.33541537414142814
            },
            {
                "epoch": 217,
                "error": 0.3353730837411666
            },
            {
                "epoch": 218,
                "error": 0.3353310049246618
            },
            {
                "epoch": 219,
                "error": 0.33528913899440704
            },
            {
                "epoch": 220,
                "error": 0.33524748743207683
            },
            {
                "epoch": 221,
                "error": 0.3352060518950946
            },
            {
                "epoch": 222,
                "error": 0.33516483421059085
            },
            {
                "epoch": 223,
                "error": 0.33512383636684157
            },
            {
                "epoch": 224,
                "error": 0.33508306050227904
            },
            {
                "epoch": 225,
                "error": 0.3350425088922117
            },
            {
                "epoch": 226,
                "error": 0.335002183933419
            },
            {
                "epoch": 227,
                "error": 0.33496208812682154
            },
            {
                "epoch": 228,
                "error": 0.33492222405844957
            },
            {
                "epoch": 229,
                "error": 0.33488259437896445
            },
            {
                "epoch": 230,
                "error": 0.3348432017820111
            },
            {
                "epoch": 231,
                "error": 0.3348040489816954
            },
            {
                "epoch": 232,
                "error": 0.334765138689505
            },
            {
                "epoch": 233,
                "error": 0.3347264735909709
            },
            {
                "epoch": 234,
                "error": 0.33468805632242393
            },
            {
                "epoch": 235,
                "error": 0.33464988944812596
            },
            {
                "epoch": 236,
                "error": 0.3346119754381108
            },
            {
                "epoch": 237,
                "error": 0.33457431664700654
            },
            {
                "epoch": 238,
                "error": 0.3345369152941169
            },
            {
                "epoch": 239,
                "error": 0.33449977344499376
            },
            {
                "epoch": 240,
                "error": 0.3344628929947156
            },
            {
                "epoch": 241,
                "error": 0.3344262756530388
            },
            {
                "epoch": 242,
                "error": 0.3343899229315624
            },
            {
                "epoch": 243,
                "error": 0.3343538361330015
            },
            {
                "epoch": 244,
                "error": 0.3343180163426247
            },
            {
                "epoch": 245,
                "error": 0.33428246442187726
            },
            {
                "epoch": 246,
                "error": 0.33424718100417444
            },
            {
                "epoch": 247,
                "error": 0.33421216649280344
            },
            {
                "epoch": 248,
                "error": 0.33417742106086196
            },
            {
                "epoch": 249,
                "error": 0.33414294465312044
            },
            {
                "epoch": 250,
                "error": 0.33410873698966415
            },
            {
                "epoch": 251,
                "error": 0.33407479757117803
            },
            {
                "epoch": 252,
                "error": 0.334041125685697
            },
            {
                "epoch": 253,
                "error": 0.33400772041664584
            },
            {
                "epoch": 254,
                "error": 0.33397458065199415
            },
            {
                "epoch": 255,
                "error": 0.3339417050943309
            },
            {
                "epoch": 256,
                "error": 0.3339090922716908
            },
            {
                "epoch": 257,
                "error": 0.3338767405489449
            },
            {
                "epoch": 258,
                "error": 0.33384464813959186
            },
            {
                "epoch": 259,
                "error": 0.33381281311779604
            },
            {
                "epoch": 260,
                "error": 0.33378123343051863
            },
            {
                "epoch": 261,
                "error": 0.33374990690962014
            },
            {
                "epoch": 262,
                "error": 0.33371883128380225
            },
            {
                "epoch": 263,
                "error": 0.33368800419030065
            },
            {
                "epoch": 264,
                "error": 0.3336574231862255
            },
            {
                "epoch": 265,
                "error": 0.33362708575949007
            },
            {
                "epoch": 266,
                "error": 0.33359698933925075
            },
            {
                "epoch": 267,
                "error": 0.333567131305819
            },
            {
                "epoch": 268,
                "error": 0.3335375090000178
            },
            {
                "epoch": 269,
                "error": 0.3335081197319319
            },
            {
                "epoch": 270,
                "error": 0.3334789607890713
            },
            {
                "epoch": 271,
                "error": 0.33345002944391483
            },
            {
                "epoch": 272,
                "error": 0.3334213229608457
            },
            {
                "epoch": 273,
                "error": 0.3333928386024973
            },
            {
                "epoch": 274,
                "error": 0.3333645736355053
            },
            {
                "epoch": 275,
                "error": 0.3333365253357006
            },
            {
                "epoch": 276,
                "error": 0.33330869099275656
            },
            {
                "epoch": 277,
                "error": 0.33328106791432316
            },
            {
                "epoch": 278,
                "error": 0.3332536534296669
            },
            {
                "epoch": 279,
                "error": 0.3332264448928635
            },
            {
                "epoch": 280,
                "error": 0.3331994396855445
            },
            {
                "epoch": 281,
                "error": 0.33317263521926216
            },
            {
                "epoch": 282,
                "error": 0.3331460289374747
            },
            {
                "epoch": 283,
                "error": 0.33311961831719844
            },
            {
                "epoch": 284,
                "error": 0.3330934008703522
            },
            {
                "epoch": 285,
                "error": 0.33306737414481485
            },
            {
                "epoch": 286,
                "error": 0.333041535725238
            },
            {
                "epoch": 287,
                "error": 0.3330158832336225
            },
            {
                "epoch": 288,
                "error": 0.3329904143296977
            },
            {
                "epoch": 289,
                "error": 0.33296512671111506
            },
            {
                "epoch": 290,
                "error": 0.3329400181134813
            },
            {
                "epoch": 291,
                "error": 0.3329150863102602
            },
            {
                "epoch": 292,
                "error": 0.3328903291125383
            },
            {
                "epoch": 293,
                "error": 0.3328657443687012
            },
            {
                "epoch": 294,
                "error": 0.33284132996400795
            },
            {
                "epoch": 295,
                "error": 0.3328170838200955
            },
            {
                "epoch": 296,
                "error": 0.3327930038944172
            },
            {
                "epoch": 297,
                "error": 0.3327690881796333
            },
            {
                "epoch": 298,
                "error": 0.33274533470295703
            },
            {
                "epoch": 299,
                "error": 0.3327217415254669
            }
        ],
        "error_plot_path": "./modelos/10n_max_error_plot.png",
        "weights_path": "./modelos/10n_max_weights.npy",
        "confusion_matrix_path": "./modelos/10n_max_confusion_matrix.png",
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 10,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "max_value",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 300,
            "VALIDATION_INTERVAL": 1,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "26n_threshold",
        "timestamp": 1714164518.157158,
        "epoch_errors": [
            0.9881720139103765,
            0.9352463044517321,
            0.8092329905034773,
            0.6220071656760114,
            0.473262469001687,
            0.37758465305243977,
            0.3199278561950017,
            0.27167028474889693,
            0.23267791219220277,
            0.20813553562612488,
            0.18457089686577802,
            0.16532205296773003,
            0.14890630451501508,
            0.148104093338787,
            0.13891069081459576,
            0.12493790271769153,
            0.1104005547710586,
            0.1040476503877011,
            0.09879447470400055,
            0.09467263815813139,
            0.09056945616832078,
            0.08676083383749973,
            0.08385970640398718,
            0.08142231467645301,
            0.07931934617375186,
            0.0774627007999907,
            0.07583833626760358,
            0.07445109869647953,
            0.07322644838528292,
            0.07199817835544893,
            0.07074630998641625,
            0.06956513088365193,
            0.06840946685490903,
            0.06719906704275624,
            0.06598549640627567,
            0.06483678013893568,
            0.06378214308047263,
            0.06283394618582915,
            0.06204706963077079,
            0.06167478435416892,
            0.06053445818674753,
            0.05956145396773576,
            0.05863971365612422,
            0.05785412972401388,
            0.057150863812273,
            0.056502774028991946,
            0.055897282175541185,
            0.0553273542163835,
            0.054788372482334924,
            0.0542770180284741,
            0.05379079030931536,
            0.05332776680490536,
            0.05288647535632202,
            0.05246583280230719,
            0.05206513380075892,
            0.05168409007839144,
            0.051322935067713266,
            0.05098262947007651,
            0.05066523883172291,
            0.050374617973277434,
            0.05011763565875669,
            0.049906201954417716,
            0.049759421163358776,
            0.04969782503464273,
            0.04968394218719555,
            0.04939519089917369,
            0.04874237951843104,
            0.048120355761067844,
            0.04769446330113609,
            0.04724617335491943,
            0.04688977544002947,
            0.0465515297060191,
            0.04623933434230935,
            0.045944946393859744,
            0.04566530303529249,
            0.045398031260469,
            0.04514141375343193,
            0.04489416587087749,
            0.04465529929208171,
            0.0444240332966067,
            0.04419973593463573,
            0.04398188428272756,
            0.04377003708374926,
            0.04356381555663331,
            0.04336288968624979,
            0.043166968250407105,
            0.042975791437027865,
            0.04278912528520418,
            0.04260675743050061,
            0.04242849379699409,
            0.04225415598661748,
            0.04208357918937881,
            0.04191661048801681,
            0.04175310746530661,
            0.04159293704654835,
            0.041435974527051285,
            0.04128210274683508,
            0.04113121138379189,
            0.04098319634317668,
            0.04083795922621214,
            0.04069540686428401,
            0.040555450907996365,
            0.040418007462492675,
            0.04028299676210156,
            0.04015034287864663,
            0.04001997345877355,
            0.03989181948644447,
            0.03976581506739201,
            0.03964189723283545,
            0.03952000576018199,
            0.03940008300877429,
            0.03928207376902772,
            0.03916592512352982,
            0.039051586318869166,
            0.03893900864712224,
            0.03882814533606287,
            0.038718951447274844,
            0.038611383781444936,
            0.038505400790200865,
            0.03840096249392684,
            0.03829803040505764,
            0.03819656745639919,
            0.03809653793407931,
            0.03799790741476648,
            0.037900642706835935,
            0.03780471179519208,
            0.03771008378948642,
            0.03761672887549467,
            0.037524618269440216,
            0.03743372417507121,
            0.037344019743317636,
            0.03725547903437208,
            0.037168076982050956,
            0.03708178936031112,
            0.03699659275180658,
            0.036912464518383946,
            0.036829382773426955,
            0.036747326355970555,
            0.03666627480651756,
            0.036586208344499306,
            0.03650710784733298,
            0.036428954831039695,
            0.03635173143239597,
            0.036275420392604396,
            0.036200005042478264,
            0.036125469289151245,
            0.03605179760433103,
            0.03597897501413565,
            0.035906987090564634,
            0.03583581994467575,
            0.03576546022155952,
            0.035695895097227245,
            0.035627112277555065,
            0.03555909999946087,
            0.035491847034524134,
            0.03542534269531081,
            0.035359576844709355,
            0.035294539908654915,
            0.035230222892692106,
            0.035166617402916496,
            0.03510371567195429,
            0.03504151059076794,
            0.0349799957472517,
            0.03491916547278371,
            0.03485901489816225,
            0.034799540020676485,
            0.03474073778446358,
            0.034682606176820556,
            0.034625144343782506,
            0.034568352729116056,
            0.034512233241941644,
            0.03445678945958605,
            0.034402026874081226,
            0.03434795319310362,
            0.03429457870931879,
            0.034241916756328115,
            0.03418998427513924,
            0.0341388025228911,
            0.034088397966324506,
            0.03403880341748894,
            0.03399005949032126,
            0.03394221648691457,
            0.03389533686595823,
            0.033849498509878895,
            0.03380479910260322,
            0.03376136207422878,
            0.03371934479113889,
            0.03367895001853721,
            0.033640442239228095,
            0.03360417132043111,
            0.033570607531631,
            0.0335403944834467,
            0.03351443099972647,
            0.03349400072890581,
            0.03348098200208196,
            0.0334781938917357,
            0.03348997036952269,
            0.03352308783233927,
            0.03358808582996677,
            0.033700260537889805,
            0.03387629361365377,
            0.03411456039262279,
            0.034351407187092405,
            0.0344485220603913,
            0.034308526195763446,
            0.03402488004773693,
            0.03374788966782789,
            0.0335233737813979,
            0.033345719942199314,
            0.03320115635128501,
            0.03307887336269047,
            0.03297174459823358,
            0.03287521646703453,
            0.03278636348654485,
            0.032703272910718235,
            0.03262466525145859,
            0.03254966220461127,
            0.03247764390989533,
            0.03240816019707197,
            0.03234087465709889,
            0.03227552886408867,
            0.032211919109092844,
            0.03214988100120793,
            0.03208927908357168,
            0.032029999692972946,
            0.031971945950042206,
            0.031915034171751504,
            0.03185919124951718,
            0.0318043526943049,
            0.03175046115069115,
            0.031697465246562175,
            0.03164531868733359,
            0.03159397953144261,
            0.03154340960251573,
            0.03149357400627022,
            0.03144444072890774,
            0.03139598029982958,
            0.03134816550579475,
            0.03130097114672178,
            0.031254373825573126,
            0.031208351766415413,
            0.0311628846559781,
            0.031117953504972345,
            0.031073540526144458,
            0.031029629026595586,
            0.030986203312335363,
            0.030943248603381664,
            0.030900750957996614,
            0.030858697204871943,
            0.03081707488225765,
            0.03077587218318179,
            0.03073507790602584,
            0.030694681409831195,
            0.030654672573791054,
            0.030615041760459843,
            0.030575779782271495,
            0.03053687787100943,
            0.030498327649917212,
            0.030460121108177356,
            0.030422250577515155,
            0.030384708710717714,
            0.030347488461879266,
            0.030310583068206127,
            0.030273986033234154,
            0.030237691111327084,
            0.03020169229333749,
            0.03016598379332594,
            0.030130560036245188,
            0.03009541564650314,
            0.030060545437330933,
            0.030025944400886576,
            0.029991607699033078,
            0.02995753065473516,
            0.029923708744025605,
            0.0298901375884937,
            0.029856812948256286,
            0.029823730715373087,
            0.02979088690767222,
            0.02975827766295514,
            0.029725899233552518,
            0.02969374798120536,
            0.029661820372247134,
            0.029630112973066305,
            0.029598622445828403,
            0.029567345544440182,
            0.029536279110738885,
            0.02950542007089073,
            0.029474765431985996,
            0.029444312278815894,
            0.02941405777082013,
            0.029383999139194556,
            0.02935413368414725,
            0.029324458772294962,
            0.02929497183419055,
            0.029265670361973237,
            0.029236551907134044,
            0.029207614078390006,
            0.02917885453966001,
            0.029150271008136715,
            0.02912186125244839
        ],
        "validation_errors": [
            {
                "epoch": 0,
                "error": 0.9813181609819188
            },
            {
                "epoch": 1,
                "error": 0.9225669625406662
            },
            {
                "epoch": 2,
                "error": 0.7622218105742598
            },
            {
                "epoch": 3,
                "error": 0.5931359300400058
            },
            {
                "epoch": 4,
                "error": 0.4934814943739467
            },
            {
                "epoch": 5,
                "error": 0.43971576623694936
            },
            {
                "epoch": 6,
                "error": 0.4143903738891285
            },
            {
                "epoch": 7,
                "error": 0.3794381531778731
            },
            {
                "epoch": 8,
                "error": 0.3429020358480378
            },
            {
                "epoch": 9,
                "error": 0.33410980629915465
            },
            {
                "epoch": 10,
                "error": 0.3203358500619729
            },
            {
                "epoch": 11,
                "error": 0.32620642215518564
            },
            {
                "epoch": 12,
                "error": 0.3073412146787168
            },
            {
                "epoch": 13,
                "error": 0.297437004459814
            },
            {
                "epoch": 14,
                "error": 0.2936268422719747
            },
            {
                "epoch": 15,
                "error": 0.2856642956313226
            },
            {
                "epoch": 16,
                "error": 0.27624984079193476
            },
            {
                "epoch": 17,
                "error": 0.2731706271700619
            },
            {
                "epoch": 18,
                "error": 0.2763451080399515
            },
            {
                "epoch": 19,
                "error": 0.27453752613450766
            },
            {
                "epoch": 20,
                "error": 0.2698015759451325
            },
            {
                "epoch": 21,
                "error": 0.26762250626218914
            },
            {
                "epoch": 22,
                "error": 0.2654662241142995
            },
            {
                "epoch": 23,
                "error": 0.26362265075237223
            },
            {
                "epoch": 24,
                "error": 0.2620421915141401
            },
            {
                "epoch": 25,
                "error": 0.2607580830283315
            },
            {
                "epoch": 26,
                "error": 0.2597314948445052
            },
            {
                "epoch": 27,
                "error": 0.2589428040373894
            },
            {
                "epoch": 28,
                "error": 0.2584045501153105
            },
            {
                "epoch": 29,
                "error": 0.25807296496275617
            },
            {
                "epoch": 30,
                "error": 0.25776309120230045
            },
            {
                "epoch": 31,
                "error": 0.25721184061680186
            },
            {
                "epoch": 32,
                "error": 0.2562923489087575
            },
            {
                "epoch": 33,
                "error": 0.25525746955480844
            },
            {
                "epoch": 34,
                "error": 0.25433552549789246
            },
            {
                "epoch": 35,
                "error": 0.2535528503091258
            },
            {
                "epoch": 36,
                "error": 0.2528687554261712
            },
            {
                "epoch": 37,
                "error": 0.2522418694834819
            },
            {
                "epoch": 38,
                "error": 0.2517150744533462
            },
            {
                "epoch": 39,
                "error": 0.25160358384071424
            },
            {
                "epoch": 40,
                "error": 0.25149780180391096
            },
            {
                "epoch": 41,
                "error": 0.25112839388589653
            },
            {
                "epoch": 42,
                "error": 0.2507658965307037
            },
            {
                "epoch": 43,
                "error": 0.25035739079637015
            },
            {
                "epoch": 44,
                "error": 0.24993459944917423
            },
            {
                "epoch": 45,
                "error": 0.24951344027054528
            },
            {
                "epoch": 46,
                "error": 0.2491009622472224
            },
            {
                "epoch": 47,
                "error": 0.24870021622291616
            },
            {
                "epoch": 48,
                "error": 0.2483126118336156
            },
            {
                "epoch": 49,
                "error": 0.24793895833924814
            },
            {
                "epoch": 50,
                "error": 0.2475799186242144
            },
            {
                "epoch": 51,
                "error": 0.2472362248660689
            },
            {
                "epoch": 52,
                "error": 0.24690880941937274
            },
            {
                "epoch": 53,
                "error": 0.24659892442307055
            },
            {
                "epoch": 54,
                "error": 0.24630829659147307
            },
            {
                "epoch": 55,
                "error": 0.24603936105019042
            },
            {
                "epoch": 56,
                "error": 0.24579563022743192
            },
            {
                "epoch": 57,
                "error": 0.24558227820052947
            },
            {
                "epoch": 58,
                "error": 0.24540704913719147
            },
            {
                "epoch": 59,
                "error": 0.24528157538442852
            },
            {
                "epoch": 60,
                "error": 0.2452228488050974
            },
            {
                "epoch": 61,
                "error": 0.24525280689820625
            },
            {
                "epoch": 62,
                "error": 0.24538677756294988
            },
            {
                "epoch": 63,
                "error": 0.24557956848589765
            },
            {
                "epoch": 64,
                "error": 0.24556539531179045
            },
            {
                "epoch": 65,
                "error": 0.24467754523527785
            },
            {
                "epoch": 66,
                "error": 0.2433746367881239
            },
            {
                "epoch": 67,
                "error": 0.24283535433231715
            },
            {
                "epoch": 68,
                "error": 0.2420948735845137
            },
            {
                "epoch": 69,
                "error": 0.24165944990062527
            },
            {
                "epoch": 70,
                "error": 0.24124359468299433
            },
            {
                "epoch": 71,
                "error": 0.24088949677905805
            },
            {
                "epoch": 72,
                "error": 0.24056822681275042
            },
            {
                "epoch": 73,
                "error": 0.24027219649114046
            },
            {
                "epoch": 74,
                "error": 0.23999563534537252
            },
            {
                "epoch": 75,
                "error": 0.23973461493669482
            },
            {
                "epoch": 76,
                "error": 0.23948633169138572
            },
            {
                "epoch": 77,
                "error": 0.23924871878495874
            },
            {
                "epoch": 78,
                "error": 0.23902021316791094
            },
            {
                "epoch": 79,
                "error": 0.23879960852299248
            },
            {
                "epoch": 80,
                "error": 0.2385859580949571
            },
            {
                "epoch": 81,
                "error": 0.23837850795934648
            },
            {
                "epoch": 82,
                "error": 0.2381766497872344
            },
            {
                "epoch": 83,
                "error": 0.23797988662581904
            },
            {
                "epoch": 84,
                "error": 0.2377878076634639
            },
            {
                "epoch": 85,
                "error": 0.23760006935951072
            },
            {
                "epoch": 86,
                "error": 0.2374163811742518
            },
            {
                "epoch": 87,
                "error": 0.23723649467597582
            },
            {
                "epoch": 88,
                "error": 0.23706019515817026
            },
            {
                "epoch": 89,
                "error": 0.23688729514154386
            },
            {
                "epoch": 90,
                "error": 0.23671762930345772
            },
            {
                "epoch": 91,
                "error": 0.2365510504963795
            },
            {
                "epoch": 92,
                "error": 0.2363874266026675
            },
            {
                "epoch": 93,
                "error": 0.2362266380354497
            },
            {
                "epoch": 94,
                "error": 0.2360685757413966
            },
            {
                "epoch": 95,
                "error": 0.23591313959538612
            },
            {
                "epoch": 96,
                "error": 0.23576023710267136
            },
            {
                "epoch": 97,
                "error": 0.235609782343482
            },
            {
                "epoch": 98,
                "error": 0.23546169510963597
            },
            {
                "epoch": 99,
                "error": 0.235315900193914
            },
            {
                "epoch": 100,
                "error": 0.23517232680150976
            },
            {
                "epoch": 101,
                "error": 0.23503090805946722
            },
            {
                "epoch": 102,
                "error": 0.23489158060512505
            },
            {
                "epoch": 103,
                "error": 0.23475428423853661
            },
            {
                "epoch": 104,
                "error": 0.23461896162694384
            },
            {
                "epoch": 105,
                "error": 0.23448555805178767
            },
            {
                "epoch": 106,
                "error": 0.23435402119064822
            },
            {
                "epoch": 107,
                "error": 0.23422430092800414
            },
            {
                "epoch": 108,
                "error": 0.23409634918988395
            },
            {
                "epoch": 109,
                "error": 0.23397011979842952
            },
            {
                "epoch": 110,
                "error": 0.2338455683431294
            },
            {
                "epoch": 111,
                "error": 0.23372265206610074
            },
            {
                "epoch": 112,
                "error": 0.233601329759245
            },
            {
                "epoch": 113,
                "error": 0.23348156167152154
            },
            {
                "epoch": 114,
                "error": 0.23336330942486963
            },
            {
                "epoch": 115,
                "error": 0.23324653593757577
            },
            {
                "epoch": 116,
                "error": 0.23313120535407333
            },
            {
                "epoch": 117,
                "error": 0.2330172829803402
            },
            {
                "epoch": 118,
                "error": 0.2329047352241872
            },
            {
                "epoch": 119,
                "error": 0.2327935295398375
            },
            {
                "epoch": 120,
                "error": 0.23268363437630032
            },
            {
                "epoch": 121,
                "error": 0.2325750191291019
            },
            {
                "epoch": 122,
                "error": 0.23246765409500722
            },
            {
                "epoch": 123,
                "error": 0.2323615104294156
            },
            {
                "epoch": 124,
                "error": 0.2322565601061521
            },
            {
                "epoch": 125,
                "error": 0.23215277587941305
            },
            {
                "epoch": 126,
                "error": 0.23205013124765803
            },
            {
                "epoch": 127,
                "error": 0.23194860041925477
            },
            {
                "epoch": 128,
                "error": 0.23184815827971428
            },
            {
                "epoch": 129,
                "error": 0.23174878036036411
            },
            {
                "epoch": 130,
                "error": 0.23165044280832184
            },
            {
                "epoch": 131,
                "error": 0.23155312235764947
            },
            {
                "epoch": 132,
                "error": 0.23145679630156754
            },
            {
                "epoch": 133,
                "error": 0.23136144246562912
            },
            {
                "epoch": 134,
                "error": 0.2312670391817494
            },
            {
                "epoch": 135,
                "error": 0.2311735652629978
            },
            {
                "epoch": 136,
                "error": 0.23108099997906265
            },
            {
                "epoch": 137,
                "error": 0.2309893230323018
            },
            {
                "epoch": 138,
                "error": 0.2308985145342925
            },
            {
                "epoch": 139,
                "error": 0.23080855498279937
            },
            {
                "epoch": 140,
                "error": 0.23071942523907252
            },
            {
                "epoch": 141,
                "error": 0.23063110650539806
            },
            {
                "epoch": 142,
                "error": 0.23054358030281197
            },
            {
                "epoch": 143,
                "error": 0.23045682844888968
            },
            {
                "epoch": 144,
                "error": 0.23037083303552136
            },
            {
                "epoch": 145,
                "error": 0.23028557640658212
            },
            {
                "epoch": 146,
                "error": 0.2302010411353902
            },
            {
                "epoch": 147,
                "error": 0.23011721000185487
            },
            {
                "epoch": 148,
                "error": 0.23003406596919404
            },
            {
                "epoch": 149,
                "error": 0.2299515921601051
            },
            {
                "epoch": 150,
                "error": 0.229869771832251
            },
            {
                "epoch": 151,
                "error": 0.22978858835292126
            },
            {
                "epoch": 152,
                "error": 0.2297080251727056
            },
            {
                "epoch": 153,
                "error": 0.2296280657980054
            },
            {
                "epoch": 154,
                "error": 0.22954869376219147
            },
            {
                "epoch": 155,
                "error": 0.2294698925951853
            },
            {
                "epoch": 156,
                "error": 0.22939164579122545
            },
            {
                "epoch": 157,
                "error": 0.22931393677454884
            },
            {
                "epoch": 158,
                "error": 0.22923674886267564
            },
            {
                "epoch": 159,
                "error": 0.2291600652269583
            },
            {
                "epoch": 160,
                "error": 0.22908386884999743
            },
            {
                "epoch": 161,
                "error": 0.2290081424794856
            },
            {
                "epoch": 162,
                "error": 0.2289328685779693
            },
            {
                "epoch": 163,
                "error": 0.22885802926795643
            },
            {
                "epoch": 164,
                "error": 0.22878360627170977
            },
            {
                "epoch": 165,
                "error": 0.22870958084496867
            },
            {
                "epoch": 166,
                "error": 0.22863593370374508
            },
            {
                "epoch": 167,
                "error": 0.2285626449431959
            },
            {
                "epoch": 168,
                "error": 0.22848969394743882
            },
            {
                "epoch": 169,
                "error": 0.22841705928901124
            },
            {
                "epoch": 170,
                "error": 0.22834471861647987
            },
            {
                "epoch": 171,
                "error": 0.22827264852848794
            },
            {
                "epoch": 172,
                "error": 0.22820082443230388
            },
            {
                "epoch": 173,
                "error": 0.22812922038465286
            },
            {
                "epoch": 174,
                "error": 0.22805780891234798
            },
            {
                "epoch": 175,
                "error": 0.22798656080995305
            },
            {
                "epoch": 176,
                "error": 0.22791544491143742
            },
            {
                "epoch": 177,
                "error": 0.22784442783259384
            },
            {
                "epoch": 178,
                "error": 0.22777347368091097
            },
            {
                "epoch": 179,
                "error": 0.22770254372977608
            },
            {
                "epoch": 180,
                "error": 0.22763159605450042
            },
            {
                "epoch": 181,
                "error": 0.22756058512904037
            },
            {
                "epoch": 182,
                "error": 0.22748946138491943
            },
            {
                "epoch": 183,
                "error": 0.2274181707385756
            },
            {
                "epoch": 184,
                "error": 0.22734665410146665
            },
            {
                "epoch": 185,
                "error": 0.22727484690087169
            },
            {
                "epoch": 186,
                "error": 0.22720267866174085
            },
            {
                "epoch": 187,
                "error": 0.22713007273639532
            },
            {
                "epoch": 188,
                "error": 0.22705694632719436
            },
            {
                "epoch": 189,
                "error": 0.22698321103876787
            },
            {
                "epoch": 190,
                "error": 0.2269087743350053
            },
            {
                "epoch": 191,
                "error": 0.2268335424728065
            },
            {
                "epoch": 192,
                "error": 0.22675742572513552
            },
            {
                "epoch": 193,
                "error": 0.22668034687876407
            },
            {
                "epoch": 194,
                "error": 0.22660225368157005
            },
            {
                "epoch": 195,
                "error": 0.22652313385248218
            },
            {
                "epoch": 196,
                "error": 0.2264430240815033
            },
            {
                "epoch": 197,
                "error": 0.226361984756803
            },
            {
                "epoch": 198,
                "error": 0.22627997056709545
            },
            {
                "epoch": 199,
                "error": 0.22619648043057358
            },
            {
                "epoch": 200,
                "error": 0.22610994370137444
            },
            {
                "epoch": 201,
                "error": 0.22601718625518608
            },
            {
                "epoch": 202,
                "error": 0.22591384837349351
            },
            {
                "epoch": 203,
                "error": 0.22579586345259028
            },
            {
                "epoch": 204,
                "error": 0.2256611799571683
            },
            {
                "epoch": 205,
                "error": 0.22551859133341912
            },
            {
                "epoch": 206,
                "error": 0.22538543386720153
            },
            {
                "epoch": 207,
                "error": 0.22526882836174428
            },
            {
                "epoch": 208,
                "error": 0.22516729825818113
            },
            {
                "epoch": 209,
                "error": 0.22507771173565236
            },
            {
                "epoch": 210,
                "error": 0.22499731873627857
            },
            {
                "epoch": 211,
                "error": 0.22492399745876576
            },
            {
                "epoch": 212,
                "error": 0.2248561581067373
            },
            {
                "epoch": 213,
                "error": 0.22479261385828414
            },
            {
                "epoch": 214,
                "error": 0.2247324749414269
            },
            {
                "epoch": 215,
                "error": 0.2246750697146549
            },
            {
                "epoch": 216,
                "error": 0.224619887333269
            },
            {
                "epoch": 217,
                "error": 0.22456653624849912
            },
            {
                "epoch": 218,
                "error": 0.22451471404753928
            },
            {
                "epoch": 219,
                "error": 0.2244641853891772
            },
            {
                "epoch": 220,
                "error": 0.22441476574266453
            },
            {
                "epoch": 221,
                "error": 0.22436630931592053
            },
            {
                "epoch": 222,
                "error": 0.22431870003182663
            },
            {
                "epoch": 223,
                "error": 0.2242718447395949
            },
            {
                "epoch": 224,
                "error": 0.22422566807713692
            },
            {
                "epoch": 225,
                "error": 0.2241801085613135
            },
            {
                "epoch": 226,
                "error": 0.2241351155971078
            },
            {
                "epoch": 227,
                "error": 0.22409064717845728
            },
            {
                "epoch": 228,
                "error": 0.22404666811244742
            },
            {
                "epoch": 229,
                "error": 0.2240031486414797
            },
            {
                "epoch": 230,
                "error": 0.22396006336946223
            },
            {
                "epoch": 231,
                "error": 0.22391739042125877
            },
            {
                "epoch": 232,
                "error": 0.2238751107818576
            },
            {
                "epoch": 233,
                "error": 0.22383320777455148
            },
            {
                "epoch": 234,
                "error": 0.2237916666470694
            },
            {
                "epoch": 235,
                "error": 0.22375047424184338
            },
            {
                "epoch": 236,
                "error": 0.22370961873210624
            },
            {
                "epoch": 237,
                "error": 0.22366908940967412
            },
            {
                "epoch": 238,
                "error": 0.22362887651346422
            },
            {
                "epoch": 239,
                "error": 0.22358897109023318
            },
            {
                "epoch": 240,
                "error": 0.22354936488089347
            },
            {
                "epoch": 241,
                "error": 0.22351005022720985
            },
            {
                "epoch": 242,
                "error": 0.22347101999480246
            },
            {
                "epoch": 243,
                "error": 0.2234322675092362
            },
            {
                "epoch": 244,
                "error": 0.2233937865026646
            },
            {
                "epoch": 245,
                "error": 0.22335557106901308
            },
            {
                "epoch": 246,
                "error": 0.2233176156261052
            },
            {
                "epoch": 247,
                "error": 0.22327991488345478
            },
            {
                "epoch": 248,
                "error": 0.22324246381470586
            },
            {
                "epoch": 249,
                "error": 0.223205257633898
            },
            {
                "epoch": 250,
                "error": 0.2231682917749008
            },
            {
                "epoch": 251,
                "error": 0.22313156187348415
            },
            {
                "epoch": 252,
                "error": 0.22309506375158958
            },
            {
                "epoch": 253,
                "error": 0.223058793403454
            },
            {
                "epoch": 254,
                "error": 0.22302274698329566
            },
            {
                "epoch": 255,
                "error": 0.22298692079433186
            },
            {
                "epoch": 256,
                "error": 0.22295131127892762
            },
            {
                "epoch": 257,
                "error": 0.2229159150097213
            },
            {
                "epoch": 258,
                "error": 0.22288072868158995
            },
            {
                "epoch": 259,
                "error": 0.2228457491043488
            },
            {
                "epoch": 260,
                "error": 0.22281097319608453
            },
            {
                "epoch": 261,
                "error": 0.22277639797705195
            },
            {
                "epoch": 262,
                "error": 0.2227420205640648
            },
            {
                "epoch": 263,
                "error": 0.2227078381653231
            },
            {
                "epoch": 264,
                "error": 0.2226738480756334
            },
            {
                "epoch": 265,
                "error": 0.22264004767197687
            },
            {
                "epoch": 266,
                "error": 0.22260643440939454
            },
            {
                "epoch": 267,
                "error": 0.22257300581715414
            },
            {
                "epoch": 268,
                "error": 0.22253975949517527
            },
            {
                "epoch": 269,
                "error": 0.2225066931106898
            },
            {
                "epoch": 270,
                "error": 0.2224738043951145
            },
            {
                "epoch": 271,
                "error": 0.22244109114112107
            },
            {
                "epoch": 272,
                "error": 0.22240855119988454
            },
            {
                "epoch": 273,
                "error": 0.22237618247849802
            },
            {
                "epoch": 274,
                "error": 0.2223439829375406
            },
            {
                "epoch": 275,
                "error": 0.222311950588786
            },
            {
                "epoch": 276,
                "error": 0.2222800834930427
            },
            {
                "epoch": 277,
                "error": 0.22224837975811404
            },
            {
                "epoch": 278,
                "error": 0.22221683753687513
            },
            {
                "epoch": 279,
                "error": 0.2221854550254505
            },
            {
                "epoch": 280,
                "error": 0.22215423046149493
            },
            {
                "epoch": 281,
                "error": 0.2221231621225628
            },
            {
                "epoch": 282,
                "error": 0.22209224832456292
            },
            {
                "epoch": 283,
                "error": 0.2220614874202979
            },
            {
                "epoch": 284,
                "error": 0.22203087779807415
            },
            {
                "epoch": 285,
                "error": 0.22200041788038552
            },
            {
                "epoch": 286,
                "error": 0.22197010612266319
            },
            {
                "epoch": 287,
                "error": 0.2219399410120854
            },
            {
                "epoch": 288,
                "error": 0.22190992106645002
            },
            {
                "epoch": 289,
                "error": 0.22188004483309778
            },
            {
                "epoch": 290,
                "error": 0.22185031088789192
            },
            {
                "epoch": 291,
                "error": 0.22182071783424276
            },
            {
                "epoch": 292,
                "error": 0.22179126430218138
            },
            {
                "epoch": 293,
                "error": 0.22176194894747503
            },
            {
                "epoch": 294,
                "error": 0.22173277045078463
            },
            {
                "epoch": 295,
                "error": 0.22170372751686113
            },
            {
                "epoch": 296,
                "error": 0.221674818873777
            },
            {
                "epoch": 297,
                "error": 0.2216460432721945
            },
            {
                "epoch": 298,
                "error": 0.2216173994846655
            },
            {
                "epoch": 299,
                "error": 0.22158888630496132
            }
        ],
        "error_plot_path": "./modelos/26n_threshold_error_plot.png",
        "weights_path": "./modelos/26n_threshold_weights.npy",
        "confusion_matrix_path": "./modelos/26n_threshold_confusion_matrix.png",
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 26,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 300,
            "VALIDATION_INTERVAL": 1,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "26n_max",
        "timestamp": 1714164900.338843,
        "epoch_errors": [
            0.9880614484491592,
            0.9325464215024559,
            0.8131197883303156,
            0.6512187521504248,
            0.5113875054559699,
            0.40477376643356916,
            0.3232726107535637,
            0.2658492404594377,
            0.22604497703158888,
            0.19971487573814792,
            0.17227552466879406,
            0.15350280040926179,
            0.14047147804303772,
            0.13247740568148442,
            0.12411391115324076,
            0.1187297533712163,
            0.11344741703344073,
            0.10811466620055953,
            0.10071482485334828,
            0.09668708767297787,
            0.09311725341727294,
            0.08905597263075005,
            0.08552960635666602,
            0.08207683821605619,
            0.07970559870080916,
            0.07872261931870861,
            0.07545166734202818,
            0.07229865327632697,
            0.07034837407290663,
            0.06871620751098664,
            0.06728158553609467,
            0.06599034733635228,
            0.06481259852455122,
            0.06372918924804259,
            0.06272705686536216,
            0.06179726848413522,
            0.060934197950533626,
            0.060135504130148884,
            0.05940320578324794,
            0.058746571843087736,
            0.05818629441697426,
            0.05774225243246131,
            0.05732018189947303,
            0.05641655096940718,
            0.05548108557201404,
            0.0546138005545436,
            0.05396482340984223,
            0.05337733767243607,
            0.05283102991164405,
            0.05231649259331793,
            0.05182852040822166,
            0.0513637199755988,
            0.05091962515472022,
            0.05049431309501362,
            0.050086214690538935,
            0.049694010589310895,
            0.049316569056558554,
            0.048952906328651256,
            0.04860216017597369,
            0.04826357198226272,
            0.04793647496630703,
            0.04762028753772333,
            0.04731451182601404,
            0.04701873858205502,
            0.04673266143307349,
            0.04645610681688906,
            0.046189092977704405,
            0.04593194766592537,
            0.045685555056194885,
            0.045451915639914686,
            0.04523555408249319,
            0.045047547133746986,
            0.04491885240136074,
            0.04494743997388812,
            0.045305748647006455,
            0.045479360511648886,
            0.04501995169671748,
            0.04448870280309302,
            0.044050409891480874,
            0.043676122698350674,
            0.04334416103485261,
            0.04304227920235587,
            0.04276315565237717,
            0.04250206800658105,
            0.04225577889612599,
            0.04202196474107928,
            0.04179889958752479,
            0.04158526869204942,
            0.04138005327948187,
            0.041182457251224776,
            0.040991860659789804,
            0.04080779220594178,
            0.040629917702804344,
            0.04045804552979867,
            0.04029215557431243,
            0.04013246854176765,
            0.03997959663017457,
            0.03983488096755057,
            0.039701218165443676,
            0.039585381789959344,
            0.039505807450825894,
            0.039522134851009104,
            0.039753164635549544,
            0.039653313486098914,
            0.039232359589674526,
            0.03888364785517774,
            0.038628966665264386,
            0.03840968569310646,
            0.03820921810837704,
            0.03802157970334992,
            0.037843905670524064,
            0.037674472685468044,
            0.03751208707143394,
            0.037355855155699086,
            0.037205077773730895,
            0.0370591924937838,
            0.0369177377198264,
            0.03678032852960037,
            0.03664663959003,
            0.03651639268523903,
            0.036389347402815096,
            0.036265294053769326,
            0.03614404820912462,
            0.03602544642771403,
            0.035909342875051535,
            0.03579560661771123,
            0.035684119436062006,
            0.03557477403927413,
            0.035467472595803996,
            0.03536212551373465,
            0.03525865042082298,
            0.03515697130554895,
            0.0350570177890095,
            0.03495872450394952,
            0.03486203056213547,
            0.03476687909505563,
            0.03467321685585762,
            0.03458099387272505,
            0.03449016314569627,
            0.03440068038036161,
            0.03431250375301832,
            0.03422559370278002,
            0.03413991274688664,
            0.03405542531606076,
            0.033972097607257945,
            0.03388989745156139,
            0.033808794195313074,
            0.03372875859285078,
            0.033649762709455085,
            0.03357177983330739,
            0.03349478439542326,
            0.03341875189666499,
            0.033343658841057014,
            0.03326948267472498,
            0.03319620172986813,
            0.03312379517324605,
            0.033052242958724734,
            0.03298152578348044,
            0.03291162504750839,
            0.03284252281612109,
            0.03277420178516039,
            0.03270664524867387,
            0.03263983706883629,
            0.03257376164791919,
            0.03250840390213154,
            0.03244374923717428,
            0.032379783525365594,
            0.03231649308421024,
            0.0322538646562959,
            0.032191885390413864,
            0.03213054282380796,
            0.0320698248654671,
            0.03200971978038356,
            0.03195021617470535,
            0.0318913029817187,
            0.031832969448602144,
            0.03177520512389743,
            0.031717999845648236,
            0.03166134373016197,
            0.03160522716135243,
            0.031549640780626394,
            0.031494575477276604,
            0.031440022379351985,
            0.03138597284497299,
            0.0313324184540648,
            0.031279351000483936,
            0.031226762484513546,
            0.031174645105705858,
            0.031122991256051658,
            0.031071793513458165,
            0.03102104463551694,
            0.030970737553545718,
            0.030920865366890447,
            0.03087142133747069,
            0.030822398884557695,
            0.030773791579770754,
            0.030725593142282008,
            0.03067779743421774,
            0.03063039845624626,
            0.03058339034334317,
            0.030536767360724602,
            0.03049052389994105,
            0.03044465447512243,
            0.030399153719368677,
            0.030354016381276838,
            0.030309237321600905,
            0.03026481151003535,
            0.03022073402211846,
            0.030177000036249364,
            0.03013360483081333,
            0.03009054378141087,
            0.030047812358186005,
            0.030005406123248566,
            0.029963320728187914,
            0.029921551911672166,
            0.02988009549713124,
            0.02983894739051857,
            0.02979810357814934,
            0.02975756012461088,
            0.02971731317074363,
            0.029677358931688536,
            0.029637693694998926,
            0.029598313818814153,
            0.029559215730092063,
            0.02952039592289863,
            0.02948185095675251,
            0.029443577455021536,
            0.029405572103370012,
            0.02936783164825472,
            0.029330352895467645,
            0.029293132708723402,
            0.02925616800829044,
            0.029219455769663664,
            0.02918299302227745,
            0.02914677684825723,
            0.029110804381208753,
            0.02907507280504311,
            0.029039579352836527,
            0.029004321305723977,
            0.028969295991824916,
            0.028934500785200448,
            0.02889993310484043,
            0.028865590413680302,
            0.028831470217645427,
            0.028797570064723336,
            0.02876388754406183,
            0.028730420285093042,
            0.028697165956681807,
            0.028664122266298074,
            0.02863128695921237,
            0.02859865781771419,
            0.02856623266035099,
            0.02853400934118926,
            0.028501985749095484,
            0.02847015980703696,
            0.02843852947140184,
            0.028407092731337655,
            0.028375847608107962,
            0.028344792154466822,
            0.028313924454049514,
            0.028283242620780875,
            0.02825274479829874,
            0.028222429159393613,
            0.028192293905463565,
            0.028162337265983182,
            0.028132557497988278,
            0.028102952885573212,
            0.02807352173940277,
            0.028044262396237103,
            0.028015173218469833,
            0.02798625259367829,
            0.02795749893418696,
            0.027928910676642372,
            0.02790048628160013,
            0.027872224233122963,
            0.02784412303839111,
            0.02781618122732261,
            0.027788397352205403,
            0.027760769987338934,
            0.027733297728687666,
            0.02770597919354308,
            0.0276788130201974,
            0.0276517978676257,
            0.02762493241517899,
            0.027598215362285784,
            0.02757164542816386,
            0.027545221351541103,
            0.027518941890385035,
            0.02749280582164237,
            0.027466811940986553,
            0.027440959062574866,
            0.027415246018814246,
            0.027389671660135475,
            0.027364234854776497,
            0.027338934488574242,
            0.027313769464765155,
            0.027288738703794203,
            0.02726384114313244,
            0.027239075737103872,
            0.02721444145671971
        ],
        "validation_errors": [
            {
                "epoch": 0,
                "error": 0.9807100810769608
            },
            {
                "epoch": 1,
                "error": 0.9282600933902463
            },
            {
                "epoch": 2,
                "error": 0.787218629563447
            },
            {
                "epoch": 3,
                "error": 0.6235112271162091
            },
            {
                "epoch": 4,
                "error": 0.5407730089698185
            },
            {
                "epoch": 5,
                "error": 0.5183181128979049
            },
            {
                "epoch": 6,
                "error": 0.40945707706324014
            },
            {
                "epoch": 7,
                "error": 0.35758178928024625
            },
            {
                "epoch": 8,
                "error": 0.36944638200810015
            },
            {
                "epoch": 9,
                "error": 0.32134144338917225
            },
            {
                "epoch": 10,
                "error": 0.31135063499201293
            },
            {
                "epoch": 11,
                "error": 0.30911070614280944
            },
            {
                "epoch": 12,
                "error": 0.3013604829457222
            },
            {
                "epoch": 13,
                "error": 0.29981742787423493
            },
            {
                "epoch": 14,
                "error": 0.31046183598734095
            },
            {
                "epoch": 15,
                "error": 0.3008829038041632
            },
            {
                "epoch": 16,
                "error": 0.2928590864592805
            },
            {
                "epoch": 17,
                "error": 0.28730593678650274
            },
            {
                "epoch": 18,
                "error": 0.28902669855931395
            },
            {
                "epoch": 19,
                "error": 0.2924551941098865
            },
            {
                "epoch": 20,
                "error": 0.29212108594094505
            },
            {
                "epoch": 21,
                "error": 0.28414390600120043
            },
            {
                "epoch": 22,
                "error": 0.27803083831485625
            },
            {
                "epoch": 23,
                "error": 0.27462932621357694
            },
            {
                "epoch": 24,
                "error": 0.2728203888687674
            },
            {
                "epoch": 25,
                "error": 0.27256674185342344
            },
            {
                "epoch": 26,
                "error": 0.2667917280458226
            },
            {
                "epoch": 27,
                "error": 0.26477027347201687
            },
            {
                "epoch": 28,
                "error": 0.26309890992337814
            },
            {
                "epoch": 29,
                "error": 0.26170744494240405
            },
            {
                "epoch": 30,
                "error": 0.2605023229631037
            },
            {
                "epoch": 31,
                "error": 0.2594271942385142
            },
            {
                "epoch": 32,
                "error": 0.25845001537906115
            },
            {
                "epoch": 33,
                "error": 0.2575501222718264
            },
            {
                "epoch": 34,
                "error": 0.25671377495924624
            },
            {
                "epoch": 35,
                "error": 0.25593201730947623
            },
            {
                "epoch": 36,
                "error": 0.2551994532272545
            },
            {
                "epoch": 37,
                "error": 0.254514121768067
            },
            {
                "epoch": 38,
                "error": 0.2538792214751976
            },
            {
                "epoch": 39,
                "error": 0.25330656184868
            },
            {
                "epoch": 40,
                "error": 0.2528117024564329
            },
            {
                "epoch": 41,
                "error": 0.25233869909501533
            },
            {
                "epoch": 42,
                "error": 0.2516410671700965
            },
            {
                "epoch": 43,
                "error": 0.2508048853315321
            },
            {
                "epoch": 44,
                "error": 0.2500366853081416
            },
            {
                "epoch": 45,
                "error": 0.2496657395659059
            },
            {
                "epoch": 46,
                "error": 0.24929942416879772
            },
            {
                "epoch": 47,
                "error": 0.24893679000700664
            },
            {
                "epoch": 48,
                "error": 0.2485807821165304
            },
            {
                "epoch": 49,
                "error": 0.24823351148554118
            },
            {
                "epoch": 50,
                "error": 0.24789592748210504
            },
            {
                "epoch": 51,
                "error": 0.24756827582280566
            },
            {
                "epoch": 52,
                "error": 0.24725044264278978
            },
            {
                "epoch": 53,
                "error": 0.2469421527330786
            },
            {
                "epoch": 54,
                "error": 0.2466430759634458
            },
            {
                "epoch": 55,
                "error": 0.24635288337741007
            },
            {
                "epoch": 56,
                "error": 0.24607127742523605
            },
            {
                "epoch": 57,
                "error": 0.2457980100021516
            },
            {
                "epoch": 58,
                "error": 0.24553289614440682
            },
            {
                "epoch": 59,
                "error": 0.24527582849427132
            },
            {
                "epoch": 60,
                "error": 0.24502679684356565
            },
            {
                "epoch": 61,
                "error": 0.2447859178068984
            },
            {
                "epoch": 62,
                "error": 0.2445534822383401
            },
            {
                "epoch": 63,
                "error": 0.24433003358655678
            },
            {
                "epoch": 64,
                "error": 0.24411650198236107
            },
            {
                "epoch": 65,
                "error": 0.2439144437155775
            },
            {
                "epoch": 66,
                "error": 0.24372649222897272
            },
            {
                "epoch": 67,
                "error": 0.24355726481073509
            },
            {
                "epoch": 68,
                "error": 0.24341533764891518
            },
            {
                "epoch": 69,
                "error": 0.24331799196255757
            },
            {
                "epoch": 70,
                "error": 0.24330405513793496
            },
            {
                "epoch": 71,
                "error": 0.24347361479355076
            },
            {
                "epoch": 72,
                "error": 0.24412370042400486
            },
            {
                "epoch": 73,
                "error": 0.24608161412958723
            },
            {
                "epoch": 74,
                "error": 0.24874587198081508
            },
            {
                "epoch": 75,
                "error": 0.247353412588022
            },
            {
                "epoch": 76,
                "error": 0.24574024982974016
            },
            {
                "epoch": 77,
                "error": 0.24485716163009907
            },
            {
                "epoch": 78,
                "error": 0.2442933242593448
            },
            {
                "epoch": 79,
                "error": 0.24387485506039036
            },
            {
                "epoch": 80,
                "error": 0.24353453809002465
            },
            {
                "epoch": 81,
                "error": 0.243242814900206
            },
            {
                "epoch": 82,
                "error": 0.2429846091631244
            },
            {
                "epoch": 83,
                "error": 0.2427512095414891
            },
            {
                "epoch": 84,
                "error": 0.24253710744790385
            },
            {
                "epoch": 85,
                "error": 0.2423386122063645
            },
            {
                "epoch": 86,
                "error": 0.24215317446510132
            },
            {
                "epoch": 87,
                "error": 0.24197902532489218
            },
            {
                "epoch": 88,
                "error": 0.24181497426532697
            },
            {
                "epoch": 89,
                "error": 0.24166029886824134
            },
            {
                "epoch": 90,
                "error": 0.24151469799797654
            },
            {
                "epoch": 91,
                "error": 0.24137830052259834
            },
            {
                "epoch": 92,
                "error": 0.24125173743299497
            },
            {
                "epoch": 93,
                "error": 0.2411363048640087
            },
            {
                "epoch": 94,
                "error": 0.24103427988438617
            },
            {
                "epoch": 95,
                "error": 0.240949522434952
            },
            {
                "epoch": 96,
                "error": 0.24088866191689864
            },
            {
                "epoch": 97,
                "error": 0.240863583327503
            },
            {
                "epoch": 98,
                "error": 0.24089707404240468
            },
            {
                "epoch": 99,
                "error": 0.2410368901488402
            },
            {
                "epoch": 100,
                "error": 0.24139313264861145
            },
            {
                "epoch": 101,
                "error": 0.24221351004805192
            },
            {
                "epoch": 102,
                "error": 0.2435159788421135
            },
            {
                "epoch": 103,
                "error": 0.24340302247787157
            },
            {
                "epoch": 104,
                "error": 0.2425629770644305
            },
            {
                "epoch": 105,
                "error": 0.24208163199269117
            },
            {
                "epoch": 106,
                "error": 0.24171883148748963
            },
            {
                "epoch": 107,
                "error": 0.24140647270642038
            },
            {
                "epoch": 108,
                "error": 0.2411232705007292
            },
            {
                "epoch": 109,
                "error": 0.24086113162568262
            },
            {
                "epoch": 110,
                "error": 0.24061608439164373
            },
            {
                "epoch": 111,
                "error": 0.2403856494518287
            },
            {
                "epoch": 112,
                "error": 0.24016799937630226
            },
            {
                "epoch": 113,
                "error": 0.23996166074968503
            },
            {
                "epoch": 114,
                "error": 0.2397653944436167
            },
            {
                "epoch": 115,
                "error": 0.23957813867992384
            },
            {
                "epoch": 116,
                "error": 0.23939897595910573
            },
            {
                "epoch": 117,
                "error": 0.23922711008703967
            },
            {
                "epoch": 118,
                "error": 0.23906184823956417
            },
            {
                "epoch": 119,
                "error": 0.23890258611252244
            },
            {
                "epoch": 120,
                "error": 0.23874879532846494
            },
            {
                "epoch": 121,
                "error": 0.23860001267771916
            },
            {
                "epoch": 122,
                "error": 0.23845583091999664
            },
            {
                "epoch": 123,
                "error": 0.2383158909313212
            },
            {
                "epoch": 124,
                "error": 0.23817987501055088
            },
            {
                "epoch": 125,
                "error": 0.238047501180892
            },
            {
                "epoch": 126,
                "error": 0.23791851834081068
            },
            {
                "epoch": 127,
                "error": 0.23779270213692297
            },
            {
                "epoch": 128,
                "error": 0.237669851448591
            },
            {
                "epoch": 129,
                "error": 0.23754978538974714
            },
            {
                "epoch": 130,
                "error": 0.237432340747602
            },
            {
                "epoch": 131,
                "error": 0.2373173697902803
            },
            {
                "epoch": 132,
                "error": 0.23720473838614037
            },
            {
                "epoch": 133,
                "error": 0.2370943243866685
            },
            {
                "epoch": 134,
                "error": 0.2369860162325621
            },
            {
                "epoch": 135,
                "error": 0.2368797117491228
            },
            {
                "epoch": 136,
                "error": 0.2367753171025306
            },
            {
                "epoch": 137,
                "error": 0.2366727458931241
            },
            {
                "epoch": 138,
                "error": 0.23657191836561325
            },
            {
                "epoch": 139,
                "error": 0.2364727607193217
            },
            {
                "epoch": 140,
                "error": 0.2363752045042052
            },
            {
                "epoch": 141,
                "error": 0.23627918609059978
            },
            {
                "epoch": 142,
                "error": 0.2361846462024997
            },
            {
                "epoch": 143,
                "error": 0.23609152950570872
            },
            {
                "epoch": 144,
                "error": 0.23599978424351103
            },
            {
                "epoch": 145,
                "error": 0.23590936191357686
            },
            {
                "epoch": 146,
                "error": 0.23582021698076208
            },
            {
                "epoch": 147,
                "error": 0.23573230662119368
            },
            {
                "epoch": 148,
                "error": 0.23564559049372302
            },
            {
                "epoch": 149,
                "error": 0.23556003053534846
            },
            {
                "epoch": 150,
                "error": 0.2354755907776905
            },
            {
                "epoch": 151,
                "error": 0.23539223718200428
            },
            {
                "epoch": 152,
                "error": 0.2353099374905322
            },
            {
                "epoch": 153,
                "error": 0.23522866109231808
            },
            {
                "epoch": 154,
                "error": 0.2351483789018173
            },
            {
                "epoch": 155,
                "error": 0.23506906324888063
            },
            {
                "epoch": 156,
                "error": 0.23499068777884533
            },
            {
                "epoch": 157,
                "error": 0.23491322736164472
            },
            {
                "epoch": 158,
                "error": 0.23483665800896197
            },
            {
                "epoch": 159,
                "error": 0.23476095679859482
            },
            {
                "epoch": 160,
                "error": 0.23468610180527388
            },
            {
                "epoch": 161,
                "error": 0.23461207203728127
            },
            {
                "epoch": 162,
                "error": 0.2345388473782911
            },
            {
                "epoch": 163,
                "error": 0.2344664085339118
            },
            {
                "epoch": 164,
                "error": 0.23439473698247582
            },
            {
                "epoch": 165,
                "error": 0.23432381492967166
            },
            {
                "epoch": 166,
                "error": 0.2342536252666559
            },
            {
                "epoch": 167,
                "error": 0.234184151531319
            },
            {
                "epoch": 168,
                "error": 0.23411537787242673
            },
            {
                "epoch": 169,
                "error": 0.23404728901636698
            },
            {
                "epoch": 170,
                "error": 0.23397987023628072
            },
            {
                "epoch": 171,
                "error": 0.23391310732336407
            },
            {
                "epoch": 172,
                "error": 0.2338469865601582
            },
            {
                "epoch": 173,
                "error": 0.23378149469565837
            },
            {
                "epoch": 174,
                "error": 0.2337166189220861
            },
            {
                "epoch": 175,
                "error": 0.23365234685319752
            },
            {
                "epoch": 176,
                "error": 0.23358866650399296
            },
            {
                "epoch": 177,
                "error": 0.2335255662717247
            },
            {
                "epoch": 178,
                "error": 0.23346303491809609
            },
            {
                "epoch": 179,
                "error": 0.2334010615525598
            },
            {
                "epoch": 180,
                "error": 0.23333963561663595
            },
            {
                "epoch": 181,
                "error": 0.23327874686916628
            },
            {
                "epoch": 182,
                "error": 0.23321838537244186
            },
            {
                "epoch": 183,
                "error": 0.23315854147913576
            },
            {
                "epoch": 184,
                "error": 0.2330992058199862
            },
            {
                "epoch": 185,
                "error": 0.23304036929216945
            },
            {
                "epoch": 186,
                "error": 0.23298202304832918
            },
            {
                "epoch": 187,
                "error": 0.2329241584861959
            },
            {
                "epoch": 188,
                "error": 0.23286676723877708
            },
            {
                "epoch": 189,
                "error": 0.2328098411650632
            },
            {
                "epoch": 190,
                "error": 0.23275337234122678
            },
            {
                "epoch": 191,
                "error": 0.23269735305227404
            },
            {
                "epoch": 192,
                "error": 0.23264177578412473
            },
            {
                "epoch": 193,
                "error": 0.23258663321609196
            },
            {
                "epoch": 194,
                "error": 0.23253191821373476
            },
            {
                "epoch": 195,
                "error": 0.2324776238220627
            },
            {
                "epoch": 196,
                "error": 0.232423743259068
            },
            {
                "epoch": 197,
                "error": 0.2323702699095696
            },
            {
                "epoch": 198,
                "error": 0.23231719731934636
            },
            {
                "epoch": 199,
                "error": 0.23226451918954183
            },
            {
                "epoch": 200,
                "error": 0.23221222937133215
            },
            {
                "epoch": 201,
                "error": 0.2321603218608301
            },
            {
                "epoch": 202,
                "error": 0.2321087907942222
            },
            {
                "epoch": 203,
                "error": 0.2320576304431201
            },
            {
                "epoch": 204,
                "error": 0.2320068352101165
            },
            {
                "epoch": 205,
                "error": 0.23195639962453146
            },
            {
                "epoch": 206,
                "error": 0.23190631833834577
            },
            {
                "epoch": 207,
                "error": 0.23185658612229962
            },
            {
                "epoch": 208,
                "error": 0.2318071978621607
            },
            {
                "epoch": 209,
                "error": 0.2317581485551433
            },
            {
                "epoch": 210,
                "error": 0.23170943330647412
            },
            {
                "epoch": 211,
                "error": 0.23166104732609996
            },
            {
                "epoch": 212,
                "error": 0.2316129859255225
            },
            {
                "epoch": 213,
                "error": 0.2315652445147615
            },
            {
                "epoch": 214,
                "error": 0.23151781859943835
            },
            {
                "epoch": 215,
                "error": 0.23147070377796755
            },
            {
                "epoch": 216,
                "error": 0.23142389573886085
            },
            {
                "epoch": 217,
                "error": 0.23137739025813084
            },
            {
                "epoch": 218,
                "error": 0.23133118319679433
            },
            {
                "epoch": 219,
                "error": 0.23128527049846564
            },
            {
                "epoch": 220,
                "error": 0.23123964818704232
            },
            {
                "epoch": 221,
                "error": 0.2311943123644697
            },
            {
                "epoch": 222,
                "error": 0.23114925920859347
            },
            {
                "epoch": 223,
                "error": 0.23110448497108252
            },
            {
                "epoch": 224,
                "error": 0.2310599859754277
            },
            {
                "epoch": 225,
                "error": 0.23101575861501283
            },
            {
                "epoch": 226,
                "error": 0.23097179935124917
            },
            {
                "epoch": 227,
                "error": 0.23092810471177627
            },
            {
                "epoch": 228,
                "error": 0.23088467128872373
            },
            {
                "epoch": 229,
                "error": 0.23084149573703205
            },
            {
                "epoch": 230,
                "error": 0.2307985747728273
            },
            {
                "epoch": 231,
                "error": 0.2307559051718554
            },
            {
                "epoch": 232,
                "error": 0.23071348376796025
            },
            {
                "epoch": 233,
                "error": 0.23067130745161823
            },
            {
                "epoch": 234,
                "error": 0.23062937316851617
            },
            {
                "epoch": 235,
                "error": 0.23058767791817675
            },
            {
                "epoch": 236,
                "error": 0.23054621875262668
            },
            {
                "epoch": 237,
                "error": 0.230504992775107
            },
            {
                "epoch": 238,
                "error": 0.23046399713882404
            },
            {
                "epoch": 239,
                "error": 0.23042322904573886
            },
            {
                "epoch": 240,
                "error": 0.2303826857453942
            },
            {
                "epoch": 241,
                "error": 0.2303423645337782
            },
            {
                "epoch": 242,
                "error": 0.23030226275221768
            },
            {
                "epoch": 243,
                "error": 0.23026237778631323
            },
            {
                "epoch": 244,
                "error": 0.2302227070648982
            },
            {
                "epoch": 245,
                "error": 0.23018324805903229
            },
            {
                "epoch": 246,
                "error": 0.23014399828102422
            },
            {
                "epoch": 247,
                "error": 0.230104955283483
            },
            {
                "epoch": 248,
                "error": 0.2300661166583953
            },
            {
                "epoch": 249,
                "error": 0.23002748003623094
            },
            {
                "epoch": 250,
                "error": 0.2299890430850753
            },
            {
                "epoch": 251,
                "error": 0.22995080350978098
            },
            {
                "epoch": 252,
                "error": 0.22991275905114886
            },
            {
                "epoch": 253,
                "error": 0.22987490748513068
            },
            {
                "epoch": 254,
                "error": 0.22983724662205204
            },
            {
                "epoch": 255,
                "error": 0.2297997743058582
            },
            {
                "epoch": 256,
                "error": 0.22976248841338148
            },
            {
                "epoch": 257,
                "error": 0.22972538685362595
            },
            {
                "epoch": 258,
                "error": 0.22968846756707545
            },
            {
                "epoch": 259,
                "error": 0.22965172852501708
            },
            {
                "epoch": 260,
                "error": 0.22961516772888202
            },
            {
                "epoch": 261,
                "error": 0.2295787832096108
            },
            {
                "epoch": 262,
                "error": 0.22954257302702613
            },
            {
                "epoch": 263,
                "error": 0.229506535269228
            },
            {
                "epoch": 264,
                "error": 0.22947066805200508
            },
            {
                "epoch": 265,
                "error": 0.2294349695182584
            },
            {
                "epoch": 266,
                "error": 0.22939943783744243
            },
            {
                "epoch": 267,
                "error": 0.22936407120502034
            },
            {
                "epoch": 268,
                "error": 0.22932886784193368
            },
            {
                "epoch": 269,
                "error": 0.22929382599408404
            },
            {
                "epoch": 270,
                "error": 0.22925894393183058
            },
            {
                "epoch": 271,
                "error": 0.2292242199494994
            },
            {
                "epoch": 272,
                "error": 0.22918965236490588
            },
            {
                "epoch": 273,
                "error": 0.22915523951888828
            },
            {
                "epoch": 274,
                "error": 0.2291209797748551
            },
            {
                "epoch": 275,
                "error": 0.22908687151834334
            },
            {
                "epoch": 276,
                "error": 0.2290529131565881
            },
            {
                "epoch": 277,
                "error": 0.2290191031181033
            },
            {
                "epoch": 278,
                "error": 0.2289854398522732
            },
            {
                "epoch": 279,
                "error": 0.2289519218289545
            },
            {
                "epoch": 280,
                "error": 0.2289185475380907
            },
            {
                "epoch": 281,
                "error": 0.22888531548933383
            },
            {
                "epoch": 282,
                "error": 0.22885222421167806
            },
            {
                "epoch": 283,
                "error": 0.2288192722531007
            },
            {
                "epoch": 284,
                "error": 0.2287864581802186
            },
            {
                "epoch": 285,
                "error": 0.22875378057794526
            },
            {
                "epoch": 286,
                "error": 0.22872123804916486
            },
            {
                "epoch": 287,
                "error": 0.22868882921441336
            },
            {
                "epoch": 288,
                "error": 0.22865655271156557
            },
            {
                "epoch": 289,
                "error": 0.2286244071955341
            },
            {
                "epoch": 290,
                "error": 0.2285923913379781
            },
            {
                "epoch": 291,
                "error": 0.2285605038270175
            },
            {
                "epoch": 292,
                "error": 0.22852874336695742
            },
            {
                "epoch": 293,
                "error": 0.22849710867802278
            },
            {
                "epoch": 294,
                "error": 0.22846559849609832
            },
            {
                "epoch": 295,
                "error": 0.2284342115724797
            },
            {
                "epoch": 296,
                "error": 0.2284029466736328
            },
            {
                "epoch": 297,
                "error": 0.22837180258095904
            },
            {
                "epoch": 298,
                "error": 0.22834077809057293
            },
            {
                "epoch": 299,
                "error": 0.2283098720130857
            }
        ],
        "error_plot_path": "./modelos/26n_max_error_plot.png",
        "weights_path": "./modelos/26n_max_weights.npy",
        "confusion_matrix_path": "./modelos/26n_max_confusion_matrix.png",
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 26,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "max_value",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 300,
            "VALIDATION_INTERVAL": 1,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold",
        "timestamp": 1714165553.48468,
        "epoch_errors": [
            0.982289540086461,
            0.8745882368569236,
            0.6602962592872612,
            0.4595093954033948,
            0.33025786818719866,
            0.2554048874727589,
            0.20279268070361334,
            0.1684794201588383,
            0.14133833759638542,
            0.1221862248952337,
            0.10712587204930911,
            0.09427799884823648,
            0.09025201738105393,
            0.08398973860540405,
            0.07720316564604766,
            0.06978501307236559,
            0.06649536295768754,
            0.06358194584410452,
            0.05956719183556484,
            0.05793617804873451,
            0.057120330707894615,
            0.055699310505934255,
            0.055006379685803915,
            0.05463760644387892,
            0.051071079140740785,
            0.047754209924660625,
            0.04595851040776899,
            0.04466587108741862,
            0.04372725196827649,
            0.0434985695605908,
            0.04331131386114249,
            0.041431556167295776,
            0.040562558235433574,
            0.040334452319819594,
            0.03936834728791719,
            0.03793982596746334,
            0.03716300304584792,
            0.03652443320331111,
            0.035955946872671625,
            0.03543777051653353,
            0.034959167983337903,
            0.034513307519302094,
            0.03409543343131222,
            0.03370202901903855,
            0.03333038410266464,
            0.03297835487915809,
            0.0326442250859143,
            0.0323266274281906,
            0.03202450822541089,
            0.03173713336541517,
            0.03146414959812285,
            0.031205743666355326,
            0.0309630106454931,
            0.03073884162298295,
            0.0305403131450103,
            0.030386279043607207,
            0.030336600998791412,
            0.030580791039896114,
            0.03064182699806978,
            0.030068621324376356,
            0.029312762776924385,
            0.028953206480445356,
            0.02864071616251841,
            0.02836009589785705,
            0.028102818069017897,
            0.02786367758672252,
            0.027639215969846264,
            0.027426995640320792,
            0.02722522340055508,
            0.027032535670640213,
            0.026847867230799644,
            0.02667036681835712,
            0.026499340705439762,
            0.026334213796093513,
            0.026174502106829724,
            0.026019792868953458,
            0.025869729863485413,
            0.02572400242635078,
            0.025582337076811477,
            0.02544449105246139,
            0.025310247251031974,
            0.025179410224712245,
            0.02505180297202559,
            0.024927264341274145,
            0.024805646908154753,
            0.024686815224860062,
            0.024570644363076,
            0.024457018691649735,
            0.024345830843280052,
            0.02423698083472605,
            0.024130375312679822,
            0.024025926903269997,
            0.02392355364763144,
            0.023823178509433763,
            0.0237247289429573,
            0.023628136512422893,
            0.023533336554959202,
            0.023440267880923446,
            0.023348872506363413,
            0.023259095413271865,
            0.02317088433398394,
            0.023084189556640766,
            0.022998963749111864,
            0.022915161799155936,
            0.02283274066891997,
            0.02275165926214601,
            0.022671878302677282,
            0.022593360223044198,
            0.022516069062070904,
            0.022439970370576538,
            0.02236503112436169,
            0.022291219643768057,
            0.022218505519184417,
            0.02214685954194377,
            0.022076253640120214,
            0.022006660818788555,
            0.021938055104355786,
            0.02187041149261757,
            0.021803705900225557,
            0.02173791511928665,
            0.02167301677484088,
            0.021608989284989895,
            0.02154581182347117,
            0.021483464284489943,
            0.021421927249640663,
            0.02136118195676345,
            0.021301210270595162,
            0.02124199465508782,
            0.021183518147276433,
            0.021125764332589794,
            0.02106871732150612,
            0.021012361727462875,
            0.020956682645938387,
            0.02090166563462903,
            0.02084729669465124,
            0.020793562252703627,
            0.02074044914412927,
            0.020687944596823018,
            0.020636036215931387,
            0.02058471196929858,
            0.020533960173613676,
            0.020483769481217752,
            0.020434128867533673,
            0.020385027619081217,
            0.020336455322046622,
            0.020288401851373115,
            0.02024085736034586,
            0.020193812270642618,
            0.02014725726282556,
            0.020101183267251167,
            0.020055581455374533,
            0.020010443231429132,
            0.01996576022446137,
            0.01992152428070226,
            0.019877727456258452,
            0.01983436201010755,
            0.019791420397381507,
            0.01974889526292431,
            0.019706779435110424,
            0.019665065919911674,
            0.01962374789519978,
            0.019582818705274393,
            0.019542271855605052,
            0.01950210100777748,
            0.019462299974634722,
            0.019422862715604037,
            0.019383783332201154,
            0.019345056063703545,
            0.01930667528298599,
            0.01926863549250968,
            0.01923093132045988,
            0.019193557517024083,
            0.019156508950805624,
            0.01911978060536608,
            0.019083367575891793,
            0.019047265065978192,
            0.019011468384528076,
            0.018975972942758088,
            0.018940774251309567,
            0.01890586791745913,
            0.01887124964242487,
            0.018836915218764645,
            0.01880286052786204,
            0.018769081537497446,
            0.01873557429949979,
            0.018702334947476553,
            0.018669359694618796,
            0.018636644831577807,
            0.018604186724411144,
            0.018571981812595374,
            0.018540026607102373,
            0.018508317688537463,
            0.018476851705336715,
            0.018445625372021098,
            0.01841463546750555,
            0.018383878833461008,
            0.018353352372727054,
            0.01832305304777361,
            0.01829297787921003,
            0.01826312394433944,
            0.01823348837575731,
            0.018204068359991794,
            0.018174861136185164,
            0.01814586399481486,
            0.018117074276451792,
            0.018088489370555908,
            0.018060106714306873,
            0.018031923791468826,
            0.01800393813128809,
            0.017976147307423005,
            0.017948548936904087,
            0.017921140679124183,
            0.017893920234857107,
            0.01786688534530431,
            0.017840033791168223,
            0.01781336339175142,
            0.01778687200408094,
            0.01776055752205704,
            0.017734417875625085,
            0.017708451029970596,
            0.01768265498473562,
            0.017657027773257165,
            0.01763156746182551,
            0.017606272148962657,
            0.017581139964720657,
            0.0175561690699977,
            0.017531357655872725,
            0.017506703942958092,
            0.01748220618076823,
            0.017457862647105634,
            0.017433671647462446,
            0.017409631514437453,
            0.017385740607168423,
            0.017361997310778688,
            0.017338400035837875,
            0.017314947217836614,
            0.017291637316674126,
            0.01726846881615907,
            0.017245440223522646,
            0.017222550068943975,
            0.017199796905087116,
            0.017177179306649786,
            0.017154695869922916,
            0.017132345212361205,
            0.0171101259721639,
            0.01708803680786606,
            0.017066076397939528,
            0.017044243440403416,
            0.01702253665244419,
            0.017000954770044627,
            0.016979496547621528,
            0.01695816075767227,
            0.016936946190429455,
            0.01691585165352368,
            0.01689487597165431,
            0.01687401798626783,
            0.016853276555243654,
            0.016832650552586956,
            0.016812138868129305,
            0.01679174040723503,
            0.016771454090515194,
            0.016751278853547786,
            0.016731213646603845,
            0.016711257434380507,
            0.016691409195739266,
            0.016671667923450557,
            0.016652032623943873,
            0.016632502317063584,
            0.01661307603582946,
            0.016593752826203595,
            0.01657453174686138,
            0.016555411868968098,
            0.01653639227596001,
            0.016517472063330426,
            0.01649865033842019,
            0.016479926220212878,
            0.016461298839134084,
            0.016442767336855152,
            0.016424330866101126,
            0.01640598859046263,
            0.0163877396842117,
            0.016369583332121573,
            0.01635151872929005,
            0.016333545080967016,
            0.016315661602384682,
            0.0162978675185922,
            0.0162801620642932,
            0.0162625444836866,
            0.016245014030311183,
            0.01622756996689249,
            0.016210211565193637,
            0.016192938105868707,
            0.016175748878319133,
            0.01615864318055298,
            0.016141620319047176,
            0.01612467960861208,
            0.01610782037225935,
            0.016091041941071783,
            0.016074343654076163,
            0.01605772485811834
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.2595252552314024
            },
            {
                "epoch": 19,
                "error": 0.220151379064991
            },
            {
                "epoch": 29,
                "error": 0.20707865139871132
            },
            {
                "epoch": 39,
                "error": 0.20285871904579741
            },
            {
                "epoch": 49,
                "error": 0.19961229128612815
            },
            {
                "epoch": 59,
                "error": 0.19942210560389795
            },
            {
                "epoch": 69,
                "error": 0.1969393228174133
            },
            {
                "epoch": 79,
                "error": 0.19529551739250534
            },
            {
                "epoch": 89,
                "error": 0.19396699748135723
            },
            {
                "epoch": 99,
                "error": 0.19284769150257638
            },
            {
                "epoch": 109,
                "error": 0.19188033384256029
            },
            {
                "epoch": 119,
                "error": 0.1910288881966734
            },
            {
                "epoch": 129,
                "error": 0.19026894323049223
            },
            {
                "epoch": 139,
                "error": 0.18958312805523497
            },
            {
                "epoch": 149,
                "error": 0.1889586169119737
            },
            {
                "epoch": 159,
                "error": 0.18838565952342878
            },
            {
                "epoch": 169,
                "error": 0.1878566649052754
            },
            {
                "epoch": 179,
                "error": 0.18736560439047176
            },
            {
                "epoch": 189,
                "error": 0.1869076084785797
            },
            {
                "epoch": 199,
                "error": 0.18647868635912238
            },
            {
                "epoch": 209,
                "error": 0.18607552578650455
            },
            {
                "epoch": 219,
                "error": 0.18569534712894326
            },
            {
                "epoch": 229,
                "error": 0.18533579485842477
            },
            {
                "epoch": 239,
                "error": 0.1849948554819312
            },
            {
                "epoch": 249,
                "error": 0.1846707945066351
            },
            {
                "epoch": 259,
                "error": 0.18436210734497765
            },
            {
                "epoch": 269,
                "error": 0.1840674805906594
            },
            {
                "epoch": 279,
                "error": 0.18378576112281478
            },
            {
                "epoch": 289,
                "error": 0.18351593119876586
            },
            {
                "epoch": 299,
                "error": 0.18325708818526498
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_error_plot.png",
        "weights_path": "./modelos/60n_threshold_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_confusion_matrix.png",
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 300,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_leaky_relu",
        "timestamp": 1714166011.102999,
        "epoch_errors": [
            0.9621601670002261,
            0.8388137685874129,
            0.6906950088228717,
            0.5667060729642429,
            0.4758387821620954,
            0.41410915022819844,
            0.3714107404179716,
            0.33831282738293983,
            0.3116012029870262,
            0.29007701333723535,
            0.2714194238250911,
            0.25611421355079655,
            0.2423121140674325,
            0.2298667725835141,
            0.21887858503846686,
            0.21024824422538163,
            0.20136772569817912,
            0.1933229308840279,
            0.18633145985999242,
            0.18001143834764113,
            0.17424109017325504,
            0.16889561794930746,
            0.16416757240109717,
            0.15965289270490793,
            0.15569809423213204,
            0.15184437759483468,
            0.1484995046923704,
            0.1450716224420945,
            0.14222399331827226,
            0.13950555995628452,
            0.13688370702532723,
            0.1343911959566784,
            0.13215638603763957,
            0.1299597918301206,
            0.1278481184427975,
            0.1260290649271502,
            0.12431282760134241,
            0.12252713430562615,
            0.12079610901460419,
            0.11933383376800989,
            0.11786913058802663,
            0.11646719012158653,
            0.11505985365110077,
            0.11374210727678959,
            0.11252943877109729,
            0.1113942216337583,
            0.11010218666397831,
            0.10901473559491553,
            0.1079079532779826,
            0.107006359150934,
            0.10597524084791293,
            0.10508842235100065,
            0.10421953147468266,
            0.10333897043487322,
            0.10253539112928424,
            0.10226900438520765,
            0.10141044920729803,
            0.1006273966910334,
            0.0998541066611759,
            0.09904236561434314,
            0.09838965223797996,
            0.09764132986075216,
            0.09701204919978708,
            0.09701858439140529,
            0.09641245134809225,
            0.09568461435930467,
            0.09511172118622846,
            0.09456307901885247,
            0.0939973490162333,
            0.09342481679988189,
            0.09286765855175551,
            0.09242975246977217,
            0.09190194042162625,
            0.09143731562184411,
            0.09103890634823975,
            0.09060691499348311,
            0.09018084013964146,
            0.08977794093740123,
            0.0894108124058326,
            0.08900823203403073,
            0.08867306827966498,
            0.08832153463880482,
            0.08798993593875412,
            0.08768386365288279,
            0.08737240971662677,
            0.08703931676841978,
            0.08677133602637312,
            0.0864601511843444,
            0.08620435620221975,
            0.08592197609917901,
            0.08567318539017012,
            0.08539413241752773,
            0.08515141565665513,
            0.08490788940786025,
            0.08466779651878842,
            0.08444478444220109,
            0.08422647290423335,
            0.08398672250749852,
            0.08380038300950172,
            0.08358792199621236,
            0.08338199323864542,
            0.083193176162094,
            0.08298863456484969,
            0.08279492497221766,
            0.0826249904153095,
            0.08244272765964608,
            0.08226047764548747,
            0.0820976429646695,
            0.08192631983774742,
            0.08175946941840002,
            0.08159361590074729,
            0.08143442554809839,
            0.0812930158182645,
            0.0811498118552823,
            0.08097660882429755,
            0.08085322755424462,
            0.08070472563656785,
            0.08056133420547373,
            0.08042305406256889,
            0.08030423315637825,
            0.08016681188354396,
            0.08003237228992718,
            0.07991176187780494,
            0.07979164885015264,
            0.07965951405389524,
            0.07954205207863492,
            0.07943230113291684,
            0.07931712492145486,
            0.07919431408585777,
            0.07908775293917555,
            0.07897783718946119,
            0.07887154029689823,
            0.07876611256410324,
            0.07866434098938681,
            0.07856069339160617,
            0.0784644841058612,
            0.07836141840292662,
            0.07826918074025899,
            0.07816608302764773,
            0.07806997174336702,
            0.07798110669517629,
            0.0778922285499653,
            0.07779880995500289,
            0.07771039597649684,
            0.07761898618092,
            0.0775366624172244,
            0.0774517189807459,
            0.07736674705472901,
            0.0772875982126141,
            0.07720730746618754,
            0.0771231462402587,
            0.07704754469521126,
            0.07697674564619617,
            0.07689576192022554,
            0.07681905254578211,
            0.07674466144752512,
            0.0766692487067644,
            0.07660139250795622,
            0.07652909107515697,
            0.07646009418049145,
            0.07639122133118877,
            0.07631907924155902,
            0.07625125019182487,
            0.07618438451380867,
            0.0761193985377265,
            0.07605621218123995,
            0.07599304213656166,
            0.07592895446701861,
            0.07586842655204035,
            0.07580869316827486,
            0.07574584230237452,
            0.07568693108735328,
            0.0756281923680927,
            0.07556750877062506,
            0.07551541133779706,
            0.07545560999390022,
            0.07540344146633068,
            0.07534677964190424,
            0.07529469297656245,
            0.07523979383103285,
            0.07518624743473057,
            0.07513784334287806,
            0.07508295746247984,
            0.07503299364640979,
            0.0749830033689609,
            0.07493399540844849,
            0.07488531191094296,
            0.07483637032346838,
            0.07478706703801481,
            0.07474105577566645,
            0.07469370848468108,
            0.07464831543518029,
            0.07460344808181674,
            0.07455647336011535,
            0.07451299388717171,
            0.07446857674782532,
            0.07442553182432818,
            0.07438203640371847,
            0.07433990998796208,
            0.07429789605975741,
            0.07425546542157457,
            0.07421382683171887,
            0.07417371192182763,
            0.07413164478685819,
            0.07409265229168766,
            0.07405314636920528,
            0.07401331938621966,
            0.07397519664745822,
            0.07393662475945109,
            0.07389815295835558,
            0.07386026027611828,
            0.0738231751043795,
            0.0737859582211628,
            0.0737507361603255,
            0.07371296658698777,
            0.07367768217775705,
            0.07364156934784238,
            0.0736068990738939,
            0.07357174899899672,
            0.07353639539461274,
            0.07350225410461204,
            0.07346866700091012,
            0.07343375870502941,
            0.07340138589722538,
            0.07336842917547877,
            0.07333490292179802,
            0.07330213793197222,
            0.07327055208515591,
            0.07323754808541368,
            0.07320637344248912,
            0.07317445552040405,
            0.07314322140728756,
            0.07311270851369213,
            0.0730816400445031,
            0.07305105052846955,
            0.07302173811125286,
            0.07299129412152239,
            0.07296208770422707,
            0.07293251392546245,
            0.07290401299415877,
            0.07287458924877523,
            0.07284573507025198,
            0.07281779269061212,
            0.07278923735483867,
            0.07276174475324468,
            0.07273455241590746,
            0.07270696327195046,
            0.0726792442295978,
            0.07265299671984081,
            0.07262519215790274,
            0.07259930586809635,
            0.07257281529164758,
            0.07254685162871956,
            0.07252085546611396,
            0.07249534657896921,
            0.07246983273271058,
            0.07244480918202009,
            0.07241963881988835,
            0.07239498538490495,
            0.07237062053223876,
            0.07234622466287115,
            0.0723217187763519,
            0.07229779898709125,
            0.07227425858974014,
            0.07225046917883171,
            0.07222724730888112,
            0.0722038014735114,
            0.07218076951437531,
            0.0721577125605819,
            0.07213511980322239,
            0.07211254196050042,
            0.07209006848130572,
            0.07206783053985936,
            0.07204567775640094,
            0.072023763376658,
            0.07200201029363479,
            0.07198022121266083,
            0.07195863174055891,
            0.07193736575495402,
            0.0719161972394675,
            0.07189464782248861,
            0.07187377718470332,
            0.07185269290862226,
            0.07183225428438986,
            0.07181141499509615,
            0.071790897832318,
            0.07177040446146318,
            0.07175037108333383,
            0.07172998769829188,
            0.07170991987132813,
            0.07169004694421718,
            0.07167027817042682,
            0.07165047812073826,
            0.07163084245912224,
            0.07161152314632256,
            0.07159207519342234,
            0.07157275779310592,
            0.07155352804769961,
            0.07153474743565708,
            0.07151574084321159
        ],
        "validation_errors": [
            {
                "epoch": 0,
                "error": 0.918167537792774
            },
            {
                "epoch": 1,
                "error": 0.7965160341256043
            },
            {
                "epoch": 2,
                "error": 0.6681586131243795
            },
            {
                "epoch": 3,
                "error": 0.5743035646754344
            },
            {
                "epoch": 4,
                "error": 0.5129979478402872
            },
            {
                "epoch": 5,
                "error": 0.4729491192792184
            },
            {
                "epoch": 6,
                "error": 0.4500280312595854
            },
            {
                "epoch": 7,
                "error": 0.42887223247316464
            },
            {
                "epoch": 8,
                "error": 0.4148329832124181
            },
            {
                "epoch": 9,
                "error": 0.40207322393159123
            },
            {
                "epoch": 10,
                "error": 0.3928282330911326
            },
            {
                "epoch": 11,
                "error": 0.38375986439716403
            },
            {
                "epoch": 12,
                "error": 0.37675061208952315
            },
            {
                "epoch": 13,
                "error": 0.3726434109678973
            },
            {
                "epoch": 14,
                "error": 0.36778866007122063
            },
            {
                "epoch": 15,
                "error": 0.36418237043273405
            },
            {
                "epoch": 16,
                "error": 0.3602960772136945
            },
            {
                "epoch": 17,
                "error": 0.35765482869117166
            },
            {
                "epoch": 18,
                "error": 0.355336376050013
            },
            {
                "epoch": 19,
                "error": 0.3532345033023968
            },
            {
                "epoch": 20,
                "error": 0.35147993598880484
            },
            {
                "epoch": 21,
                "error": 0.3498854731008529
            },
            {
                "epoch": 22,
                "error": 0.34927179768353445
            },
            {
                "epoch": 23,
                "error": 0.34799386705710544
            },
            {
                "epoch": 24,
                "error": 0.3474126750551929
            },
            {
                "epoch": 25,
                "error": 0.34661774195287226
            },
            {
                "epoch": 26,
                "error": 0.3465490248789545
            },
            {
                "epoch": 27,
                "error": 0.3458876504427047
            },
            {
                "epoch": 28,
                "error": 0.34576590366088295
            },
            {
                "epoch": 29,
                "error": 0.3461106293138471
            },
            {
                "epoch": 30,
                "error": 0.345663761016932
            },
            {
                "epoch": 31,
                "error": 0.3456534629871371
            },
            {
                "epoch": 32,
                "error": 0.3457070017889582
            },
            {
                "epoch": 33,
                "error": 0.34562803904819905
            },
            {
                "epoch": 34,
                "error": 0.3454532116739193
            },
            {
                "epoch": 35,
                "error": 0.34582702690864936
            },
            {
                "epoch": 36,
                "error": 0.34543146366882044
            },
            {
                "epoch": 37,
                "error": 0.3454736228713232
            },
            {
                "epoch": 38,
                "error": 0.344906820649182
            },
            {
                "epoch": 39,
                "error": 0.34497401067565986
            },
            {
                "epoch": 40,
                "error": 0.3447153132394969
            },
            {
                "epoch": 41,
                "error": 0.3446982835296001
            },
            {
                "epoch": 42,
                "error": 0.34441941615118477
            },
            {
                "epoch": 43,
                "error": 0.34436833272369977
            },
            {
                "epoch": 44,
                "error": 0.34441058160429794
            },
            {
                "epoch": 45,
                "error": 0.3439345608141504
            },
            {
                "epoch": 46,
                "error": 0.34398343526854086
            },
            {
                "epoch": 47,
                "error": 0.34364102690723664
            },
            {
                "epoch": 48,
                "error": 0.34338630578550927
            },
            {
                "epoch": 49,
                "error": 0.34338752419524055
            },
            {
                "epoch": 50,
                "error": 0.34303765742319126
            },
            {
                "epoch": 51,
                "error": 0.3429825638772816
            },
            {
                "epoch": 52,
                "error": 0.343018877088821
            },
            {
                "epoch": 53,
                "error": 0.34270856231443725
            },
            {
                "epoch": 54,
                "error": 0.34268546642604647
            },
            {
                "epoch": 55,
                "error": 0.3424090213026249
            },
            {
                "epoch": 56,
                "error": 0.34242911915122987
            },
            {
                "epoch": 57,
                "error": 0.3424150289519145
            },
            {
                "epoch": 58,
                "error": 0.34226703327545444
            },
            {
                "epoch": 59,
                "error": 0.34201416379542576
            },
            {
                "epoch": 60,
                "error": 0.34202057241223766
            },
            {
                "epoch": 61,
                "error": 0.3418889852921366
            },
            {
                "epoch": 62,
                "error": 0.34155241380783075
            },
            {
                "epoch": 63,
                "error": 0.342046901292624
            },
            {
                "epoch": 64,
                "error": 0.3420772182325368
            },
            {
                "epoch": 65,
                "error": 0.3418171516814433
            },
            {
                "epoch": 66,
                "error": 0.34183834678421776
            },
            {
                "epoch": 67,
                "error": 0.34166171623767305
            },
            {
                "epoch": 68,
                "error": 0.34152847401725484
            },
            {
                "epoch": 69,
                "error": 0.3413607560016051
            },
            {
                "epoch": 70,
                "error": 0.34132009469861446
            },
            {
                "epoch": 71,
                "error": 0.3410842366625891
            },
            {
                "epoch": 72,
                "error": 0.3410823290813482
            },
            {
                "epoch": 73,
                "error": 0.3410557794678312
            },
            {
                "epoch": 74,
                "error": 0.34074210114677383
            },
            {
                "epoch": 75,
                "error": 0.3407108981763003
            },
            {
                "epoch": 76,
                "error": 0.34067367757493366
            },
            {
                "epoch": 77,
                "error": 0.34054356070760655
            },
            {
                "epoch": 78,
                "error": 0.3404742274499293
            },
            {
                "epoch": 79,
                "error": 0.34024140555135646
            },
            {
                "epoch": 80,
                "error": 0.34012332556699115
            },
            {
                "epoch": 81,
                "error": 0.34009311006327436
            },
            {
                "epoch": 82,
                "error": 0.3400008468735483
            },
            {
                "epoch": 83,
                "error": 0.33984560696568533
            },
            {
                "epoch": 84,
                "error": 0.3396286734788813
            },
            {
                "epoch": 85,
                "error": 0.33959577269500035
            },
            {
                "epoch": 86,
                "error": 0.33954878758036855
            },
            {
                "epoch": 87,
                "error": 0.3393381209727869
            },
            {
                "epoch": 88,
                "error": 0.33935550027416134
            },
            {
                "epoch": 89,
                "error": 0.33919773782239654
            },
            {
                "epoch": 90,
                "error": 0.339062184847975
            },
            {
                "epoch": 91,
                "error": 0.33900644976438754
            },
            {
                "epoch": 92,
                "error": 0.33885256587612494
            },
            {
                "epoch": 93,
                "error": 0.33870628638229705
            },
            {
                "epoch": 94,
                "error": 0.33865546332972213
            },
            {
                "epoch": 95,
                "error": 0.3385594486505754
            },
            {
                "epoch": 96,
                "error": 0.33851268041810595
            },
            {
                "epoch": 97,
                "error": 0.33837712010605114
            },
            {
                "epoch": 98,
                "error": 0.338308752283564
            },
            {
                "epoch": 99,
                "error": 0.3382142166797636
            },
            {
                "epoch": 100,
                "error": 0.33809422615831947
            },
            {
                "epoch": 101,
                "error": 0.3380637746267041
            },
            {
                "epoch": 102,
                "error": 0.3379421513983343
            },
            {
                "epoch": 103,
                "error": 0.33787775259997777
            },
            {
                "epoch": 104,
                "error": 0.33778395173758424
            },
            {
                "epoch": 105,
                "error": 0.33769879439840966
            },
            {
                "epoch": 106,
                "error": 0.33767300455107074
            },
            {
                "epoch": 107,
                "error": 0.3375770492303688
            },
            {
                "epoch": 108,
                "error": 0.3374780222085487
            },
            {
                "epoch": 109,
                "error": 0.33742004778981344
            },
            {
                "epoch": 110,
                "error": 0.33732938541195634
            },
            {
                "epoch": 111,
                "error": 0.3372695485581037
            },
            {
                "epoch": 112,
                "error": 0.33716563458544496
            },
            {
                "epoch": 113,
                "error": 0.33714826268739356
            },
            {
                "epoch": 114,
                "error": 0.337040681286606
            },
            {
                "epoch": 115,
                "error": 0.337006783721562
            },
            {
                "epoch": 116,
                "error": 0.3368938671321048
            },
            {
                "epoch": 117,
                "error": 0.33685126298390244
            },
            {
                "epoch": 118,
                "error": 0.33681264773984976
            },
            {
                "epoch": 119,
                "error": 0.33667387613692834
            },
            {
                "epoch": 120,
                "error": 0.3366555777265129
            },
            {
                "epoch": 121,
                "error": 0.3366059006744491
            },
            {
                "epoch": 122,
                "error": 0.3365241881809905
            },
            {
                "epoch": 123,
                "error": 0.3364804465989293
            },
            {
                "epoch": 124,
                "error": 0.3364062742790812
            },
            {
                "epoch": 125,
                "error": 0.3363558805969654
            },
            {
                "epoch": 126,
                "error": 0.3363042139234821
            },
            {
                "epoch": 127,
                "error": 0.33624644827030853
            },
            {
                "epoch": 128,
                "error": 0.33620700078579024
            },
            {
                "epoch": 129,
                "error": 0.3361725074588745
            },
            {
                "epoch": 130,
                "error": 0.3360785820885237
            },
            {
                "epoch": 131,
                "error": 0.33607415771140814
            },
            {
                "epoch": 132,
                "error": 0.33600863384739255
            },
            {
                "epoch": 133,
                "error": 0.335938194035685
            },
            {
                "epoch": 134,
                "error": 0.3359209192234711
            },
            {
                "epoch": 135,
                "error": 0.33588059036942153
            },
            {
                "epoch": 136,
                "error": 0.33580122069640506
            },
            {
                "epoch": 137,
                "error": 0.3357807897514586
            },
            {
                "epoch": 138,
                "error": 0.33572954401654675
            },
            {
                "epoch": 139,
                "error": 0.33565933199964526
            },
            {
                "epoch": 140,
                "error": 0.33563428773155757
            },
            {
                "epoch": 141,
                "error": 0.33559838704550293
            },
            {
                "epoch": 142,
                "error": 0.33555769583713474
            },
            {
                "epoch": 143,
                "error": 0.3355002945488489
            },
            {
                "epoch": 144,
                "error": 0.33544802328803186
            },
            {
                "epoch": 145,
                "error": 0.33542922012396337
            },
            {
                "epoch": 146,
                "error": 0.3353799163097298
            },
            {
                "epoch": 147,
                "error": 0.33534738702671835
            },
            {
                "epoch": 148,
                "error": 0.3353062229562281
            },
            {
                "epoch": 149,
                "error": 0.3352785431980117
            },
            {
                "epoch": 150,
                "error": 0.3352382429714709
            },
            {
                "epoch": 151,
                "error": 0.33520976377439665
            },
            {
                "epoch": 152,
                "error": 0.33515962590505255
            },
            {
                "epoch": 153,
                "error": 0.33512907070639264
            },
            {
                "epoch": 154,
                "error": 0.33510470579280993
            },
            {
                "epoch": 155,
                "error": 0.3350733833298443
            },
            {
                "epoch": 156,
                "error": 0.33501812446866436
            },
            {
                "epoch": 157,
                "error": 0.33499822651845396
            },
            {
                "epoch": 158,
                "error": 0.334977727540236
            },
            {
                "epoch": 159,
                "error": 0.3349292844631643
            },
            {
                "epoch": 160,
                "error": 0.33490240182028286
            },
            {
                "epoch": 161,
                "error": 0.33487746818551073
            },
            {
                "epoch": 162,
                "error": 0.3348310016181916
            },
            {
                "epoch": 163,
                "error": 0.3348024984908039
            },
            {
                "epoch": 164,
                "error": 0.3347809613554225
            },
            {
                "epoch": 165,
                "error": 0.3347350171763392
            },
            {
                "epoch": 166,
                "error": 0.33471647550963707
            },
            {
                "epoch": 167,
                "error": 0.334682167035635
            },
            {
                "epoch": 168,
                "error": 0.33465618230040917
            },
            {
                "epoch": 169,
                "error": 0.3346253538727055
            },
            {
                "epoch": 170,
                "error": 0.3346011185622951
            },
            {
                "epoch": 171,
                "error": 0.3345742700661693
            },
            {
                "epoch": 172,
                "error": 0.33453886438854463
            },
            {
                "epoch": 173,
                "error": 0.33450418769843937
            },
            {
                "epoch": 174,
                "error": 0.3344934570214413
            },
            {
                "epoch": 175,
                "error": 0.33445288404566137
            },
            {
                "epoch": 176,
                "error": 0.3344341529936302
            },
            {
                "epoch": 177,
                "error": 0.33440750670657116
            },
            {
                "epoch": 178,
                "error": 0.33438110020709233
            },
            {
                "epoch": 179,
                "error": 0.3343559312162936
            },
            {
                "epoch": 180,
                "error": 0.3343257300484349
            },
            {
                "epoch": 181,
                "error": 0.3343092369668945
            },
            {
                "epoch": 182,
                "error": 0.33428927407492476
            },
            {
                "epoch": 183,
                "error": 0.33425107626530953
            },
            {
                "epoch": 184,
                "error": 0.3342382353697364
            },
            {
                "epoch": 185,
                "error": 0.33420961995500414
            },
            {
                "epoch": 186,
                "error": 0.33419006782285876
            },
            {
                "epoch": 187,
                "error": 0.33416358046579986
            },
            {
                "epoch": 188,
                "error": 0.3341417160898612
            },
            {
                "epoch": 189,
                "error": 0.3341189575467482
            },
            {
                "epoch": 190,
                "error": 0.3341050747561862
            },
            {
                "epoch": 191,
                "error": 0.33407171397605573
            },
            {
                "epoch": 192,
                "error": 0.33405594544059264
            },
            {
                "epoch": 193,
                "error": 0.33403361573971524
            },
            {
                "epoch": 194,
                "error": 0.3340127550966972
            },
            {
                "epoch": 195,
                "error": 0.33399097525656957
            },
            {
                "epoch": 196,
                "error": 0.33396848445605176
            },
            {
                "epoch": 197,
                "error": 0.333954446656429
            },
            {
                "epoch": 198,
                "error": 0.33393154811497466
            },
            {
                "epoch": 199,
                "error": 0.3339114720115947
            },
            {
                "epoch": 200,
                "error": 0.333889291982812
            },
            {
                "epoch": 201,
                "error": 0.3338701466295648
            },
            {
                "epoch": 202,
                "error": 0.33385454101439743
            },
            {
                "epoch": 203,
                "error": 0.33383484559247145
            },
            {
                "epoch": 204,
                "error": 0.33381848164478606
            },
            {
                "epoch": 205,
                "error": 0.33379738377191703
            },
            {
                "epoch": 206,
                "error": 0.3337815848426792
            },
            {
                "epoch": 207,
                "error": 0.3337631832750234
            },
            {
                "epoch": 208,
                "error": 0.3337517785736234
            },
            {
                "epoch": 209,
                "error": 0.3337279392046161
            },
            {
                "epoch": 210,
                "error": 0.3337171833074419
            },
            {
                "epoch": 211,
                "error": 0.33370136968331726
            },
            {
                "epoch": 212,
                "error": 0.33368174732075995
            },
            {
                "epoch": 213,
                "error": 0.33366801390044337
            },
            {
                "epoch": 214,
                "error": 0.3336517924124119
            },
            {
                "epoch": 215,
                "error": 0.3336393733696035
            },
            {
                "epoch": 216,
                "error": 0.3336211131160313
            },
            {
                "epoch": 217,
                "error": 0.3336085545548285
            },
            {
                "epoch": 218,
                "error": 0.333596226042236
            },
            {
                "epoch": 219,
                "error": 0.3335809038586501
            },
            {
                "epoch": 220,
                "error": 0.33356603838128807
            },
            {
                "epoch": 221,
                "error": 0.3335553324621402
            },
            {
                "epoch": 222,
                "error": 0.3335427968244947
            },
            {
                "epoch": 223,
                "error": 0.3335274305672394
            },
            {
                "epoch": 224,
                "error": 0.333514060003909
            },
            {
                "epoch": 225,
                "error": 0.33350316484343484
            },
            {
                "epoch": 226,
                "error": 0.33349158358488357
            },
            {
                "epoch": 227,
                "error": 0.3334785543621074
            },
            {
                "epoch": 228,
                "error": 0.3334677373895206
            },
            {
                "epoch": 229,
                "error": 0.3334540863472053
            },
            {
                "epoch": 230,
                "error": 0.33344085205867174
            },
            {
                "epoch": 231,
                "error": 0.33342870471086494
            },
            {
                "epoch": 232,
                "error": 0.3334173488682942
            },
            {
                "epoch": 233,
                "error": 0.33340565019307017
            },
            {
                "epoch": 234,
                "error": 0.33339184652422627
            },
            {
                "epoch": 235,
                "error": 0.33338036132235366
            },
            {
                "epoch": 236,
                "error": 0.33336826600301633
            },
            {
                "epoch": 237,
                "error": 0.3333591817371971
            },
            {
                "epoch": 238,
                "error": 0.33334691684647855
            },
            {
                "epoch": 239,
                "error": 0.33333601054979106
            },
            {
                "epoch": 240,
                "error": 0.3333255321215141
            },
            {
                "epoch": 241,
                "error": 0.3333115831367665
            },
            {
                "epoch": 242,
                "error": 0.33330404677533637
            },
            {
                "epoch": 243,
                "error": 0.3332942565911971
            },
            {
                "epoch": 244,
                "error": 0.3332838091478706
            },
            {
                "epoch": 245,
                "error": 0.3332735975610589
            },
            {
                "epoch": 246,
                "error": 0.33326268676254966
            },
            {
                "epoch": 247,
                "error": 0.3332506105781156
            },
            {
                "epoch": 248,
                "error": 0.3332429903697075
            },
            {
                "epoch": 249,
                "error": 0.3332287031001298
            },
            {
                "epoch": 250,
                "error": 0.3332185868293489
            },
            {
                "epoch": 251,
                "error": 0.33320778593835976
            },
            {
                "epoch": 252,
                "error": 0.3331975511103076
            },
            {
                "epoch": 253,
                "error": 0.3331872589424229
            },
            {
                "epoch": 254,
                "error": 0.33317795165259695
            },
            {
                "epoch": 255,
                "error": 0.33316727537476903
            },
            {
                "epoch": 256,
                "error": 0.3331582348655899
            },
            {
                "epoch": 257,
                "error": 0.3331483052692934
            },
            {
                "epoch": 258,
                "error": 0.33313929574430656
            },
            {
                "epoch": 259,
                "error": 0.33312776928679894
            },
            {
                "epoch": 260,
                "error": 0.33311918082901504
            },
            {
                "epoch": 261,
                "error": 0.33310861248191403
            },
            {
                "epoch": 262,
                "error": 0.33309905703140913
            },
            {
                "epoch": 263,
                "error": 0.33308803219720184
            },
            {
                "epoch": 264,
                "error": 0.33307845960300475
            },
            {
                "epoch": 265,
                "error": 0.33306856804878016
            },
            {
                "epoch": 266,
                "error": 0.333058830595877
            },
            {
                "epoch": 267,
                "error": 0.333047890746826
            },
            {
                "epoch": 268,
                "error": 0.3330379216116377
            },
            {
                "epoch": 269,
                "error": 0.3330283120188973
            },
            {
                "epoch": 270,
                "error": 0.3330184869792331
            },
            {
                "epoch": 271,
                "error": 0.33300706181495066
            },
            {
                "epoch": 272,
                "error": 0.33299707627975167
            },
            {
                "epoch": 273,
                "error": 0.3329860649791603
            },
            {
                "epoch": 274,
                "error": 0.33297538464984394
            },
            {
                "epoch": 275,
                "error": 0.3329662933412414
            },
            {
                "epoch": 276,
                "error": 0.33295534006731314
            },
            {
                "epoch": 277,
                "error": 0.33294460261676284
            },
            {
                "epoch": 278,
                "error": 0.33293407090025995
            },
            {
                "epoch": 279,
                "error": 0.33292428281797576
            },
            {
                "epoch": 280,
                "error": 0.33291338905574563
            },
            {
                "epoch": 281,
                "error": 0.3329038410913101
            },
            {
                "epoch": 282,
                "error": 0.332893383473062
            },
            {
                "epoch": 283,
                "error": 0.3328834408510046
            },
            {
                "epoch": 284,
                "error": 0.3328743663240192
            },
            {
                "epoch": 285,
                "error": 0.33286397156528347
            },
            {
                "epoch": 286,
                "error": 0.3328552924723447
            },
            {
                "epoch": 287,
                "error": 0.3328456929571551
            },
            {
                "epoch": 288,
                "error": 0.3328364782238732
            },
            {
                "epoch": 289,
                "error": 0.3328276476198729
            },
            {
                "epoch": 290,
                "error": 0.332818004473778
            },
            {
                "epoch": 291,
                "error": 0.33280983214087756
            },
            {
                "epoch": 292,
                "error": 0.3328013085371498
            },
            {
                "epoch": 293,
                "error": 0.33279267719994726
            },
            {
                "epoch": 294,
                "error": 0.332783926857712
            },
            {
                "epoch": 295,
                "error": 0.33277535713076073
            },
            {
                "epoch": 296,
                "error": 0.33276658576769075
            },
            {
                "epoch": 297,
                "error": 0.33275767833818404
            },
            {
                "epoch": 298,
                "error": 0.3327480817636487
            },
            {
                "epoch": 299,
                "error": 0.33273926325807546
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_leaky_relu_error_plot.png",
        "weights_path": "./modelos/60n_threshold_leaky_relu_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_leaky_relu_confusion_matrix.png",
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='leaky_relu', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='max', ctx=Load()), args=[BinOp(left=Constant(value=0.01), op=Mult(), right=Name(id='x', ctx=Load())), Name(id='x', ctx=Load())], keywords=[]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='leaky_relu_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=Constant(value=1), orelse=Constant(value=0.01)))], decorator_list=[], type_params=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 300,
            "VALIDATION_INTERVAL": 1,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.01,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_threshold_tanh",
        "timestamp": 1714166510.391951,
        "epoch_errors": [
            0.9286436891401519,
            0.8430900029438798,
            0.8069438362918444,
            0.7886572873232109,
            0.7772129472151668,
            0.7694315197225018,
            0.7637331269036653,
            0.7592367185868791,
            0.7554192971952701,
            0.7519207518807604,
            0.7484415039987461,
            0.7447187404656627,
            0.740590638465213,
            0.7360954640798149,
            0.7314491000643876,
            0.7268682085371476,
            0.7224367118422852,
            0.7181140413935314,
            0.7137970934268572,
            0.7093661734553014,
            0.7047130870577419,
            0.6997635822240773,
            0.6944945480698599,
            0.6889374881910757,
            0.6831638687930106,
            0.677260430919543,
            0.671308670819701,
            0.6653758570557989,
            0.6595147885947907,
            0.6537660553115345,
            0.6481591450153646,
            0.6427121791867251,
            0.63743167585649,
            0.6323135840954498,
            0.6273459219716229,
            0.6225125263536038,
            0.6177970128111954,
            0.6131860297248353,
            0.6086711724307143,
            0.604249375044026,
            0.5999220452333947,
            0.5956934820611978,
            0.5915691503119642,
            0.5875542335737709,
            0.5836526716654326,
            0.5798667032768904,
            0.5761968217221902,
            0.5726420059933482,
            0.5692000897229996,
            0.5658681567324513,
            0.5626428884199897,
            0.5595208248838526,
            0.5564985316720785,
            0.553572684138302,
            0.5507400913360395,
            0.5479976831458025,
            0.5453424808341967,
            0.5427715653804566,
            0.540282051875032,
            0.5378710733935391,
            0.5355357744587651,
            0.5332733124345298,
            0.5310808645675382,
            0.5289556384616318,
            0.5268948841611625,
            0.5248959064914632,
            0.52295607672767,
            0.5210728429966117,
            0.5192437390634183,
            0.5174663913348352,
            0.5157385240446853,
            0.5140579626859123,
            0.512422635825015,
            0.5108305754808282,
            0.5092799162732995,
            0.5077688935523792,
            0.5062958407074857,
            0.5048591858394743,
            0.503457447954696,
            0.5020892328181649,
            0.5007532285822467,
            0.4994482012893928,
            0.49817299033229023,
            0.49692650394159193,
            0.4957077147597827,
            0.4945156555489839,
            0.4933494150705042,
            0.49220813416441483,
            0.49109100204868966,
            0.4899972528493361,
            0.488926162365827,
            0.48787704507005153,
            0.4868492513319997,
            0.4858421648616053,
            0.48485520035345314,
            0.48388780131942793,
            0.48293943809368894,
            0.48200960599440745,
            0.48109782362750375,
            0.48020363131866195,
            0.47932658966147,
            0.47846627817097204,
            0.4776222940335528,
            0.476794250945418,
            0.47598177803321995,
            0.4751845188513303,
            0.4744021304510598,
            0.47363428251763945,
            0.4728806565711355,
            0.4721409452276784,
            0.47141485151747836,
            0.47070208825613036,
            0.4700023774657478,
            0.46931544984244206,
            0.4686410442667533,
            0.4679789073536419,
            0.46732879303881497,
            0.4666904621982741,
            0.4660636822981348,
            0.46544822707196776,
            0.4648438762231144,
            0.4642504151496403,
            0.46366763468979105,
            0.46309533088601834,
            0.462533304765852,
            0.46198136213804425,
            0.46143931340259414,
            0.4609069733734108,
            0.4603841611124814,
            0.4598706997745641,
            0.45936641646149096,
            0.458871142085292,
            0.45838471123940483,
            0.45790696207731507,
            0.45743773619805833,
            0.45697687853800567,
            0.4565242372684912,
            0.4560796636987978,
            0.45564301218413356,
            0.45521414003818333,
            0.454792907449945,
            0.45437917740450356,
            0.45397281560747094,
            0.4535736904128337,
            0.4531816727539719,
            0.4527966360776131,
            0.4524184562805407,
            0.45204701164885547,
            0.4516821827996319,
            0.45132385262480723,
            0.4509719062371638,
            0.45062623091826837,
            0.45028671606826254,
            0.449953253157372,
            0.44962573567904723,
            0.44930405910465493,
            0.4489881208395973,
            0.44867782018082425,
            0.4483730582756332,
            0.44807373808171197,
            0.4477797643283485,
            0.44749104347876023,
            0.4472074836934858,
            0.4469289947947981,
            0.4466554882320809,
            0.44638687704814684,
            0.4461230758464382,
            0.44586400075909466,
            0.4456095694158323,
            0.4453597009136304,
            0.44511431578716915,
            0.4448733359800172,
            0.4446366848165203,
            0.44440428697438367,
            0.44417606845792107,
            0.44395195657194714,
            0.44373187989629054,
            0.4435157682609233,
            0.4433035527216637,
            0.44309516553645784,
            0.44289054014222373,
            0.4426896111322107,
            0.4424923142339059,
            0.4422985862874339,
            0.4421083652244653,
            0.4419215900475874,
            0.44173820081016685,
            0.44155813859665266,
            0.4413813455033314,
            0.4412077646195092,
            0.44103734000912503,
            0.44087001669276354,
            0.44070574063007883,
            0.4405444587025999,
            0.44038611869691946,
            0.44023066928825305,
            0.4400780600243606,
            0.43992824130981295,
            0.43978116439060805,
            0.43963678133911666,
            0.4394950450393542,
            0.4393559091725718,
            0.439219328203147,
            0.4390852573647894,
            0.4389536526470247,
            0.43882447078197645,
            0.43869766923141496,
            0.43857320617408396,
            0.43845104049329053,
            0.438331131764748,
            0.4382134402446753,
            0.43809792685812887,
            0.4379845531875934,
            0.43787328146177595,
            0.4377640745446493,
            0.43765689592469964,
            0.4375517097043989,
            0.4374484805898773,
            0.4373471738808019,
            0.4372477554604543,
            0.43715019178599795,
            0.43705444987893555,
            0.43696049731575093,
            0.43686830221872275,
            0.4367778332469183,
            0.43668905958735227,
            0.43660195094631665,
            0.4365164775408606,
            0.43643261009044104,
            0.4363503198087134,
            0.4362695783954766,
            0.43619035802877065,
            0.4361126313570975,
            0.43603637149180413,
            0.43596155199957815,
            0.43588814689509114,
            0.4358161306337639,
            0.4357454781046526,
            0.43567616462347064,
            0.4356081659257189,
            0.43554145815993356,
            0.4354760178810543,
            0.43541182204389794,
            0.4353488479967478,
            0.43528707347503875,
            0.4352264765951586,
            0.435167035848346,
            0.4351087300946835,
            0.4350515385571956,
            0.43499544081603986,
            0.4349404168027904,
            0.43488644679480853,
            0.43483351140971355,
            0.4347815915999335,
            0.4347306686473392,
            0.43468072415797354,
            0.4346317400568497,
            0.4345836985828431,
            0.4345365822836507,
            0.43449037401084023,
            0.4344450569149603,
            0.4344006144407451,
            0.43435703032237394,
            0.4343142885788158,
            0.43427237350923636,
            0.4342312696884779,
            0.43419096196261264,
            0.43415143544455254,
            0.43411267550973504,
            0.4340746677918639,
            0.43403739817872733,
            0.43400085280806283,
            0.4339650180634963,
            0.43392988057053505,
            0.4338954271926256,
            0.43386164502726154,
            0.4338285214021609,
            0.43379604387148757,
            0.4337642002121439,
            0.43373297842010244,
            0.4337023667067996,
            0.4336723534955901,
            0.4336429274182394,
            0.4336140773114757,
            0.4335857922135975,
            0.4335580613611215,
            0.4335308741854879,
            0.4335042203098123,
            0.4334780895456852,
            0.4334524718900181,
            0.43342735752194056,
            0.4334027367997399,
            0.4333786002578468,
            0.4333549386038698,
            0.4333317427156648,
            0.4333090036384621,
            0.4332867125820247,
            0.43326486091785366,
            0.4332434401764374,
            0.43322244204454097
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.8091383523313178
            },
            {
                "epoch": 19,
                "error": 0.7748356238022103
            },
            {
                "epoch": 29,
                "error": 0.7336963486522382
            },
            {
                "epoch": 39,
                "error": 0.7027529523907788
            },
            {
                "epoch": 49,
                "error": 0.6811190592390958
            },
            {
                "epoch": 59,
                "error": 0.6645768835356759
            },
            {
                "epoch": 69,
                "error": 0.652506784102788
            },
            {
                "epoch": 79,
                "error": 0.6441231243474065
            },
            {
                "epoch": 89,
                "error": 0.6382430034869255
            },
            {
                "epoch": 99,
                "error": 0.6340257166018367
            },
            {
                "epoch": 109,
                "error": 0.6309411211590426
            },
            {
                "epoch": 119,
                "error": 0.6286524341953129
            },
            {
                "epoch": 129,
                "error": 0.6269384369510329
            },
            {
                "epoch": 139,
                "error": 0.6256466683291353
            },
            {
                "epoch": 149,
                "error": 0.6246692267450996
            },
            {
                "epoch": 159,
                "error": 0.6239290654893024
            },
            {
                "epoch": 169,
                "error": 0.6233706366949664
            },
            {
                "epoch": 179,
                "error": 0.622953162595088
            },
            {
                "epoch": 189,
                "error": 0.6226459529271714
            },
            {
                "epoch": 199,
                "error": 0.6224252914532347
            },
            {
                "epoch": 209,
                "error": 0.6222724306109695
            },
            {
                "epoch": 219,
                "error": 0.622172312334817
            },
            {
                "epoch": 229,
                "error": 0.6221127386610191
            },
            {
                "epoch": 239,
                "error": 0.6220838105070675
            },
            {
                "epoch": 249,
                "error": 0.6220775234495163
            },
            {
                "epoch": 259,
                "error": 0.6220874561453263
            },
            {
                "epoch": 269,
                "error": 0.6221085158803042
            },
            {
                "epoch": 279,
                "error": 0.6221367224521448
            },
            {
                "epoch": 289,
                "error": 0.6221690207660341
            },
            {
                "epoch": 299,
                "error": 0.6222031172450047
            }
        ],
        "error_plot_path": "./modelos/60n_threshold_tanh_error_plot.png",
        "weights_path": "./modelos/60n_threshold_tanh_weights.npy",
        "confusion_matrix_path": "./modelos/60n_threshold_tanh_confusion_matrix.png",
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='tanh', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='tanh', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='tanh_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='tanh', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=2))))], decorator_list=[], type_params=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 300,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.01,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60n_max",
        "timestamp": 1714167166.733987,
        "epoch_errors": [
            0.9839736133002565,
            0.8785691933146339,
            0.6639888178457085,
            0.4588678106168981,
            0.33467930123773953,
            0.25743333218064124,
            0.20877909435290282,
            0.1749355248399439,
            0.14642906865130964,
            0.12704688354917987,
            0.11125718996566367,
            0.10287311550468566,
            0.09548151412416261,
            0.08927050647962424,
            0.08112470039620692,
            0.07799370379348844,
            0.07487294335051338,
            0.07128616189078373,
            0.06676474684458505,
            0.060698621482630256,
            0.05853083077521567,
            0.05500560802961673,
            0.051540357117261286,
            0.049252807808359805,
            0.047651827682685007,
            0.04633528397577439,
            0.04520686018003334,
            0.0442183542274672,
            0.04334672023921569,
            0.04260230549202893,
            0.04213480165965206,
            0.04248121501568859,
            0.04054282092970121,
            0.03947720868069192,
            0.03874776795749728,
            0.03812521332937542,
            0.03756479838536148,
            0.03704901129098761,
            0.03656878124838281,
            0.03611844450512777,
            0.03569401567238532,
            0.035292471262569125,
            0.034911403763771824,
            0.03454883283327707,
            0.03420309179146926,
            0.03387275405718186,
            0.0335565826137448,
            0.03325349369278147,
            0.03296252973637825,
            0.03268283869376252,
            0.032413657804758744,
            0.03215430065875098,
            0.031904146705567245,
            0.03166263264079486,
            0.03142924524987801,
            0.031203515405088242,
            0.030985012985843514,
            0.03077334254725666,
            0.030568139601320408,
            0.030369067404361922,
            0.03017581416635184,
            0.029988090614367968,
            0.029805627855404644,
            0.02962817549377238,
            0.02945549996625549,
            0.029287383064495957,
            0.029123620619128054,
            0.028964021324278246,
            0.028808405684376537,
            0.02865660506795581,
            0.028508460855375575,
            0.028363823669275555,
            0.028222552678132787,
            0.02808451496460383,
            0.027949584951445214,
            0.027817643878739244,
            0.02768857932695279,
            0.027562284781034674,
            0.0274386592313459,
            0.027317606807714535,
            0.027199036443345852,
            0.02708286156568914,
            0.02696899981169422,
            0.026857372765170917,
            0.026747905714214995,
            0.026640527426883113,
            0.026535169943486977,
            0.026431768384048586,
            0.026330260769605488,
            0.0262305878561853,
            0.026132692980387087,
            0.026036521915608797,
            0.025942022738052534,
            0.025849145701721324,
            0.025757843121693776,
            0.02566806926502882,
            0.02557978024871121,
            0.025492933944100987,
            0.02540748988739661,
            0.025323409195666214,
            0.02524065448803663,
            0.025159189811667385,
            0.02507898057216628,
            0.024999993468131587,
            0.024922196429533847,
            0.02484555855966923,
            0.024770050080442443,
            0.024695642280752717,
            0.0246223074677757,
            0.02455001892095001,
            0.0244787508484911,
            0.02440847834626881,
            0.024339177358897603,
            0.024270824642899046,
            0.024203397731805968,
            0.02413687490308892,
            0.0240712351467914,
            0.02400645813577121,
            0.023942524197450188,
            0.02387941428698269,
            0.02381710996175913,
            0.023755593357165525,
            0.02369484716352737,
            0.023634854604169118,
            0.023575599414525333,
            0.023517065822245387,
            0.02345923852823492,
            0.023402102688582532,
            0.02334564389732375,
            0.023289848169995662,
            0.023234701927940242,
            0.023180191983315494,
            0.023126305524778498,
            0.023073030103802548,
            0.023020353621597895,
            0.02296826431660289,
            0.02291675075251712,
            0.022865801806848957,
            0.022815406659951173,
            0.02276555478452063,
            0.022716235935538655,
            0.022667440140630227,
            0.022619157690822025,
            0.022571379131679344,
            0.02252409525480434,
            0.022477297089677353,
            0.022430975895826138,
            0.02238512315530649,
            0.022339730565480675,
            0.022294790032078928,
            0.0222502936625319,
            0.022206233759560726,
            0.022162602815013734,
            0.0221193935039384,
            0.022076598678877766,
            0.02203421136438208,
            0.021992224751724812,
            0.021950632193816055,
            0.02190942720030258,
            0.02186860343284799,
            0.021828154700584777,
            0.02178807495573022,
            0.021748358289360975,
            0.021708998927337294,
            0.02166999122637282,
            0.021631329670242297,
            0.021593008866122757,
            0.02155502354106089,
            0.021517368538564566,
            0.021480038815309476,
            0.021443029437959855,
            0.02140633558009623,
            0.021369952519247646,
            0.021333875634022843,
            0.02129810040133753,
            0.021262622393733527,
            0.02122743727678626,
            0.02119254080659709,
            0.021157928827367698,
            0.02112359726905284,
            0.021089542145088513,
            0.02105575955019358,
            0.021022245658240346,
            0.02098899672019375,
            0.020956009062114547,
            0.020923279083225603,
            0.020890803254037957,
            0.02085857811453555,
            0.02082660027241504,
            0.020794866401380563,
            0.02076337323948952,
            0.020732117587549285,
            0.02070109630756153,
            0.020670306321213895,
            0.020639744608416433,
            0.020609408205881124,
            0.02057929420574391,
            0.020549399754226916,
            0.020519722050339747,
            0.020490258344618702,
            0.020461005937902302,
            0.020431962180142222,
            0.02040312446924806,
            0.020374490249965446,
            0.020346057012785513,
            0.020317822292885084,
            0.02028978366909746,
            0.020261938762910808,
            0.02023428523749521,
            0.020206820796756276,
            0.020179543184415033,
            0.02015245018311293,
            0.020125539613541035,
            0.020098809333593457,
            0.02007225723754283,
            0.02004588125523887,
            0.020019679351327636,
            0.01999364952449196,
            0.019967789806712023,
            0.019942098262545234,
            0.01991657298842548,
            0.019891212111979927,
            0.01986601379136459,
            0.01984097621461629,
            0.01981609759902182,
            0.01979137619050318,
            0.019766810263018395,
            0.01974239811797787,
            0.019718138083675337,
            0.019694028514733144,
            0.01967006779156172,
            0.019646254319832183,
            0.019622586529962474,
            0.019599062876616013,
            0.019575681838212747,
            0.019552441916452282,
            0.019529341635848706,
            0.01950637954327666,
            0.01948355420752848,
            0.019460864218882056,
            0.01943830818867914,
            0.01941588474891369,
            0.019393592551829854,
            0.019371430269530043,
            0.019349396593591712,
            0.01932749023469353,
            0.019305709922250027,
            0.01928405440405534,
            0.01926252244593448,
            0.019241112831403208,
            0.019219824361335836,
            0.01919865585364019,
            0.01917760614294048,
            0.019156674080267215,
            0.019135858532754124,
            0.01911515838334206,
            0.019094572530489472,
            0.01907409988788934,
            0.019053739384192796,
            0.019033489962738234,
            0.019013350581287208,
            0.018993320211765488,
            0.018973397840010238,
            0.018953582465522662,
            0.0189338731012259,
            0.018914268773228327,
            0.018894768520592003,
            0.018875371395106047,
            0.018856076461064845,
            0.018836882795051125,
            0.018817789485723695,
            0.0187987956336094,
            0.018779900350899905,
            0.018761102761252493,
            0.01874240199959518,
            0.01872379721193549,
            0.018705287555174203,
            0.018686872196921764,
            0.018668550315319464,
            0.018650321098863765,
            0.018632183746234276,
            0.018614137466125738,
            0.018596181477082672,
            0.018578315007337982,
            0.01856053729465469,
            0.018542847586170686,
            0.018525245138246747,
            0.018507729216317537,
            0.018490299094745727,
            0.018472954056678807,
            0.018455693393908942,
            0.018438516406735224,
            0.018421422403829244,
            0.01840441070210273,
            0.018387480626577975,
            0.018370631510260967,
            0.018353862694016603,
            0.018337173526446655,
            0.01832056336376992,
            0.018304031569704674
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.25993463347675494
            },
            {
                "epoch": 19,
                "error": 0.22206593344796274
            },
            {
                "epoch": 29,
                "error": 0.21044025668121794
            },
            {
                "epoch": 39,
                "error": 0.2046183045239118
            },
            {
                "epoch": 49,
                "error": 0.2010223310083339
            },
            {
                "epoch": 59,
                "error": 0.19849798585094425
            },
            {
                "epoch": 69,
                "error": 0.1965606164637176
            },
            {
                "epoch": 79,
                "error": 0.19499601006035078
            },
            {
                "epoch": 89,
                "error": 0.19368927105024508
            },
            {
                "epoch": 99,
                "error": 0.19257106519882616
            },
            {
                "epoch": 109,
                "error": 0.1915962471771628
            },
            {
                "epoch": 119,
                "error": 0.19073380791254776
            },
            {
                "epoch": 129,
                "error": 0.18996157874004085
            },
            {
                "epoch": 139,
                "error": 0.1892632062793119
            },
            {
                "epoch": 149,
                "error": 0.1886263160445674
            },
            {
                "epoch": 159,
                "error": 0.1880413433918675
            },
            {
                "epoch": 169,
                "error": 0.18750076024999257
            },
            {
                "epoch": 179,
                "error": 0.18699854725890724
            },
            {
                "epoch": 189,
                "error": 0.18652982379122585
            },
            {
                "epoch": 199,
                "error": 0.18609058275913817
            },
            {
                "epoch": 209,
                "error": 0.18567749684174104
            },
            {
                "epoch": 219,
                "error": 0.18528777452115525
            },
            {
                "epoch": 229,
                "error": 0.18491905155308644
            },
            {
                "epoch": 239,
                "error": 0.18456930808578575
            },
            {
                "epoch": 249,
                "error": 0.18423680462684142
            },
            {
                "epoch": 259,
                "error": 0.18392003204558718
            },
            {
                "epoch": 269,
                "error": 0.18361767215128033
            },
            {
                "epoch": 279,
                "error": 0.1833285663245226
            },
            {
                "epoch": 289,
                "error": 0.18305169034005261
            },
            {
                "epoch": 299,
                "error": 0.18278613399170685
            }
        ],
        "error_plot_path": "./modelos/60n_max_error_plot.png",
        "weights_path": "./modelos/60n_max_weights.npy",
        "confusion_matrix_path": "./modelos/60n_max_confusion_matrix.png",
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "max_value",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 300,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "60_max_200e",
        "timestamp": 1714167819.275895,
        "epoch_errors": [
            0.9826503859799689,
            0.8772856277742999,
            0.6566434926571486,
            0.45171030465895906,
            0.31923076870851086,
            0.2512350275571898,
            0.19465604273510967,
            0.1608943776303054,
            0.1326445710358401,
            0.11955985202208295,
            0.10490781705691009,
            0.09647379959262546,
            0.09185630514543458,
            0.08522654001101906,
            0.07863092743343839,
            0.0743278628362358,
            0.07508723942917907,
            0.07012911029203973,
            0.06787846349339888,
            0.06428472659361004,
            0.06115995061836611,
            0.05909105590925245,
            0.056863229775413,
            0.05444643659554367,
            0.052960211187584316,
            0.051811978666883425,
            0.0503644657562667,
            0.04940315852042592,
            0.049252322472908526,
            0.0486187585478423,
            0.04731559363298904,
            0.04704430968811341,
            0.04681559398319973,
            0.04489490335654213,
            0.04399753039742342,
            0.04331034886713125,
            0.04272369744036717,
            0.04220006689876416,
            0.041723101777111485,
            0.041283346236043995,
            0.040874635952228,
            0.040492656682948006,
            0.04013426367917637,
            0.03979713680174846,
            0.039479617926453936,
            0.03918068335487408,
            0.038900077269625744,
            0.0386387534550356,
            0.03840013775676913,
            0.038194279611017186,
            0.038056817883882745,
            0.03820848894522113,
            0.038430462596649013,
            0.03802188751941419,
            0.03727535840296125,
            0.03799287977871359,
            0.03854375617287845,
            0.03634740012755985,
            0.03570904528669563,
            0.03524056220862844,
            0.03488137974142511,
            0.0345782145823497,
            0.03431234084917509,
            0.034073816693327125,
            0.033857062514663465,
            0.03365906498782213,
            0.033478664039678245,
            0.033316497629433374,
            0.03317565382879582,
            0.0330636423121937,
            0.03299768241683544,
            0.033019286914695606,
            0.03322885941729941,
            0.03375584421400814,
            0.033988194207879394,
            0.03343785881309972,
            0.03312984039175181,
            0.031978304453614624,
            0.0314580201445981,
            0.031135289442120517,
            0.030856924377409795,
            0.030609687593498254,
            0.03038551541001565,
            0.030179409584822698,
            0.02998804188758151,
            0.02980908660943615,
            0.029640874404317386,
            0.029482201932169105,
            0.02933222816940937,
            0.029190428885672002,
            0.02905660289553156,
            0.02893094356040894,
            0.028814220887764766,
            0.02870819210472428,
            0.028616555659256016,
            0.028547370511275358,
            0.028519895763976698,
            0.028584213291842304,
            0.028828254228097986,
            0.028995147788812372,
            0.028544469640838954,
            0.028094324872095903,
            0.02780028957153042,
            0.027588911640442883,
            0.027406309491499824,
            0.02724108517359248,
            0.02708845288462862,
            0.02694575124237126,
            0.026811243234089267,
            0.02668368630832139,
            0.026562141516467838,
            0.02644587399565477,
            0.02633429454272662,
            0.026226922264723784,
            0.026123359232780176,
            0.02602327255480223,
            0.02592638133200292,
            0.025832446993664594,
            0.02574126606759345,
            0.025652664777133904,
            0.025566495069118452,
            0.025482631826627005,
            0.02540097113807111,
            0.025321429602328683,
            0.025243944769185196,
            0.025168476971112238,
            0.02509501303684111,
            0.02502357276066333,
            0.024954219670006262,
            0.02488707886169839,
            0.024822367045955154,
            0.02476044474935854,
            0.024701910987034503,
            0.024647784544025768,
            0.024599875226942656,
            0.024561609457700223,
            0.024540059092991777,
            0.024551532481526743,
            0.024638516976916457,
            0.024913258262619194,
            0.02548750644734329,
            0.025348674155454633,
            0.024271991431512735,
            0.023873315155843476,
            0.023645717826053063,
            0.023486623370194186,
            0.023361360479934628,
            0.023255861804945478,
            0.023163040396509165,
            0.023078918357436286,
            0.02300108796349777,
            0.022928008773098953,
            0.022858651635764338,
            0.02279230415949929,
            0.022728458063653867,
            0.022666740907876202,
            0.022606873165936143,
            0.02254864040200907,
            0.02249187476562416,
            0.022436442406900264,
            0.022382234747845252,
            0.022329162320104613,
            0.022277150343794478,
            0.02222613550796973,
            0.022176063593562077,
            0.02212688769566825,
            0.022078566878140648,
            0.022031065144131768,
            0.02198435064053378,
            0.021938395037772236,
            0.02189317304275586,
            0.0218486620142727,
            0.02180484165830977,
            0.02176169378666797,
            0.021719202126550582,
            0.021677352171989156,
            0.02163613107036897,
            0.021595527539156542,
            0.02155553180938019,
            0.021516135593589964,
            0.021477332077023185,
            0.021439115931585855,
            0.021401483353101193,
            0.021364432123113588,
            0.021327961697432778,
            0.021292073324601375,
            0.021256770198641424,
            0.02122205765184888,
            0.0211879433951592,
            0.02115443781582683,
            0.02112155434501004,
            0.02108930991156338,
            0.02105772550322417,
            0.02102682686288041,
            0.02099664535634416,
            0.02096721905992215,
            0.020938594132358924,
            0.020910826558304292,
            0.020883984382110917,
            0.020858150595647922,
            0.02083342690820375,
            0.020809938720049978,
            0.020787841758706484,
            0.020767331041577207,
            0.020748653136956532,
            0.020732123165166174,
            0.020718148703776213,
            0.020707263876382248,
            0.020700178621123215,
            0.020697850721768857,
            0.020701591849080367,
            0.020713223188570894,
            0.02073529808811581,
            0.020771395576686422,
            0.020826414782742775,
            0.02090653408869395,
            0.021017764763811352,
            0.02116086408232629,
            0.02132175786305766,
            0.021467413224588016,
            0.02156396193865999,
            0.02160097033167419,
            0.02158912355838948,
            0.02154435920587898,
            0.021477433881468208,
            0.021390628651606555,
            0.021283053937102434,
            0.02115723241004002,
            0.0210197209734794,
            0.020878136801393898,
            0.020738814169065627,
            0.02060598059808506,
            0.020481854238518362,
            0.020367133536053395,
            0.020261560237306214,
            0.0201643837891186,
            0.020074672717876642,
            0.01999149075154275,
            0.019913980044942763,
            0.01984139039667628,
            0.01977308111679858,
            0.01970851106168756,
            0.019647224876111744,
            0.019588839182509723,
            0.01953303021771717,
            0.019479523341502374,
            0.0194280843701668,
            0.019378512512434484,
            0.019330634643864412,
            0.019284300671377586,
            0.01923937977426809,
            0.019195757345931676,
            0.01915333249500545,
            0.019112015993660695,
            0.019071728584349468,
            0.019032399575025987,
            0.018993965667577425,
            0.018956369975704667,
            0.0189195611974824,
            0.01888349291485029,
            0.018848122997791532,
            0.01881341309528151,
            0.01877932819850267,
            0.018745836264528314,
            0.018712907890833234,
            0.01868051603271176,
            0.018648635757071246,
            0.01861724402718565,
            0.01858631951390267,
            0.0185558424295384,
            0.018525794381296777,
            0.018496158241551142,
            0.01846691803273464,
            0.01843805882492769,
            0.01840956664451308,
            0.018381428392508163,
            0.018353631771378984,
            0.01832616521931096,
            0.018299017851050748,
            0.01827217940455224,
            0.01824564019276307,
            0.018219391059972966,
            0.018193423342219982,
            0.018167728831313422,
            0.018142299742087586,
            0.018117128682546595,
            0.01809220862660157,
            0.01806753288913678,
            0.018043095103170956,
            0.01801888919890839,
            0.017994909384495304,
            0.017971150128319232,
            0.017947606142705883,
            0.017924272368883807,
            0.017901143963100937,
            0.01787821628378907,
            0.0178554848796836,
            0.01783294547881398,
            0.017810593978290302,
            0.017788426434818098
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.2562180368962593
            },
            {
                "epoch": 19,
                "error": 0.22485384741485961
            },
            {
                "epoch": 29,
                "error": 0.21411803055966333
            },
            {
                "epoch": 39,
                "error": 0.20776477489700787
            },
            {
                "epoch": 49,
                "error": 0.20379596897621263
            },
            {
                "epoch": 59,
                "error": 0.20053487879638188
            },
            {
                "epoch": 69,
                "error": 0.19826968085876975
            },
            {
                "epoch": 79,
                "error": 0.1987197358506167
            },
            {
                "epoch": 89,
                "error": 0.19756461876467324
            },
            {
                "epoch": 99,
                "error": 0.20190650392754048
            },
            {
                "epoch": 109,
                "error": 0.19890957769946918
            },
            {
                "epoch": 119,
                "error": 0.19781585981906055
            },
            {
                "epoch": 129,
                "error": 0.19690070187529318
            },
            {
                "epoch": 139,
                "error": 0.1967008794864137
            },
            {
                "epoch": 149,
                "error": 0.19707771491330822
            },
            {
                "epoch": 159,
                "error": 0.1965569019719772
            },
            {
                "epoch": 169,
                "error": 0.19605576461883006
            },
            {
                "epoch": 179,
                "error": 0.19560967250327016
            },
            {
                "epoch": 189,
                "error": 0.19523932590548537
            },
            {
                "epoch": 199,
                "error": 0.19499099562653696
            },
            {
                "epoch": 209,
                "error": 0.1950990974211474
            },
            {
                "epoch": 219,
                "error": 0.19744329953552095
            },
            {
                "epoch": 229,
                "error": 0.19925933375080912
            },
            {
                "epoch": 239,
                "error": 0.19881020884141892
            },
            {
                "epoch": 249,
                "error": 0.19831841964788297
            },
            {
                "epoch": 259,
                "error": 0.19790783616162014
            },
            {
                "epoch": 269,
                "error": 0.19754059200986593
            },
            {
                "epoch": 279,
                "error": 0.1972026155482275
            },
            {
                "epoch": 289,
                "error": 0.19688772000426935
            },
            {
                "epoch": 299,
                "error": 0.1965923872207068
            }
        ],
        "error_plot_path": "./modelos/60_max_200e_error_plot.png",
        "weights_path": "./modelos/60_max_200e_weights.npy",
        "confusion_matrix_path": "./modelos/60_max_200e_confusion_matrix.png",
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 60,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "max_value",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 300,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "120_threshold",
        "timestamp": 1714169020.44607,
        "epoch_errors": [
            0.9857277682164463,
            0.8885999562965561,
            0.6115970024152824,
            0.40627323965205386,
            0.27931310641345397,
            0.2224069522286733,
            0.17168596191279123,
            0.14274622730624137,
            0.12303309660349074,
            0.10413709736049115,
            0.09595333293174155,
            0.08469886557111084,
            0.07791185273065047,
            0.06965890812846809,
            0.06671895525523278,
            0.06644612672212984,
            0.059166600879322406,
            0.055551029226747595,
            0.053938600400719815,
            0.05154125390886741,
            0.047900173439198356,
            0.04554901701790015,
            0.04422720440980451,
            0.04330066741055422,
            0.041742632846495833,
            0.04241785716825565,
            0.042260010964761605,
            0.04206288091098504,
            0.03798980656189865,
            0.0370423088560971,
            0.036506505251110544,
            0.035853346570992824,
            0.03527583714696964,
            0.0346272028206919,
            0.03378658853544029,
            0.032693026089459315,
            0.032013918022880644,
            0.031504543169399234,
            0.031075937681499206,
            0.030693364420749603,
            0.030344078795459424,
            0.030021088057165392,
            0.02971985801115204,
            0.029437163207878262,
            0.029170573309116696,
            0.028918183760419304,
            0.028678458542919817,
            0.0284501312003428,
            0.02823213901462359,
            0.02802357733541016,
            0.027823666805747226,
            0.0276317291821746,
            0.027447169076138478,
            0.02726945989035127,
            0.027098132798658907,
            0.026932767980066566,
            0.026772987552796595,
            0.026618449811190752,
            0.02646884447545831,
            0.026323888739013528,
            0.02618332395122815,
            0.026046912811767894,
            0.025914436980786895,
            0.02578569503015269,
            0.025660500676599786,
            0.025538681249690793,
            0.025420076356682475,
            0.02530453671356253,
            0.025191923117147966,
            0.025082105537584776,
            0.024974962314140398,
            0.024870379440033796,
            0.02476824992435748,
            0.024668473221027592,
            0.024570954716239896,
            0.02447560526718389,
            0.02438234078581836,
            0.024291081862393926,
            0.024201753424141565,
            0.024114284425167644,
            0.024028607564117208,
            0.023944659026613267,
            0.023862378249857454,
            0.023781707707100926,
            0.023702592709971607,
            0.023624981226885982,
            0.023548823715975244,
            0.023474072971140163,
            0.02340068398000112,
            0.023328613792646682,
            0.023257821400203642,
            0.023188267622353726,
            0.023119915003015558,
            0.023052727713489644,
            0.022986671462435566,
            0.02292171341211478,
            0.022857822100385526,
            0.022794967367990016,
            0.022733120290714198,
            0.022672253116043126,
            0.0226123392039689,
            0.022553352971639976,
            0.022495269841569465,
            0.022438066193146165,
            0.02238171931721453,
            0.022326207373511583,
            0.022271509350767483,
            0.02221760502929456,
            0.022164474945904587,
            0.022112100361010082,
            0.022060463227777948,
            0.022009546163217025,
            0.02195933242109234,
            0.021909805866570257,
            0.021860950952509714,
            0.021812752697323873,
            0.021765196664345905,
            0.021718268942644704,
            0.021671956129241977,
            0.02162624531269502,
            0.021581124058017005,
            0.02153658039291802,
            0.021492602795359923,
            0.02144918018242973,
            0.021406301900548676,
            0.021363957717047816,
            0.02132213781315612,
            0.02128083277846403,
            0.021240033606946714,
            0.021199731694651825,
            0.02115991883918596,
            0.021120587241163447,
            0.02108172950782079,
            0.021043338659043023,
            0.02100540813610464,
            0.02096793181349088,
            0.020930904014249133,
            0.020894319529414673,
            0.02085817364218071,
            0.020822462157630776,
            0.02078718143904429,
            0.020752328452021927,
            0.02071790081798071,
            0.020683896878954444,
            0.020650315776130475,
            0.02061715754519206,
            0.020584423232374974,
            0.020552115036242335,
            0.020520236481639798,
            0.020488792634244746,
            0.020457790366756556,
            0.0204272386913793,
            0.02039714917821871,
            0.020367536486169423,
            0.02033841904271177,
            0.020309819923169183,
            0.020281768000576055,
            0.020254299467811147,
            0.020227459879652212,
            0.020201306933102844,
            0.020175914315336968,
            0.020151377126957318,
            0.020127819682331096,
            0.02010540698767179,
            0.020084362071393875,
            0.020064992927553753,
            0.02004773583098617,
            0.020033227711576083,
            0.02002243261911946,
            0.02001687453707461,
            0.020019092763716186,
            0.02003359605207428,
            0.020069007385117056,
            0.020143058247988274,
            0.02029175635562278,
            0.02054669155312418,
            0.02071104231119637,
            0.02028526465591894,
            0.019936438990377805,
            0.019650063652733734,
            0.019502225186953024,
            0.01940309649647229,
            0.019326329114380748,
            0.01926114346381897,
            0.019202763668809433,
            0.019148898089431356,
            0.01909833965124577,
            0.01905038455801742,
            0.019004580367161128,
            0.0189606110709537,
            0.018918241374274555,
            0.018877287736964093,
            0.018837602171315054,
            0.018799062487315926,
            0.018761566010565535,
            0.018725025295869932,
            0.018689365061888605,
            0.01865451991671925,
            0.018620432621645883,
            0.018587052736249676,
            0.018554335542745482,
            0.018522241180127404,
            0.018490733939240413,
            0.018459781683333492,
            0.018429355367781397,
            0.018399428639060984,
            0.018369977497676198,
            0.01834098001311073,
            0.018312416081425035,
            0.018284267218040183,
            0.018256516379734033,
            0.0182291478110271,
            0.01820214691104027,
            0.018175500117622923,
            0.018149194806117975,
            0.01812321920059035,
            0.018097562295711637,
            0.018072213787795097,
            0.01804716401371817,
            0.018022403896670276,
            0.017997924897827915,
            0.01797371897319648,
            0.017949778534969884,
            0.01792609641685548,
            0.01790266584288871,
            0.01787948039933058,
            0.01785653400929576,
            0.017833820909807372,
            0.01781133563101425,
            0.017789072977342692,
            0.017767028010381738,
            0.0177451960333291,
            0.017723572576844537,
            0.017702153386178435,
            0.0176809344094581,
            0.01765991178703033,
            0.017639081841770238,
            0.017618441070278355,
            0.01759798613489746,
            0.01757771385648943,
            0.017557621207921047,
            0.017537705308213743,
            0.017517963417319805,
            0.01749839293149358,
            0.017478991379230823,
            0.017459756417756565,
            0.017440685830045117,
            0.01742177752236216,
            0.0174030295223235,
            0.017384439977469295,
            0.017366007154359424,
            0.017347729438198744,
            0.017329605333009052,
            0.017311633462367776,
            0.017293812570743295,
            0.017276141525460833,
            0.017258619319342906,
            0.01724124507407704,
            0.017224018044372593,
            0.017206937622981967,
            0.017190003346673095,
            0.017173214903257183,
            0.017156572139792655,
            0.017140075072108206,
            0.017123723895811738,
            0.01710751899898238,
            0.017091460976776593,
            0.017075550648220774,
            0.017059789075512633,
            0.017044177586211736,
            0.017028717798771575,
            0.017013411651951537,
            0.01699826143875036,
            0.016983269845632032,
            0.016968439997968477,
            0.016953775512817106,
            0.016939280560386974,
            0.016924959935841002,
            0.01691081914344933,
            0.01689686449556785,
            0.01688310322949625,
            0.016869543646004105,
            0.016856195274251924,
            0.01684306906903428,
            0.016830177647826374,
            0.016817535577128194,
            0.01680515972024064,
            0.016793069662078542,
            0.016781288231234724,
            0.016769842145667572,
            0.01675876281667971,
            0.016748087357112498,
            0.016737859855081375,
            0.016728132995802794,
            0.016718970143539805,
            0.016710448036899014,
            0.016702660308646432,
            0.016695722122951534,
            0.016689776338348224,
            0.016685001766650054
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.2298802129318814
            },
            {
                "epoch": 19,
                "error": 0.20786812839821586
            },
            {
                "epoch": 29,
                "error": 0.18958774531145015
            },
            {
                "epoch": 39,
                "error": 0.18250954403259093
            },
            {
                "epoch": 49,
                "error": 0.17992783346028252
            },
            {
                "epoch": 59,
                "error": 0.17812186179212544
            },
            {
                "epoch": 69,
                "error": 0.17672558069408642
            },
            {
                "epoch": 79,
                "error": 0.17559472472178336
            },
            {
                "epoch": 89,
                "error": 0.17465101456612248
            },
            {
                "epoch": 99,
                "error": 0.1738467636133138
            },
            {
                "epoch": 109,
                "error": 0.17315112186088152
            },
            {
                "epoch": 119,
                "error": 0.17254364613445447
            },
            {
                "epoch": 129,
                "error": 0.17201123966415094
            },
            {
                "epoch": 139,
                "error": 0.17154735686235179
            },
            {
                "epoch": 149,
                "error": 0.17115452758667957
            },
            {
                "epoch": 159,
                "error": 0.17085927002309076
            },
            {
                "epoch": 169,
                "error": 0.17085028610513173
            },
            {
                "epoch": 179,
                "error": 0.17226810607428594
            },
            {
                "epoch": 189,
                "error": 0.1718406429077961
            },
            {
                "epoch": 199,
                "error": 0.17136682312734
            },
            {
                "epoch": 209,
                "error": 0.17095902437843047
            },
            {
                "epoch": 219,
                "error": 0.17059863398736677
            },
            {
                "epoch": 229,
                "error": 0.1702731738970731
            },
            {
                "epoch": 239,
                "error": 0.16997524742975298
            },
            {
                "epoch": 249,
                "error": 0.16970028209560412
            },
            {
                "epoch": 259,
                "error": 0.16944555197652122
            },
            {
                "epoch": 269,
                "error": 0.16920998801125853
            },
            {
                "epoch": 279,
                "error": 0.16899491305573236
            },
            {
                "epoch": 289,
                "error": 0.16880735291188087
            },
            {
                "epoch": 299,
                "error": 0.16867587942787687
            }
        ],
        "error_plot_path": "./modelos/120_threshold_error_plot.png",
        "weights_path": "./modelos/120_threshold_weights.npy",
        "confusion_matrix_path": "./modelos/120_threshold_confusion_matrix.png",
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 120,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 300,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "120_threshold_tanh",
        "timestamp": 1714169954.445647,
        "epoch_errors": [
            0.9088577959271847,
            0.8237837973044992,
            0.7941063483447397,
            0.779831613099296,
            0.7713258191485368,
            0.7656360791404063,
            0.7615028398428416,
            0.7583125339927665,
            0.7557368302771607,
            0.7535848912977421,
            0.7517375078671137,
            0.750115105860866,
            0.748660770936959,
            0.7473304743712071,
            0.7460867363409398,
            0.7448936036133844,
            0.7437115445104768,
            0.742491322089741,
            0.7411672722040658,
            0.7396550313283499,
            0.7378655853005913,
            0.7357413542573025,
            0.7332907848348925,
            0.730585779087113,
            0.7277225012083071,
            0.7247806150121405,
            0.7218061720196742,
            0.7188150061200467,
            0.7158019494635424,
            0.7127471314373008,
            0.7096187842813977,
            0.7063751684854045,
            0.7029682448659982,
            0.699351323309335,
            0.6954912645822323,
            0.6913807122873541,
            0.6870415273799131,
            0.6825156597617592,
            0.6778502545613699,
            0.673086537004826,
            0.6682559252916844,
            0.6633811526775807,
            0.6584791125772966,
            0.653563586906909,
            0.6486474557335823,
            0.643744511448712,
            0.6388707631955174,
            0.6340447216032662,
            0.6292862272267231,
            0.6246140553023841,
            0.6200432487660723,
            0.6155832567500857,
            0.6112374312136531,
            0.6070037478622635,
            0.6028762245751019,
            0.5988464944472807,
            0.5949051782548259,
            0.5910429073995234,
            0.587250987367778,
            0.5835217594676287,
            0.5798487408041438,
            0.5762266220045306,
            0.5726511913503212,
            0.5691192379791651,
            0.5656284684015137,
            0.5621774518151973,
            0.5587655924738942,
            0.5553931136434441,
            0.5520610296596739,
            0.5487710821841116,
            0.5455256244230087,
            0.5423274509322066,
            0.5391795864282742,
            0.5360850594828809,
            0.5330466918799519,
            0.5300669304371984,
            0.5271477372883357,
            0.5242905412892247,
            0.5214962418250586,
            0.5187652496925111,
            0.5160975484175948,
            0.5134927620176608,
            0.5109502197454392,
            0.5084690129233392,
            0.5060480424892568,
            0.5036860579967245,
            0.501381689721899,
            0.49913347562396854,
            0.49693988458070315,
            0.4947993368703556,
            0.4927102224643011,
            0.4906709174016601,
            0.48867979834445,
            0.48673525533559076,
            0.48483570276942317,
            0.4829795886056881,
            0.48116540189145335,
            0.4793916786884351,
            0.4776570065290295,
            0.47596002754156597,
            0.47429944039443706,
            0.4726740012113196,
            0.4710825236075324,
            0.4695238779918889,
            0.46799699027022573,
            0.46650084007686815,
            0.4650344586489812,
            0.4635969264466305,
            0.46218737060869947,
            0.4608049623220011,
            0.4594489141683319,
            0.4581184775022231,
            0.45681293990087607,
            0.4555316227176474,
            0.45427387876141473,
            0.4530390901163781,
            0.4518266661103556,
            0.45063604143424435,
            0.4494666744111479,
            0.4483180454104189,
            0.4471896553995141,
            0.44608102462500393,
            0.4449916914130613,
            0.4439212110793148,
            0.442869154937895,
            0.44183510939971005,
            0.4408186751504568,
            0.43981946639949676,
            0.438837110191405,
            0.4378712457727812,
            0.43692152400766593,
            0.4359876068356731,
            0.43506916676767526,
            0.43416588641456716,
            0.43327745804524503,
            0.4324035831705273,
            0.4315439721502295,
            0.43069834382107425,
            0.42986642514347534,
            0.4290479508655935,
            0.4282426632033155,
            0.42745031153505375,
            0.426670652110462,
            0.4259034477722814,
            0.4251484676906835,
            0.4244054871095756,
            0.4236742871043559,
            0.42295465435071433,
            0.42224638090408323,
            0.4215492639893596,
            0.4208631058005502,
            0.42018771330999366,
            0.4195228980868227,
            0.4188684761243054,
            0.41822426767575727,
            0.41759009709862743,
            0.41696579270646505,
            0.41635118662837595,
            0.4157461146756534,
            0.4151504162152016,
            0.4145639340494459,
            0.41398651430236805,
            0.413418006311336,
            0.41285826252442104,
            0.4123071384028645,
            0.4117644923284255,
            0.4112301855152706,
            0.41070408192617464,
            0.41018604819273724,
            0.40967595353936753,
            0.40917366971080094,
            0.40867907090292316,
            0.40819203369669155,
            0.4077124369949361,
            0.4072401619618812,
            0.4067750919651978,
            0.4063171125204228,
            0.40586611123760136,
            0.405421977770018,
            0.4049846037648703,
            0.4045538828157842,
            0.4041297104170483,
            0.4037119839194733,
            0.4033006024877713,
            0.40289546705938994,
            0.40249648030469454,
            0.40210354658844594,
            0.40171657193250104,
            0.4013354639796584,
            0.4009601319586222,
            0.40059048664999747,
            0.4002264403532943,
            0.3998679068548802,
            0.3995148013968432,
            0.3991670406467211,
            0.3988245426680821,
            0.3984872268918854,
            0.3981550140886259,
            0.39782782634121566,
            0.3975055870185756,
            0.3971882207499145,
            0.3968756533996742,
            0.3965678120431079,
            0.39626462494248277,
            0.3959660215238728,
            0.39567193235453707,
            0.39538228912085066,
            0.3950970246067801,
            0.3948160726728888,
            0.39453936823583846,
            0.39426684724840094,
            0.3939984466799375,
            0.3937341044973453,
            0.3934737596464592,
            0.39321735203389113,
            0.3929648225092907,
            0.3927161128480299,
            0.3924711657342762,
            0.39222992474447355,
            0.3919923343311902,
            0.39175833980734354,
            0.39152788733078164,
            0.3913009238892169,
            0.391077397285501,
            0.3908572561232268,
            0.39064044979265655,
            0.3904269284569629,
            0.3902166430387714,
            0.3900095452070083,
            0.3898055873640294,
            0.38960472263303075,
            0.38940690484574164,
            0.38921208853037237,
            0.3890202288998323,
            0.38883128184019106,
            0.3886452038993937,
            0.3884619522762113,
            0.38828148480942354,
            0.388103759967235,
            0.387928736836903,
            0.38775637511458966,
            0.3875866350954182,
            0.38741947766373597,
            0.3872548642835754,
            0.38709275698931184,
            0.38693311837650274,
            0.3867759115929215,
            0.3866211003297632,
            0.3864686488130263,
            0.3863185217950616,
            0.38617068454630016,
            0.3860251028471256,
            0.38588174297991196,
            0.3857405717212214,
            0.38560155633413634,
            0.3854646645607556,
            0.3853298646148186,
            0.38519712517447413,
            0.38506641537518543,
            0.3849377048027664,
            0.38481096348654387,
            0.3846861618926506,
            0.3845632709174369,
            0.3844422618810016,
            0.38432310652084406,
            0.3842057769856248,
            0.384090245829042,
            0.38397648600381296,
            0.3838644708557614,
            0.3837541741180123,
            0.383645569905285,
            0.3835386327082831,
            0.38343333738818364,
            0.38332965917122164,
            0.3832275736433605,
            0.38312705674505954,
            0.38302808476612576,
            0.3829306343406491,
            0.38283468244203245,
            0.38274020637808337,
            0.3826471837862099,
            0.3825555926286747,
            0.38246541118794236,
            0.3823766180620893,
            0.3822891921602901,
            0.38220311269838564,
            0.3821183591945037,
            0.3820349114647651,
            0.381952749619048,
            0.3818718540568217,
            0.3817922054630424,
            0.38171378480411505,
            0.3816365733239175,
            0.3815605525398798,
            0.38148570423913103,
            0.38141201047470136,
            0.38133945356177695,
            0.3812680160740205,
            0.3811976808399327,
            0.3811284309392808
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.812251501075877
            },
            {
                "epoch": 19,
                "error": 0.8061798503943318
            },
            {
                "epoch": 29,
                "error": 0.7805484485614805
            },
            {
                "epoch": 39,
                "error": 0.7500820980673999
            },
            {
                "epoch": 49,
                "error": 0.7184959589604131
            },
            {
                "epoch": 59,
                "error": 0.6924007248150487
            },
            {
                "epoch": 69,
                "error": 0.6676305783644774
            },
            {
                "epoch": 79,
                "error": 0.6460001395293239
            },
            {
                "epoch": 89,
                "error": 0.629340074114264
            },
            {
                "epoch": 99,
                "error": 0.6165982581109987
            },
            {
                "epoch": 109,
                "error": 0.6069295258399034
            },
            {
                "epoch": 119,
                "error": 0.5995815669789702
            },
            {
                "epoch": 129,
                "error": 0.5939330259091926
            },
            {
                "epoch": 139,
                "error": 0.5895297952794635
            },
            {
                "epoch": 149,
                "error": 0.5860525635286973
            },
            {
                "epoch": 159,
                "error": 0.5832777362377687
            },
            {
                "epoch": 169,
                "error": 0.5810468821004503
            },
            {
                "epoch": 179,
                "error": 0.5792456205143924
            },
            {
                "epoch": 189,
                "error": 0.5777895934855811
            },
            {
                "epoch": 199,
                "error": 0.5766150881780713
            },
            {
                "epoch": 209,
                "error": 0.5756726952053645
            },
            {
                "epoch": 219,
                "error": 0.5749230337984989
            },
            {
                "epoch": 229,
                "error": 0.5743339138416442
            },
            {
                "epoch": 239,
                "error": 0.5738784818693233
            },
            {
                "epoch": 249,
                "error": 0.5735340171807297
            },
            {
                "epoch": 259,
                "error": 0.5732811399322016
            },
            {
                "epoch": 269,
                "error": 0.5731032703415841
            },
            {
                "epoch": 279,
                "error": 0.5729862364783519
            },
            {
                "epoch": 289,
                "error": 0.5729179688670463
            },
            {
                "epoch": 299,
                "error": 0.5728882466257273
            }
        ],
        "error_plot_path": "./modelos/120_threshold_tanh_error_plot.png",
        "weights_path": "./modelos/120_threshold_tanh_weights.npy",
        "confusion_matrix_path": "./modelos/120_threshold_tanh_confusion_matrix.png",
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 120,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[FunctionDef(name='tanh', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='tanh', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[FunctionDef(name='tanh_derivative', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='tanh', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=2))))], decorator_list=[], type_params=[])], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 300,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 0.01,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "120_max",
        "timestamp": 1714171153.149723,
        "epoch_errors": [
            0.9860234881784835,
            0.8896641025959288,
            0.6284831337470344,
            0.4172102238901434,
            0.3051650104979389,
            0.22775851183690976,
            0.17397464923013034,
            0.14573976145989878,
            0.12022105764748654,
            0.103209500695473,
            0.09957825934181654,
            0.08998442425298521,
            0.08819600946151074,
            0.08107754125459796,
            0.07533976483538625,
            0.0710022878793729,
            0.06718269980524363,
            0.060607690381762794,
            0.058042243145648605,
            0.05565961213723714,
            0.05453301251437688,
            0.05214969901930364,
            0.048708696014731524,
            0.04937371795180278,
            0.04863368539001489,
            0.048411535485415144,
            0.043516684165819795,
            0.041732343596444704,
            0.03978314763220873,
            0.0380296056271993,
            0.03811957416371158,
            0.03629360209721082,
            0.035612026350941,
            0.03570338175025016,
            0.03617003241604783,
            0.03565710096339891,
            0.034166633891018934,
            0.03397380590348653,
            0.03426558714005655,
            0.03448836805226069,
            0.0334055823627719,
            0.031995849057795504,
            0.03075983055621358,
            0.030235781830572326,
            0.02982293613043104,
            0.02948035191060811,
            0.029200764283877894,
            0.02900642625024936,
            0.028997046631837445,
            0.029326643074292592,
            0.02913312807257209,
            0.027833382837331555,
            0.027460662107124514,
            0.027142930430787325,
            0.026861973983216447,
            0.026607669694154654,
            0.026374279398127486,
            0.026158221216291862,
            0.02595726048528877,
            0.025770269088515665,
            0.025597469258163114,
            0.02544166088863461,
            0.025312834735221352,
            0.02524899965609361,
            0.025427795589392854,
            0.02618627862087712,
            0.024323689660506857,
            0.02405877419564326,
            0.02384782896073864,
            0.023661445746179077,
            0.02349103482876427,
            0.0233324086194849,
            0.023183144728240592,
            0.023041670086758215,
            0.02290687600778086,
            0.02277793388018637,
            0.022654197453887095,
            0.022535146525415054,
            0.022420352166263587,
            0.022309453997918,
            0.022202144632123628,
            0.022098158603640578,
            0.02199726424875383,
            0.02189925758996357,
            0.02180395763144571,
            0.02171120267385423,
            0.0216208473828091,
            0.02153276042573831,
            0.021446822544652872,
            0.02136292496825255,
            0.021280968091604176,
            0.02120086036923128,
            0.02112251738016354,
            0.02104586103281927,
            0.020970818884545214,
            0.020897323555887224,
            0.020825312223673974,
            0.020754726180094954,
            0.02068551044736963,
            0.020617613439507382,
            0.020550986664164977,
            0.020485584458817225,
            0.020421363756425212,
            0.020358283876574672,
            0.0202963063386988,
            0.020235394694524532,
            0.020175514377315733,
            0.02011663256584521,
            0.020058718061326523,
            0.020001741175786195,
            0.019945673630566704,
            0.0198904884638275,
            0.019836159946061024,
            0.019782663502767424,
            0.019729975643540915,
            0.019678073896912673,
            0.01962693675037479,
            0.01957654359507958,
            0.01952687467476566,
            0.01947791103851589,
            0.01942963449699521,
            0.019382027581855442,
            0.019335073508029592,
            0.019288756138665594,
            0.019243059952477982,
            0.019197970013317033,
            0.019153471941776797,
            0.01910955188868038,
            0.01906619651029795,
            0.019023392945165765,
            0.018981128792388682,
            0.018939392091319264,
            0.0188981713025169,
            0.018857455289899426,
            0.018817233304009213,
            0.01877749496632109,
            0.018738230254528834,
            0.018699429488751328,
            0.018661083318606476,
            0.018623182711106075,
            0.01858571893932912,
            0.018548683571837376,
            0.018512068462799344,
            0.018475865742795392,
            0.018440067810278477,
            0.018404667323671596,
            0.01836965719408389,
            0.018335030578634608,
            0.018300780874375974,
            0.018266901712810375,
            0.018233386955002703,
            0.018200230687292356,
            0.01816742721761452,
            0.018134971072445695,
            0.018102856994394192,
            0.018071079940463447,
            0.01803963508102207,
            0.018008517799523716,
            0.01797772369302952,
            0.017947248573594744,
            0.017917088470596757,
            0.017887239634092604,
            0.01785769853931389,
            0.017828461892425748,
            0.017799526637699386,
            0.01777088996627704,
            0.017742549326740523,
            0.017714502437735206,
            0.017686747302948457,
            0.017659282228801056,
            0.01763210584528017,
            0.017605217130429243,
            0.01757861543911608,
            0.017552300536832814,
            0.01752627263944226,
            0.017500532459989795,
            0.01747508126395352,
            0.01744992093462762,
            0.017425054050740924,
            0.01740048397893533,
            0.017376214984400222,
            0.017352252363829014,
            0.017328602606003513,
            0.017305273586809358,
            0.01728227480747997,
            0.01725961768753755,
            0.017237315927520355,
            0.017215385961539126,
            0.017193847526563368,
            0.01717272438494289,
            0.017152045250298988,
            0.01713184498652595,
            0.017112166178274275,
            0.01709306121377456,
            0.01707459508502571,
            0.017056849209131014,
            0.01703992672976249,
            0.01702396000719698,
            0.017009121416445068,
            0.01699563926907187,
            0.016983821888756082,
            0.016974095060039832,
            0.01696706216015194,
            0.016963604223861145,
            0.01696505322482279,
            0.016973505446947843,
            0.016992413808798266,
            0.01702774792727128,
            0.017090251056107654,
            0.017199028990542348,
            0.017380170636367404,
            0.017621056654407885,
            0.017738099955021444,
            0.017503143585513036,
            0.017176018279440593,
            0.0168892320303998,
            0.01674092566628663,
            0.016642744805850606,
            0.016562935834468554,
            0.01649270605295782,
            0.016428982557389334,
            0.016370315797953453,
            0.016315811167834565,
            0.016264820571708617,
            0.01621683857203026,
            0.016171458309173676,
            0.016128347297679906,
            0.016087231337988585,
            0.016047882684471458,
            0.016010110952212483,
            0.015973756001356334,
            0.015938682323757405,
            0.015904774593592633,
            0.01587193412671046,
            0.015840076052135072,
            0.01580912704339901,
            0.01577902349150339,
            0.01574971002775652,
            0.015721138325225006,
            0.01569326612339259,
            0.01566605643289915,
            0.015639476886764345,
            0.015613499211928233,
            0.015588098800769341,
            0.015563254366880512,
            0.015538947673090945,
            0.01551516332276336,
            0.015491888607951471,
            0.015469113410232509,
            0.015446830152068922,
            0.015425033798520605,
            0.01540372191115005,
            0.015382894758170467,
            0.015362555487431317,
            0.015342710371917822,
            0.015323369141309025,
            0.01530454541814627,
            0.01528625728379705,
            0.01526852800835622,
            0.015251386990929686,
            0.015234870973905865,
            0.01521902561911015,
            0.015203907568642608,
            0.015189587164126923,
            0.015176152073620202,
            0.015163712189344265,
            0.015152406334390996,
            0.015142411590668176,
            0.015133956498815309,
            0.01512734009799833,
            0.015122959974617423,
            0.01512135455076145,
            0.015123268471398213,
            0.015129756483735475,
            0.01514235317899457,
            0.015163357960744991,
            0.015196323347640244,
            0.015246890937984349,
            0.015324128265517325,
            0.01544203752977853,
            0.015618002766985486,
            0.01585655141630053,
            0.01611171239481664,
            0.016291727536516483,
            0.0163512556794242,
            0.01630713052854654,
            0.016194491494311195,
            0.016053197645213305,
            0.015907472585516277,
            0.015766436861395266,
            0.015632573685597187,
            0.015506132708060031,
            0.015386726843330062,
            0.015273875176829665,
            0.015167170448901132,
            0.015066305704581047,
            0.014971049802771492,
            0.01488121009836433,
            0.014796599191958713,
            0.014717012308905479
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.23236246835554195
            },
            {
                "epoch": 19,
                "error": 0.22257868358361269
            },
            {
                "epoch": 29,
                "error": 0.18438176299800701
            },
            {
                "epoch": 39,
                "error": 0.18232413003472475
            },
            {
                "epoch": 49,
                "error": 0.1798896392691049
            },
            {
                "epoch": 59,
                "error": 0.17634160365011936
            },
            {
                "epoch": 69,
                "error": 0.17449719548869752
            },
            {
                "epoch": 79,
                "error": 0.17293174368277509
            },
            {
                "epoch": 89,
                "error": 0.17184549379247083
            },
            {
                "epoch": 99,
                "error": 0.1709642183057052
            },
            {
                "epoch": 109,
                "error": 0.17021616716261947
            },
            {
                "epoch": 119,
                "error": 0.16956504247901982
            },
            {
                "epoch": 129,
                "error": 0.16898887158811046
            },
            {
                "epoch": 139,
                "error": 0.16847323179720267
            },
            {
                "epoch": 149,
                "error": 0.1680083416642252
            },
            {
                "epoch": 159,
                "error": 0.1675877379059947
            },
            {
                "epoch": 169,
                "error": 0.16720794717286552
            },
            {
                "epoch": 179,
                "error": 0.1668695011954579
            },
            {
                "epoch": 189,
                "error": 0.1665822304379638
            },
            {
                "epoch": 199,
                "error": 0.1663988708100235
            },
            {
                "epoch": 209,
                "error": 0.16728325954598167
            },
            {
                "epoch": 219,
                "error": 0.16907581815010392
            },
            {
                "epoch": 229,
                "error": 0.16874876908714334
            },
            {
                "epoch": 239,
                "error": 0.16847927820351905
            },
            {
                "epoch": 249,
                "error": 0.16825460788198418
            },
            {
                "epoch": 259,
                "error": 0.16807719332884252
            },
            {
                "epoch": 269,
                "error": 0.16799871746775355
            },
            {
                "epoch": 279,
                "error": 0.16866133473852057
            },
            {
                "epoch": 289,
                "error": 0.1699946730996003
            },
            {
                "epoch": 299,
                "error": 0.1689623439904107
            }
        ],
        "error_plot_path": "./modelos/120_max_error_plot.png",
        "weights_path": "./modelos/120_max_weights.npy",
        "confusion_matrix_path": "./modelos/120_max_confusion_matrix.png",
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 120,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "max_value",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 300,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "120_max_200e",
        "timestamp": 1714172356.695682,
        "epoch_errors": [
            0.985562748960278,
            0.8904819884821922,
            0.6205142203217122,
            0.4162125335203745,
            0.2948949612011953,
            0.22871369787397355,
            0.17645988465133777,
            0.14197152722658757,
            0.1141172554958883,
            0.09652440564464658,
            0.08488433526652843,
            0.07992705359541732,
            0.07488977624500284,
            0.07154594533865319,
            0.06627491464054644,
            0.06292602736675056,
            0.063158842143538,
            0.058777715592314476,
            0.05789188264897401,
            0.05308597159986562,
            0.05011224513204849,
            0.047380408546722895,
            0.04668202239009523,
            0.04567968677934014,
            0.04527896895829589,
            0.04198894004213231,
            0.04100019845384344,
            0.04036061080741068,
            0.03939846394062678,
            0.03945386692554423,
            0.038550670662794426,
            0.03884249083619545,
            0.038668592751409894,
            0.03881737041486275,
            0.040124816572305134,
            0.03755044982257999,
            0.037002732316625625,
            0.03674923552354071,
            0.035795273314088126,
            0.034149488952643324,
            0.03392968096852359,
            0.03288577218349159,
            0.03164768859825903,
            0.030992702717494366,
            0.030451907977235966,
            0.029984867033705394,
            0.02957085742592512,
            0.029197342486070126,
            0.028856024398839657,
            0.028541082924126167,
            0.028248255383030153,
            0.027974311865938743,
            0.02771673664993818,
            0.027473525136607925,
            0.027243049154129576,
            0.027023964570589025,
            0.026815146098035435,
            0.026615640141061003,
            0.026424629957773595,
            0.02624140942857185,
            0.026065362973149573,
            0.02589594994343864,
            0.025732692331132064,
            0.0255751649677873,
            0.02542298762564441,
            0.02527581858631543,
            0.02513334935627952,
            0.024995300287917573,
            0.024861416922609316,
            0.024731466914821757,
            0.024605237427610248,
            0.024482532913610557,
            0.024363173213554093,
            0.02424699191809865,
            0.02413383494940768,
            0.024023559327214367,
            0.023916032090628512,
            0.023811129352116902,
            0.023708735464209575,
            0.02360874228279545,
            0.023511048513548145,
            0.023415559130195933,
            0.023322184855129612,
            0.023230841694302642,
            0.02314145051958598,
            0.02305393669274071,
            0.02296822972600853,
            0.022884262975020636,
            0.022801973360311943,
            0.022721301114226905,
            0.022642189550424567,
            0.02256458485354751,
            0.022488435886927217,
            0.022413694016460383,
            0.022340312949015194,
            0.02226824858392314,
            0.022197458876277335,
            0.0221279037109066,
            0.022059544786020603,
            0.02199234550563118,
            0.021926270879952643,
            0.021861287433068328,
            0.021797363117225646,
            0.021734467233186037,
            0.02167257035611542,
            0.021611644266552297,
            0.021551661886034114,
            0.021492597217004687,
            0.021434425286660667,
            0.02137712209442615,
            0.021320664562775614,
            0.021265030491146916,
            0.02121019851271304,
            0.021156148053799565,
            0.02110285929575303,
            0.02105031313908418,
            0.020998491169722203,
            0.020947375627232,
            0.020896949374858104,
            0.020847195871268452,
            0.02079809914388431,
            0.02074964376368883,
            0.020701814821417037,
            0.020654597905036046,
            0.0206079790784331,
            0.02056194486123358,
            0.02051648220967806,
            0.020471578498491273,
            0.020427221503683455,
            0.020383399386225375,
            0.020340100676545493,
            0.02029731425979967,
            0.020255029361867516,
            0.02021323553603381,
            0.020171922650314193,
            0.020131080875389177,
            0.020090700673111667,
            0.02005077278555583,
            0.020011288224577223,
            0.019972238261856644,
            0.01993361441940067,
            0.0198954084604745,
            0.019857612380944942,
            0.01982021840101064,
            0.0197832189573002,
            0.019746606695319083,
            0.01971037446222741,
            0.019674515299931625,
            0.019639022438475012,
            0.019603889289711643,
            0.019569109441250433,
            0.019534676650655346,
            0.019500584839890887,
            0.01946682808999992,
            0.019433400636003535,
            0.01940029686201315,
            0.019367511296544054,
            0.019335038608022676,
            0.01930287360047759,
            0.019271011209407617,
            0.019239446497818207,
            0.019208174652419675,
            0.019177190979980347,
            0.01914649090382825,
            0.01911606996049536,
            0.019085923796498934,
            0.019056048165254615,
            0.019026438924116117,
            0.01899709203153754,
            0.018968003544353216,
            0.018939169615171447,
            0.0189105864898786,
            0.018882250505249443,
            0.018854158086661164,
            0.01882630574590782,
            0.01879869007911238,
            0.01877130776473415,
            0.01874415556166928,
            0.018717230307442285,
            0.0186905289164872,
            0.01866404837851618,
            0.018637785756975292,
            0.01861173818758587,
            0.01858590287697069,
            0.01856027710136508,
            0.018534858205412213,
            0.01850964360104327,
            0.0184846307664425,
            0.01845981724509817,
            0.01843520064494075,
            0.01841077863756907,
            0.018386548957567694,
            0.018362509401916575,
            0.01833865782949657,
            0.0183149921606937,
            0.018291510377107002,
            0.018268210521362984,
            0.01824509069704352,
            0.01822214906873191,
            0.018199383862184972,
            0.01817679336463803,
            0.018154375925252392,
            0.018132129955714785,
            0.01811005393100049,
            0.018088146390312823,
            0.018066405938213383,
            0.018044831245959982,
            0.018023421053070022,
            0.018002174169131264,
            0.01798108947588348,
            0.017960165929597906,
            0.01793940256378568,
            0.017918798492269603,
            0.017898352912660224,
            0.017878065110280103,
            0.017857934462589882,
            0.017837960444174218,
            0.017818142632356794,
            0.017798480713522146,
            0.017778974490235064,
            0.017759623889261424,
            0.017740428970611784,
            0.0177213899377468,
            0.017702507149108666,
            0.017683781131167267,
            0.017665212593204846,
            0.017646802444098872,
            0.01762855181141175,
            0.017610462063148896,
            0.01759253483261679,
            0.01757477204689144,
            0.01755717595950908,
            0.017539749188110427,
            0.01752249475792043,
            0.01750541615212741,
            0.017488517370455023,
            0.01747180299750231,
            0.01745527828278464,
            0.0174389492348536,
            0.0174228227324434,
            0.01740690665631143,
            0.017391210046369215,
            0.017375743289895572,
            0.017360518348179744,
            0.0173455490309794,
            0.01733085133086858,
            0.017316443833129417,
            0.017302348221645086,
            0.01728858990776142,
            0.017275198817981643,
            0.017262210388657773,
            0.017249666833011018,
            0.01723761877006484,
            0.0172261273397345,
            0.01721526697847874,
            0.017205129103478687,
            0.017195827062651204,
            0.017187502872627096,
            0.017180336518762763,
            0.01717455898154007,
            0.01717047076541712,
            0.01716846867260391,
            0.01716908509128441,
            0.017173046441351134,
            0.01718136091063837,
            0.017195449933900868,
            0.017217339948573586,
            0.01724991686356232,
            0.017297164328903304,
            0.017364005389260005,
            0.017454580312841018,
            0.017567202285270003,
            0.017689923305043303,
            0.017815486291550418,
            0.017960324096962018,
            0.018119380233794714,
            0.018235441985144294,
            0.018240715638499935,
            0.01815271519997412,
            0.018031356927520618,
            0.017899439092283365,
            0.017764081970777387,
            0.017627363482687602,
            0.017491011128061593,
            0.017357686594782373,
            0.017230513381891892,
            0.017112232610073105,
            0.017004480127145748,
            0.01690752798444073,
            0.016820579492683656,
            0.016742323690309906,
            0.016671389247708022,
            0.016606569428951872,
            0.016546878084999824,
            0.016491529504257963,
            0.016439898521289728,
            0.016391483147036708,
            0.016345875152086298,
            0.016302738199873476,
            0.016261791817123825
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.21761213319248662
            },
            {
                "epoch": 19,
                "error": 0.21022238212361583
            },
            {
                "epoch": 29,
                "error": 0.19081895584533115
            },
            {
                "epoch": 39,
                "error": 0.18883873358618813
            },
            {
                "epoch": 49,
                "error": 0.18252720636909683
            },
            {
                "epoch": 59,
                "error": 0.1795726965379838
            },
            {
                "epoch": 69,
                "error": 0.17756944241358946
            },
            {
                "epoch": 79,
                "error": 0.17604170258435686
            },
            {
                "epoch": 89,
                "error": 0.1748096640241048
            },
            {
                "epoch": 99,
                "error": 0.1737808126629429
            },
            {
                "epoch": 109,
                "error": 0.17290014758071812
            },
            {
                "epoch": 119,
                "error": 0.17213206313739937
            },
            {
                "epoch": 129,
                "error": 0.1714521528049566
            },
            {
                "epoch": 139,
                "error": 0.17084297560291498
            },
            {
                "epoch": 149,
                "error": 0.1702916642514928
            },
            {
                "epoch": 159,
                "error": 0.16978848339975908
            },
            {
                "epoch": 169,
                "error": 0.16932591754688905
            },
            {
                "epoch": 179,
                "error": 0.1688980736823248
            },
            {
                "epoch": 189,
                "error": 0.16850028300862893
            },
            {
                "epoch": 199,
                "error": 0.16812884018315444
            },
            {
                "epoch": 209,
                "error": 0.16778085594259523
            },
            {
                "epoch": 219,
                "error": 0.1674542436131048
            },
            {
                "epoch": 229,
                "error": 0.16714796495523873
            },
            {
                "epoch": 239,
                "error": 0.1668630478825285
            },
            {
                "epoch": 249,
                "error": 0.16660690177531431
            },
            {
                "epoch": 259,
                "error": 0.1664201658925279
            },
            {
                "epoch": 269,
                "error": 0.16672747295935705
            },
            {
                "epoch": 279,
                "error": 0.16880859512185845
            },
            {
                "epoch": 289,
                "error": 0.1685605155277005
            },
            {
                "epoch": 299,
                "error": 0.1678790706756142
            }
        ],
        "error_plot_path": "./modelos/120_max_200e_error_plot.png",
        "weights_path": "./modelos/120_max_200e_weights.npy",
        "confusion_matrix_path": "./modelos/120_max_200e_confusion_matrix.png",
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 120,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "max_value",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 300,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "200_max",
        "timestamp": 1714174244.810203,
        "epoch_errors": [
            0.993466258062679,
            0.9320829832668097,
            0.7243950787394411,
            0.4956360937090401,
            0.3539979443245178,
            0.29621016043729675,
            0.22726657887836935,
            0.15489215285761,
            0.12122048423772998,
            0.10890545845727434,
            0.09636343849148743,
            0.08525251097680937,
            0.08863612128330621,
            0.07350281515933907,
            0.07505478454898576,
            0.06267378256327137,
            0.06262466675866515,
            0.06047704867663357,
            0.05776109262725813,
            0.05192197262736601,
            0.05065904821986801,
            0.04991131940154148,
            0.04783539883558992,
            0.048162124067599905,
            0.0449608813270786,
            0.04364518583912527,
            0.03924462826464257,
            0.038612199876309754,
            0.03676671928527791,
            0.03709315835027142,
            0.03605199562585441,
            0.03483072835836793,
            0.032980876092384794,
            0.03174929974639357,
            0.031099569162939524,
            0.03056985981812408,
            0.030115411274161757,
            0.029711238609855126,
            0.029345509485746643,
            0.029010903449033506,
            0.028702391093352347,
            0.02841631410152757,
            0.02814992929366678,
            0.027901163271117392,
            0.02766848450480472,
            0.02745086044523838,
            0.02724780332952631,
            0.02705955115926298,
            0.026887518594530504,
            0.026735387952674074,
            0.026611925169564295,
            0.026538860264747603,
            0.02657134964220219,
            0.0267896758392026,
            0.026863255872424247,
            0.02596144837641616,
            0.02560115969888153,
            0.02533616584825194,
            0.025104655875482624,
            0.02489497111661642,
            0.024701902785153298,
            0.024522305623944127,
            0.024354004342587523,
            0.02419538492748597,
            0.024045198160409214,
            0.023902449022418636,
            0.023766327827036374,
            0.02363616438681204,
            0.023511396077922894,
            0.023391544833384695,
            0.02327620013807225,
            0.02316500619745752,
            0.0230576520867891,
            0.022953864074938116,
            0.02285339956393949,
            0.022756042247804507,
            0.0226615982041659,
            0.022569892708427103,
            0.022480767613760482,
            0.022394079178787586,
            0.022309696252772154,
            0.02222749874879373,
            0.022147376350761996,
            0.022069227411737887,
            0.0219929580098619,
            0.021918481134985405,
            0.02184571598436404,
            0.021774587349886566,
            0.021705025082554858,
            0.021636963622496792,
            0.021570341584848225,
            0.021505101393486593,
            0.021441188955931622,
            0.021378553373811553,
            0.021317146684178726,
            0.02125692362768639,
            0.02119784144023728,
            0.02113985966521615,
            0.021082939983830932,
            0.021027046061435968,
            0.020972143408003418,
            0.020918199251154807,
            0.020865182420373683,
            0.020813063241198842,
            0.020761813438347834,
            0.02071140604685041,
            0.02066181533038497,
            0.020613016706103722,
            0.020564986675317885,
            0.020517702759485553,
            0.020471143441006857,
            0.020425288108385318,
            0.020380117005363425,
            0.02033561118368048,
            0.020291752459138345,
            0.02024852337069212,
            0.02020590714231315,
            0.020163887647393876,
            0.02012244937548926,
            0.020081577401207723,
            0.02004125735508238,
            0.020001475396269158,
            0.019962218186933008,
            0.019923472868194302,
            0.01988522703752097,
            0.019847468727460276,
            0.019810186385614003,
            0.019773368855768796,
            0.019737005360100913,
            0.019701085482381104,
            0.019665599152111603,
            0.01963053662953288,
            0.0195958884914415,
            0.019561645617767093,
            0.019527799178858603,
            0.019494340623434844,
            0.019461261667157153,
            0.01942855428178555,
            0.01939621068488247,
            0.01936422333003045,
            0.01933258489753332,
            0.019301288285571434,
            0.019270326601784824,
            0.01923969315525901,
            0.019209381448890495,
            0.019179385172110066,
            0.019149698193943805,
            0.019120314556393483,
            0.019091228468117446,
            0.019062434298397248,
            0.01903392657137301,
            0.019005699960534243,
            0.018977749283451792,
            0.018950069496738886,
            0.01892265569122887,
            0.018895503087358805,
            0.018868607030747917,
            0.018841962987962,
            0.018815566542453126,
            0.018789413390667226,
            0.018763499338310577,
            0.018737820296767252,
            0.018712372279661105,
            0.018687151399554385,
            0.018662153864777115,
            0.01863737597638077,
            0.01861281412521062,
            0.01858846478909115,
            0.01856432453011922,
            0.01854038999206036,
            0.018516657897843396,
            0.01849312504714866,
            0.01846978831408625,
            0.018446644644959955,
            0.01842369105611281,
            0.018400924631851688,
            0.018378342522446356,
            0.018355941942200596,
            0.018333720167591994,
            0.01831167453547776,
            0.018289802441363325,
            0.018268101337731518,
            0.018246568732429923,
            0.018225202187113383,
            0.018203999315740217,
            0.018182957783119347,
            0.01816207530350659,
            0.018141349639248093,
            0.01812077859946895,
            0.018100360038805625,
            0.018080091856179474,
            0.01805997199361126,
            0.018039998435073555,
            0.018020169205380753,
            0.018000482369114428,
            0.017980936029583453,
            0.017961528327816483,
            0.01794225744158729,
            0.01792312158446966,
            0.017904119004922472,
            0.017885247985403033,
            0.01786650684150772,
            0.01784789392113897,
            0.017829407603697906,
            0.017811046299301227,
            0.017792808448022137,
            0.017774692519153455,
            0.01775669701049333,
            0.017738820447651942,
            0.01772106138337858,
            0.017703418396908734,
            0.01768589009333016,
            0.017668475102967342,
            0.017651172080783883,
            0.017633979705802084,
            0.017616896680538913,
            0.017599921730458525,
            0.017583053603439897,
            0.01756629106925964,
            0.01754963291908942,
            0.01753307796500703,
            0.017516625039521793,
            0.017500272995112264,
            0.017484020703777293,
            0.017467867056598925,
            0.017451810963317712,
            0.01743585135191917,
            0.017419987168231378,
            0.017404217375533774,
            0.0173885409541761,
            0.017372956901207517,
            0.017357464230015735,
            0.017342061969975515,
            0.017326749166106492,
            0.017311524878739902,
            0.01729638818319391,
            0.017281338169457556,
            0.017266373941882743,
            0.017251494618884103,
            0.017236699332646502,
            0.01722198722884029,
            0.017207357466343387,
            0.017192809216970546,
            0.017178341665209575,
            0.017163954007963965,
            0.01714964545430181,
            0.017135415225211482,
            0.017121262553362732,
            0.01710718668287405,
            0.01709318686908554,
            0.01707926237833766,
            0.017065412487754752,
            0.017051636485034497,
            0.017037933668241766,
            0.017024303345608192,
            0.017010744835335656,
            0.016997257465405313,
            0.016983840573390415,
            0.016970493506274085,
            0.016957215620271165,
            0.016944006280654178,
            0.016930864861583465,
            0.016917790745941186,
            0.016904783325169405,
            0.016891841999111458,
            0.016878966175857442,
            0.016866155271592985,
            0.016853408710451385,
            0.016840725924369426,
            0.01682810635294617,
            0.016815549443305048,
            0.01680305464995903,
            0.01679062143467887,
            0.016778249266364113,
            0.0167659376209173,
            0.016753685981120495,
            0.016741493836514975,
            0.016729360683283297,
            0.016717286024134095,
            0.01670526936818916,
            0.016693310230873466,
            0.016681408133806832,
            0.01666956260469865,
            0.016657773177244397,
            0.016646039391024606,
            0.016634360791406,
            0.016622736929444392,
            0.016611167361790174,
            0.01659965165059543,
            0.016588189363423027,
            0.016576780073157802,
            0.01656542335791948,
            0.016554118800977426,
            0.016542865990667125,
            0.016531664520308374,
            0.016520513988125443,
            0.016509413997168463,
            0.016498364155236662,
            0.016487364074803213,
            0.01647641337294134
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.22316466026913045
            },
            {
                "epoch": 19,
                "error": 0.20525814415882285
            },
            {
                "epoch": 29,
                "error": 0.19306171230430005
            },
            {
                "epoch": 39,
                "error": 0.18283736812652945
            },
            {
                "epoch": 49,
                "error": 0.18018061257962723
            },
            {
                "epoch": 59,
                "error": 0.17842742322142005
            },
            {
                "epoch": 69,
                "error": 0.17694510738521232
            },
            {
                "epoch": 79,
                "error": 0.17586642664815164
            },
            {
                "epoch": 89,
                "error": 0.17498826839040327
            },
            {
                "epoch": 99,
                "error": 0.1742424305983309
            },
            {
                "epoch": 109,
                "error": 0.1735925811281114
            },
            {
                "epoch": 119,
                "error": 0.1730160911050126
            },
            {
                "epoch": 129,
                "error": 0.17249763511810115
            },
            {
                "epoch": 139,
                "error": 0.1720262774651875
            },
            {
                "epoch": 149,
                "error": 0.1715939262096331
            },
            {
                "epoch": 159,
                "error": 0.1711944273516875
            },
            {
                "epoch": 169,
                "error": 0.1708229968757264
            },
            {
                "epoch": 179,
                "error": 0.17047584690754253
            },
            {
                "epoch": 189,
                "error": 0.17014993048680296
            },
            {
                "epoch": 199,
                "error": 0.16984276227605918
            },
            {
                "epoch": 209,
                "error": 0.16955228967731825
            },
            {
                "epoch": 219,
                "error": 0.16927679839280754
            },
            {
                "epoch": 229,
                "error": 0.169014842086338
            },
            {
                "epoch": 239,
                "error": 0.16876518924561545
            },
            {
                "epoch": 249,
                "error": 0.16852678253125875
            },
            {
                "epoch": 259,
                "error": 0.16829870732604799
            },
            {
                "epoch": 269,
                "error": 0.16808016715393603
            },
            {
                "epoch": 279,
                "error": 0.16787046429206415
            },
            {
                "epoch": 289,
                "error": 0.16766898435421349
            },
            {
                "epoch": 299,
                "error": 0.16747518394626595
            }
        ],
        "error_plot_path": "./modelos/200_max_error_plot.png",
        "weights_path": "./modelos/200_max_weights.npy",
        "confusion_matrix_path": "./modelos/200_max_confusion_matrix.png",
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 200,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "max_value",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 300,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    },
    {
        "model_name": "300_threshold",
        "timestamp": 1714178772.194038,
        "epoch_errors": [
            1.0717571267199153,
            0.9957859206232335,
            0.9784720638166793,
            0.8586286226789859,
            0.6017204640072039,
            0.43179802256635824,
            0.33896356332333877,
            0.2712894929933866,
            0.23671612393132796,
            0.18401963078186526,
            0.16264124700806057,
            0.14125499975852207,
            0.1340205223915647,
            0.12841420798990105,
            0.12292472149971605,
            0.11196758868002123,
            0.07956620290734404,
            0.06637817622202782,
            0.06099935413767857,
            0.06461378952255142,
            0.05842511275849227,
            0.057640126419774056,
            0.047937401873751326,
            0.04528709593649519,
            0.044496853740447345,
            0.04210445873718573,
            0.04043704481889448,
            0.03792237695431642,
            0.037310815329894734,
            0.03409796999455725,
            0.03346560537487768,
            0.03350617024341089,
            0.033011660902126407,
            0.03236600140668508,
            0.03185511174919403,
            0.030324592456664898,
            0.031555045332113896,
            0.031181412742224336,
            0.030420118919654886,
            0.031208310630743853,
            0.02996031915010527,
            0.03014095826864784,
            0.03008831461654576,
            0.028912555004134727,
            0.028033076640828963,
            0.027275197463852905,
            0.026341717410081945,
            0.025974904850715564,
            0.025672026892503655,
            0.02540913220897234,
            0.02517332912672162,
            0.024958002226384807,
            0.02475907206000138,
            0.02457375675813527,
            0.02440003419030811,
            0.02423636718486717,
            0.024081547523400887,
            0.0239346005539015,
            0.02379472353808726,
            0.02366124402324236,
            0.023533590715452194,
            0.023411272483566812,
            0.023293862835212648,
            0.02318098818464602,
            0.023072318815572822,
            0.022967561802434328,
            0.022866455383254245,
            0.02276876442740341,
            0.022674276742366533,
            0.02258280003258151,
            0.02249415937159369,
            0.022408195083008595,
            0.022324760950457493,
            0.022243722694920687,
            0.022164956671229214,
            0.022088348745705845,
            0.022013793324627443,
            0.02194119250913424,
            0.021870455356833393,
            0.02180149723396711,
            0.02173423924489026,
            0.02166860772789141,
            0.021604533808235425,
            0.021541953000801358,
            0.021480804855906022,
            0.021421032642909885,
            0.021362583067029022,
            0.021305406015469628,
            0.02124945432958254,
            0.02119468360022636,
            0.021141051983948417,
            0.021088520037954087,
            0.02103705057215185,
            0.020986608516842323,
            0.02093716080487229,
            0.02088867626730762,
            0.02084112554190231,
            0.02079448099385413,
            0.02074871664855802,
            0.020703808136295947,
            0.020659732649049523,
            0.020616468909901858,
            0.020573997155819135,
            0.020532299134987556,
            0.020491358120357753,
            0.02045115894163713,
            0.020411688038723827,
            0.020372933540546975,
            0.02033488537454833,
            0.020297535413728238,
            0.02026087767044306,
            0.02022490854922228,
            0.02018962717511466,
            0.020155035819985068,
            0.020121140457544404,
            0.020087951489877316,
            0.020055484705678403,
            0.020023762556229056,
            0.019992815874049417,
            0.01996268621892947,
            0.019933429129853273,
            0.019905118712075495,
            0.01987785423723141,
            0.019851769856474213,
            0.019827049266927035,
            0.019803948518319927,
            0.019782832699562727,
            0.019764237318511582,
            0.019748975831504822,
            0.019738338542447366,
            0.019734485092890316,
            0.019741281099936284,
            0.019766250725721145,
            0.019825601879606608,
            0.019957966865608526,
            0.020252703787405287,
            0.020761427566623154,
            0.021034711495589862,
            0.0200078769355553,
            0.019420510711241293,
            0.019242897710733294,
            0.01913444756632329,
            0.019051792230148235,
            0.018981607953704103,
            0.018918661509586595,
            0.0188605973217361,
            0.018806203550816903,
            0.018754770338859465,
            0.0187058313817327,
            0.018659051558452773,
            0.01861417403960341,
            0.0185709932046148,
            0.018529339515110172,
            0.018489070324505353,
            0.018450063857647015,
            0.01841221501280478,
            0.01837543228778206,
            0.018339635444647662,
            0.018304753686335617,
            0.018270724203483666,
            0.01823749099814809,
            0.01820500391995049,
            0.0181732178684624,
            0.018142092127696043,
            0.018111589806876927,
            0.018081677367586767,
            0.018052324221691483,
            0.018023502387706006,
            0.017995186195714184,
            0.017967352032865924,
            0.017939978122964856,
            0.017913044334836026,
            0.017886532015101708,
            0.017860423841745007,
            0.017834703695450167,
            0.017809356546202512,
            0.01778436835303461,
            0.01775972597513702,
            0.0177354170928274,
            0.017711430137096276,
            0.017687754226638517,
            0.01766437911143706,
            0.01764129512209786,
            0.017618493124245845,
            0.01759596447738732,
            0.0175737009977226,
            0.017551694924461562,
            0.017529938889252524,
            0.017508425888383507,
            0.017487149257459228,
            0.017466102648291897,
            0.017445280007776343,
            0.017424675558547518,
            0.017404283781241214,
            0.01738409939820027,
            0.017364117358485563,
            0.01734433282406777,
            0.01732474115708817,
            0.01730533790809063,
            0.017286118805134983,
            0.017267079743714046,
            0.01724821677740243,
            0.017229526109173287,
            0.01721100408332663,
            0.01719264717797659,
            0.017174451998051354,
            0.017156415268763856,
            0.01713853382951496,
            0.017120804628194115,
            0.017103224715847277,
            0.01708579124168212,
            0.017068501448386245,
            0.017051352667733107,
            0.017034342316455533,
            0.017017467892366356,
            0.017000726970708317,
            0.016984117200716974,
            0.0169676363023814,
            0.016951282063388654,
            0.01693505233623975,
            0.016918945035524893,
            0.016902958135347774,
            0.016887089666888375,
            0.01687133771609598,
            0.01685570042150306,
            0.016840175972152892,
            0.01682476260563342,
            0.016809458606210696,
            0.01679426230305589,
            0.016779172068559802,
            0.01676418631673006,
            0.016749303501665366,
            0.016734522116103153,
            0.016719840690035306,
            0.01670525778938873,
            0.016690772014766833,
            0.016676382000248614,
            0.016662086412241442,
            0.01664788394838579,
            0.016633773336507656,
            0.016619753333617402,
            0.01660582272495138,
            0.016591980323054832,
            0.01657822496690352,
            0.0165645555210624,
            0.01655097087487865,
            0.016537469941708672,
            0.016524051658175706,
            0.016510714983457884,
            0.016497458898604322,
            0.016484282405878518,
            0.01647118452812722,
            0.016458164308173557,
            0.016445220808234212,
            0.016432353109357575,
            0.016419560310884214,
            0.016406841529926643,
            0.016394195900868797,
            0.01638162257488368,
            0.01636912071946848,
            0.016356689517996483,
            0.016344328169285088,
            0.016332035887178825,
            0.016319811900147398,
            0.016307655450897143,
            0.016295565795996666,
            0.0162835422055143,
            0.016271583962668947,
            0.016259690363491616,
            0.016247860716499106,
            0.016236094342378025,
            0.016224390573679224,
            0.016212748754522277,
            0.016201168240309597,
            0.016189648397449533,
            0.01617818860308833,
            0.01616678824485076,
            0.016155446720588485,
            0.016144163438136672,
            0.01613293781507783,
            0.016121769278513005,
            0.01611065726484001,
            0.01609960121953814,
            0.016088600596959605,
            0.016077654860126914,
            0.016066763480536574,
            0.016055925937968205,
            0.01604514172029938,
            0.016034410323326,
            0.016023731250587637,
            0.016013104013197627,
            0.016002528129678697,
            0.01599200312580252,
            0.01598152853443405,
            0.015971103895380378,
            0.015960728755243316,
            0.0159504026672765,
            0.015940125191245984,
            0.01592989589329502,
            0.015919714345812113
        ],
        "validation_errors": [
            {
                "epoch": 9,
                "error": 0.30271350415128295
            },
            {
                "epoch": 19,
                "error": 0.22693386054972858
            },
            {
                "epoch": 29,
                "error": 0.18973701626287
            },
            {
                "epoch": 39,
                "error": 0.18173949125824074
            },
            {
                "epoch": 49,
                "error": 0.1777791931304564
            },
            {
                "epoch": 59,
                "error": 0.17544990757309495
            },
            {
                "epoch": 69,
                "error": 0.17388766050033144
            },
            {
                "epoch": 79,
                "error": 0.17269935176962437
            },
            {
                "epoch": 89,
                "error": 0.1717406068355315
            },
            {
                "epoch": 99,
                "error": 0.17093641155092293
            },
            {
                "epoch": 109,
                "error": 0.17024179951642698
            },
            {
                "epoch": 119,
                "error": 0.16962681058799262
            },
            {
                "epoch": 129,
                "error": 0.16908427399146472
            },
            {
                "epoch": 139,
                "error": 0.17006850419337133
            },
            {
                "epoch": 149,
                "error": 0.1697240890383045
            },
            {
                "epoch": 159,
                "error": 0.16919364990856064
            },
            {
                "epoch": 169,
                "error": 0.1687209067627726
            },
            {
                "epoch": 179,
                "error": 0.16829641785315452
            },
            {
                "epoch": 189,
                "error": 0.16791034221267703
            },
            {
                "epoch": 199,
                "error": 0.16755559460110553
            },
            {
                "epoch": 209,
                "error": 0.16722695622260694
            },
            {
                "epoch": 219,
                "error": 0.1669204698103894
            },
            {
                "epoch": 229,
                "error": 0.16663306003213996
            },
            {
                "epoch": 239,
                "error": 0.16636228611260157
            },
            {
                "epoch": 249,
                "error": 0.1661061754007467
            },
            {
                "epoch": 259,
                "error": 0.16586310834140955
            },
            {
                "epoch": 269,
                "error": 0.16563173700538877
            },
            {
                "epoch": 279,
                "error": 0.16541092607253002
            },
            {
                "epoch": 289,
                "error": 0.16519970919253013
            },
            {
                "epoch": 299,
                "error": 0.16499725611473876
            }
        ],
        "error_plot_path": "./modelos/300_threshold_error_plot.png",
        "weights_path": "./modelos/300_threshold_weights.npy",
        "confusion_matrix_path": "./modelos/300_threshold_confusion_matrix.png",
        "static": {
            "NO_NODES_INPUT": 120,
            "NO_NODES_HIDDEN": 300,
            "NO_NODES_OUTPUT": 26,
            "CLASSIFICATION_THRESHOLD": 0.5,
            "CLASSIFICATION_CRITERIA": "threshold",
            "ACTIVATE": "Module(body=[Assign(targets=[Name(id='ACTIVATE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='exp', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='logaddexp', ctx=Load()), args=[Constant(value=0), UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))], keywords=[]))], keywords=[])))], type_ignores=[])",
            "ACTIVATE_DERIVATIVE": "Module(body=[Assign(targets=[Name(id='ACTIVATE_DERIVATIVE', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='ACTIVATE', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))))], type_ignores=[])",
            "DEFAULT_MAX_EPOCH": 300,
            "VALIDATION_INTERVAL": 10,
            "INERTIA": 6,
            "ERR_RATE_THRESHOLD": 0.2,
            "AVG_ERROR_THRESHOLD": 0.01,
            "MODEL_EARLY_STOP_CRITERIA": "avg_error",
            "LEARNING_RATE_START": 1.0,
            "LEARNING_RATE_DECAY": 50.0,
            "LEARNING_RATE": "Module(body=[FunctionDef(name='LEARNING_RATE', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epoch', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='LEARNING_RATE_START', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='np', ctx=Load()), attr='e', ctx=Load()), op=Pow(), right=BinOp(left=UnaryOp(op=USub(), operand=Name(id='epoch', ctx=Load())), op=Div(), right=Attribute(value=Name(id='Model', ctx=Load()), attr='LEARNING_RATE_DECAY', ctx=Load())))))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "set_weights_from_file": "Module(body=[FunctionDef(name='set_weights_from_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "feed_forward": "Module(body=[FunctionDef(name='feed_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), For(target=Name(id='current_layer', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='HIDDEN_LAYER', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='previous_layer', ctx=Store())], value=BinOp(left=Name(id='current_layer', ctx=Load()), op=Sub(), right=Name(id='ONE', ctx=Load()))), Assign(targets=[Name(id='layer_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='previous_layer', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='current_layer', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE', ctx=Load())], keywords=[]), args=[Name(id='layer_output', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])",
            "evaluate_model": "Module(body=[FunctionDef(name='evaluate_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='test_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='correct', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='matriz', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='zeros', ctx=Load()), args=[Tuple(elts=[Constant(value=26), Constant(value=26)], ctx=Load())], keywords=[keyword(arg='dtype', value=Name(id='int', ctx=Load()))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Name(id='output', ctx=Load()))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='max_value')]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[]), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='argmax', ctx=Load()), args=[Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_CRITERIA', ctx=Load()), ops=[Eq()], comparators=[Constant(value='threshold')]), body=[Assign(targets=[Name(id='threshold_array', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='vectorize', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='CLASSIFICATION_THRESHOLD', ctx=Load())]))], keywords=[]), args=[Name(id='output', ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='matriz', ctx=Load()), slice=Tuple(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])], ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='threshold_array', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='threshold_array', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Subscript(value=Name(id='test_target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])])]), body=[AugAssign(target=Name(id='correct', ctx=Store()), op=Add(), value=Name(id='ONE', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Return(value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error'), Constant(value='confusion_matrix')], values=[BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Name(id='correct', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='test_set', ctx=Load())], keywords=[]))), Name(id='avg_error', ctx=Load()), Name(id='matriz', ctx=Load())]))], decorator_list=[], type_params=[])], type_ignores=[])",
            "average_layer_error": "Module(body=[FunctionDef(name='average_layer_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Name(id='error', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='avg_error', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='sum', ctx=Load()), args=[Name(id='avg_error', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=0.5))), Return(value=Name(id='avg_error', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), type_params=[])], type_ignores=[])",
            "plot_error": "Module(body=[FunctionDef(name='plot_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Treinamento'))])), Assign(targets=[Name(id='validation_errors', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='error'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='validation_epochs', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value='epoch'), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='plot', ctx=Load()), args=[Name(id='validation_epochs', ctx=Load()), Name(id='validation_errors', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='Valida\u00e7\u00e3o'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='\u00c9poca')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Erro')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='legend', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "plot_confusion_matrix": "Module(body=[FunctionDef(name='plot_confusion_matrix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='confusion_matrix', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='show', annotation=Name(id='bool', ctx=Load())), arg(arg='save_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='alphabet', ctx=Store())], value=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_uppercase', ctx=Load())), Assign(targets=[Name(id='df_cm', ctx=Store())], value=Call(func=Attribute(value=Name(id='pd', ctx=Load()), attr='DataFrame', ctx=Load()), args=[Attribute(value=Name(id='confusion_matrix', ctx=Load()), attr='T', ctx=Load())], keywords=[keyword(arg='index', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)])), keyword(arg='columns', value=ListComp(elt=Subscript(value=Name(id='alphabet', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=26)], keywords=[]), ifs=[], is_async=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='figure', ctx=Load()), args=[], keywords=[keyword(arg='figsize', value=Tuple(elts=[Constant(value=10), Constant(value=7)], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='sn', ctx=Load()), attr='heatmap', ctx=Load()), args=[Name(id='df_cm', ctx=Load())], keywords=[keyword(arg='annot', value=Constant(value=True)), keyword(arg='fmt', value=Constant(value='d'))])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='xlabel', ctx=Load()), args=[Constant(value='Predicted')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='ylabel', ctx=Load()), args=[Constant(value='Actual')], keywords=[])), If(test=Compare(left=Name(id='save_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='savefig', ctx=Load()), args=[Name(id='save_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='show', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='show', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='cla', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='plt', ctx=Load()), attr='clf', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "average_error": "Module(body=[FunctionDef(name='average_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='data_target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='average', ctx=Load()), args=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='absolute', ctx=Load()), args=[BinOp(left=Name(id='data_target', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()), type_params=[])], type_ignores=[])",
            "save_model": "Module(body=[FunctionDef(name='save_model', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model_name'), arg(arg='confusion_matrix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Constant(value='./modelos')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='./modelos/models.json')], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[List(elts=[], ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='models', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='model_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='model_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), orelse=Name(id='model_name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/weights.pkl')]), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_error', ctx=Load()), args=[], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/error_plot.png')])), keyword(arg='show', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='plot_confusion_matrix', ctx=Load()), args=[Name(id='confusion_matrix', ctx=Load())], keywords=[keyword(arg='save_path', value=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='/confusion_matrix.png')])), keyword(arg='show', value=Constant(value=False))])), Assign(targets=[Name(id='model_info', ctx=Store())], value=Dict(keys=[Constant(value='model_name'), Constant(value='timestamp'), Constant(value='epoch_errors'), Constant(value='validation_errors'), Constant(value='error_plot_path'), Constant(value='weights_path'), Constant(value='confusion_matrix_path'), Constant(value='static')], values=[Name(id='model_name', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='UTC', ctx=Load())], keywords=[]), attr='timestamp', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_error_plot.png')]), JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_weights.npy')]), IfExp(test=Compare(left=Name(id='confusion_matrix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='./modelos/'), FormattedValue(value=Name(id='model_name', ctx=Load()), conversion=-1), Constant(value='_confusion_matrix.png')]), orelse=Constant(value='')), Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__architecture__', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='models', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='model_info', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='./modelos/models.json'), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='models', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]))])], decorator_list=[], returns=Constant(value=None), type_params=[])], type_ignores=[])",
            "train": "Module(body=[FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='training_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='validation_target_set', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='target_set', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_target_set', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=BinOp(left=JoinedStr(values=[Constant(value=\"Arguments of train function don't match length requirements\\n\")]), op=Add(), right=Constant(value=\"'training_set' and 'target_set' lenghts should be equal, got{len(training_set), len(target_set)}.\\n\")), op=Add(), right=Constant(value=\"'validation_set' and 'validation_target_set' lenghts should be equal, got{len(validation_set), len(validation_target_set)}.\\n\"))], keywords=[]))], orelse=[]), FunctionDef(name='apply_changes', args=arguments(posonlyargs=[], args=[arg(arg='delta')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None), type_params=[]), FunctionDef(name='backpropagation', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load())), arg(arg='epoch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_INPUT', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='full', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_OUTPUT', ctx=Load()), BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='NO_NODES_HIDDEN', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load()))], ctx=Load()), Name(id='ZERO', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='error_info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='OUTPUT_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='error', ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='error_info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='error_correction', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='ONE', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), For(target=Tuple(elts=[Name(id='current_neuron', ctx=Store()), Name(id='neuron', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='HIDDEN_LAYER', ctx=Load()), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err_sum', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='ie', ctx=Store()), Name(id='er', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='error_info', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='err_sum', ctx=Store()), op=Add(), value=BinOp(left=Name(id='er', ctx=Load()), op=Mult(), right=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='LAST', ctx=Load()), ctx=Load()), slice=Name(id='ie', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='neuron_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='dot', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='error_correction', ctx=Store())], value=BinOp(left=Name(id='err_sum', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ACTIVATE_DERIVATIVE', ctx=Load()), args=[Name(id='neuron_input', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Subscript(value=Name(id='delta', ctx=Load()), slice=Name(id='FIRST', ctx=Load()), ctx=Load()), slice=Name(id='current_neuron', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='error_correction', ctx=Load())), op=Mult(), right=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), slice=Name(id='INPUT_LAYER', ctx=Load()), ctx=Load()), Name(id='BIAS', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='delta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[]), FunctionDef(name='check_to_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='momentum', annotation=Name(id='int', ctx=Load())), arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='validation_set_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='validation_set_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=Name(id='epoch', ctx=Load()), op=Add(), right=Name(id='ONE', ctx=Load())), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='VALIDATION_INTERVAL', ctx=Load())), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load()), type_params=[]), Assign(targets=[Name(id='momentum', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())), Assign(targets=[Name(id='training_timeline', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='early_stop_map', ctx=Store())], value=Dict(keys=[Constant(value='error_rate'), Constant(value='avg_error')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='ERR_RATE_THRESHOLD', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='AVG_ERROR_THRESHOLD', ctx=Load())])), Assign(targets=[Name(id='progress_bar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='trange', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='DEFAULT_MAX_EPOCH', ctx=Load())], keywords=[keyword(arg='ncols', value=Constant(value=100))])), For(target=Name(id='epoch', ctx=Store()), iter=Name(id='progress_bar', ctx=Load()), body=[If(test=Compare(left=Name(id='momentum', ctx=Load()), ops=[Eq()], comparators=[Name(id='ZERO', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='total_error', ctx=Store())], value=Name(id='ZERO', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='target_set', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_forward', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='total_error', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='average_layer_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='apply_changes', ctx=Load()), args=[Call(func=Name(id='backpropagation', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='epoch', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check_to_evaluate', ctx=Load()), args=[Name(id='momentum', ctx=Load()), Name(id='epoch', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='validation_set', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='evaluate_model_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate_model', ctx=Load()), args=[Name(id='validation_set', ctx=Load()), Name(id='validation_target_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='training_timeline', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='evaluate_model_result', ctx=Load()), Name(id='epoch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='weights', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='epoch'), Constant(value='error')], values=[Name(id='epoch', ctx=Load()), Subscript(value=Name(id='evaluate_model_result', ctx=Load()), slice=Constant(value='avg_error'), ctx=Load())])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='early_stop_map', ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), Compare(left=Name(id='momentum', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='MODEL_EARLY_STOP_CRITERIA', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='momentum', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='INERTIA', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='momentum', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[])], orelse=[]), If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='mean_error', ctx=Store())], value=BinOp(left=Name(id='total_error', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='training_set', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch_errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mean_error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='set_description', ctx=Load()), args=[JoinedStr(values=[Constant(value='Epoch: '), FormattedValue(value=Name(id='epoch', ctx=Load()), conversion=-1), Constant(value=' - Erro: '), FormattedValue(value=Name(id='mean_error', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')])), Constant(value=' - Acerto '), FormattedValue(value=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=Subscript(value=Subscript(value=Subscript(value=Name(id='training_timeline', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='error_rate'), ctx=Load())), op=Mult(), right=Constant(value=100)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='% - \u03b1: '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='LEARNING_RATE', ctx=Load()), args=[Name(id='epoch', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.3f')]))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='training_timeline', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='npt', ctx=Load()), attr='NDArray', ctx=Load()), slice=Attribute(value=Name(id='np', ctx=Load()), attr='double', ctx=Load()), ctx=Load()), ctx=Load()), type_params=[])], type_ignores=[])"
        }
    }
]
]